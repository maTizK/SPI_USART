
obj/STM32F4_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ef8  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000008  08006080  08006080  0000e080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08006088  08006088  0000e088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000458  20000000  0800608c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00013d54  20000458  080064e4  00010458  2**2
                  ALLOC
  6 ._user_heap_stack 00000400  200141ac  0801a238  00010458  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00010458  2**0
                  CONTENTS, READONLY
  8 .debug_info   00009c88  00000000  00000000  00010486  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000209f  00000000  00000000  0001a10e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003ff0  00000000  00000000  0001c1ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b60  00000000  00000000  0002019d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a50  00000000  00000000  00020cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005591  00000000  00000000  0002174d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003d49  00000000  00000000  00026cde  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000070  00000000  00000000  0002aa27  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002774  00000000  00000000  0002aa98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000458 	.word	0x20000458
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006068 	.word	0x08006068

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <frame_dummy+0x1c>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4806      	ldr	r0, [pc, #24]	; (80001cc <frame_dummy+0x20>)
 80001b4:	4906      	ldr	r1, [pc, #24]	; (80001d0 <frame_dummy+0x24>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4806      	ldr	r0, [pc, #24]	; (80001d4 <frame_dummy+0x28>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b113      	cbz	r3, 80001c6 <frame_dummy+0x1a>
 80001c0:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <frame_dummy+0x2c>)
 80001c2:	b103      	cbz	r3, 80001c6 <frame_dummy+0x1a>
 80001c4:	4798      	blx	r3
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006068 	.word	0x08006068
 80001d0:	2000045c 	.word	0x2000045c
 80001d4:	20000458 	.word	0x20000458
 80001d8:	00000000 	.word	0x00000000

080001dc <memcpy>:
 80001dc:	4684      	mov	ip, r0
 80001de:	ea41 0300 	orr.w	r3, r1, r0
 80001e2:	f013 0303 	ands.w	r3, r3, #3
 80001e6:	d16d      	bne.n	80002c4 <memcpy+0xe8>
 80001e8:	3a40      	subs	r2, #64	; 0x40
 80001ea:	d341      	bcc.n	8000270 <memcpy+0x94>
 80001ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f0:	f840 3b04 	str.w	r3, [r0], #4
 80001f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f8:	f840 3b04 	str.w	r3, [r0], #4
 80001fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000200:	f840 3b04 	str.w	r3, [r0], #4
 8000204:	f851 3b04 	ldr.w	r3, [r1], #4
 8000208:	f840 3b04 	str.w	r3, [r0], #4
 800020c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000210:	f840 3b04 	str.w	r3, [r0], #4
 8000214:	f851 3b04 	ldr.w	r3, [r1], #4
 8000218:	f840 3b04 	str.w	r3, [r0], #4
 800021c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000220:	f840 3b04 	str.w	r3, [r0], #4
 8000224:	f851 3b04 	ldr.w	r3, [r1], #4
 8000228:	f840 3b04 	str.w	r3, [r0], #4
 800022c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000230:	f840 3b04 	str.w	r3, [r0], #4
 8000234:	f851 3b04 	ldr.w	r3, [r1], #4
 8000238:	f840 3b04 	str.w	r3, [r0], #4
 800023c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000240:	f840 3b04 	str.w	r3, [r0], #4
 8000244:	f851 3b04 	ldr.w	r3, [r1], #4
 8000248:	f840 3b04 	str.w	r3, [r0], #4
 800024c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000250:	f840 3b04 	str.w	r3, [r0], #4
 8000254:	f851 3b04 	ldr.w	r3, [r1], #4
 8000258:	f840 3b04 	str.w	r3, [r0], #4
 800025c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000260:	f840 3b04 	str.w	r3, [r0], #4
 8000264:	f851 3b04 	ldr.w	r3, [r1], #4
 8000268:	f840 3b04 	str.w	r3, [r0], #4
 800026c:	3a40      	subs	r2, #64	; 0x40
 800026e:	d2bd      	bcs.n	80001ec <memcpy+0x10>
 8000270:	3230      	adds	r2, #48	; 0x30
 8000272:	d311      	bcc.n	8000298 <memcpy+0xbc>
 8000274:	f851 3b04 	ldr.w	r3, [r1], #4
 8000278:	f840 3b04 	str.w	r3, [r0], #4
 800027c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000280:	f840 3b04 	str.w	r3, [r0], #4
 8000284:	f851 3b04 	ldr.w	r3, [r1], #4
 8000288:	f840 3b04 	str.w	r3, [r0], #4
 800028c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000290:	f840 3b04 	str.w	r3, [r0], #4
 8000294:	3a10      	subs	r2, #16
 8000296:	d2ed      	bcs.n	8000274 <memcpy+0x98>
 8000298:	320c      	adds	r2, #12
 800029a:	d305      	bcc.n	80002a8 <memcpy+0xcc>
 800029c:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a0:	f840 3b04 	str.w	r3, [r0], #4
 80002a4:	3a04      	subs	r2, #4
 80002a6:	d2f9      	bcs.n	800029c <memcpy+0xc0>
 80002a8:	3204      	adds	r2, #4
 80002aa:	d008      	beq.n	80002be <memcpy+0xe2>
 80002ac:	07d2      	lsls	r2, r2, #31
 80002ae:	bf1c      	itt	ne
 80002b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002b4:	f800 3b01 	strbne.w	r3, [r0], #1
 80002b8:	d301      	bcc.n	80002be <memcpy+0xe2>
 80002ba:	880b      	ldrh	r3, [r1, #0]
 80002bc:	8003      	strh	r3, [r0, #0]
 80002be:	4660      	mov	r0, ip
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	2a08      	cmp	r2, #8
 80002c6:	d313      	bcc.n	80002f0 <memcpy+0x114>
 80002c8:	078b      	lsls	r3, r1, #30
 80002ca:	d08d      	beq.n	80001e8 <memcpy+0xc>
 80002cc:	f010 0303 	ands.w	r3, r0, #3
 80002d0:	d08a      	beq.n	80001e8 <memcpy+0xc>
 80002d2:	f1c3 0304 	rsb	r3, r3, #4
 80002d6:	1ad2      	subs	r2, r2, r3
 80002d8:	07db      	lsls	r3, r3, #31
 80002da:	bf1c      	itt	ne
 80002dc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002e0:	f800 3b01 	strbne.w	r3, [r0], #1
 80002e4:	d380      	bcc.n	80001e8 <memcpy+0xc>
 80002e6:	f831 3b02 	ldrh.w	r3, [r1], #2
 80002ea:	f820 3b02 	strh.w	r3, [r0], #2
 80002ee:	e77b      	b.n	80001e8 <memcpy+0xc>
 80002f0:	3a04      	subs	r2, #4
 80002f2:	d3d9      	bcc.n	80002a8 <memcpy+0xcc>
 80002f4:	3a01      	subs	r2, #1
 80002f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002fa:	f800 3b01 	strb.w	r3, [r0], #1
 80002fe:	d2f9      	bcs.n	80002f4 <memcpy+0x118>
 8000300:	780b      	ldrb	r3, [r1, #0]
 8000302:	7003      	strb	r3, [r0, #0]
 8000304:	784b      	ldrb	r3, [r1, #1]
 8000306:	7043      	strb	r3, [r0, #1]
 8000308:	788b      	ldrb	r3, [r1, #2]
 800030a:	7083      	strb	r3, [r0, #2]
 800030c:	4660      	mov	r0, ip
 800030e:	4770      	bx	lr

08000310 <init_SPIx>:
#define pdTrue 	1

/*============================================================================
 * 	func void init_SPIx(void)
 *===========================================================================*/ 
void init_SPIx(void){
 8000310:	b580      	push	{r7, lr}
 8000312:	b09a      	sub	sp, #104	; 0x68
 8000314:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStruct;

	
	
	// enable clock for used IO pins
	RCC_AHB1PeriphClockCmd(SPIx_MOSI_GPIO_CLK, ENABLE);
 8000316:	2001      	movs	r0, #1
 8000318:	2101      	movs	r1, #1
 800031a:	f004 fd7b 	bl	8004e14 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(SPIx_MISO_GPIO_CLK, ENABLE);
 800031e:	2001      	movs	r0, #1
 8000320:	2101      	movs	r1, #1
 8000322:	f004 fd77 	bl	8004e14 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(SPIx_SCK_GPIO_CLK, ENABLE);
 8000326:	2001      	movs	r0, #1
 8000328:	2101      	movs	r1, #1
 800032a:	f004 fd73 	bl	8004e14 <RCC_AHB1PeriphClockCmd>
	 * PA5 = SCK
	 * PA6 = MISO
	 * PA7 = MOSI
	 */
	// MOSI PA7
	GPIO_InitStruct.GPIO_Pin = SPIx_MOSI_PIN ;
 800032e:	2380      	movs	r3, #128	; 0x80
 8000330:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000332:	2302      	movs	r3, #2
 8000334:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000338:	2300      	movs	r3, #0
 800033a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800033e:	2303      	movs	r3, #3
 8000340:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000344:	2302      	movs	r3, #2
 8000346:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800034a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800034e:	48b1      	ldr	r0, [pc, #708]	; (8000614 <init_SPIx+0x304>)
 8000350:	4619      	mov	r1, r3
 8000352:	f004 fa77 	bl	8004844 <GPIO_Init>
	// SCK PA5
	GPIO_InitStruct.GPIO_Pin = SPIx_SCK_PIN;
 8000356:	2320      	movs	r3, #32
 8000358:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 800035a:	2302      	movs	r3, #2
 800035c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000360:	2300      	movs	r3, #0
 8000362:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000366:	2303      	movs	r3, #3
 8000368:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 800036c:	2302      	movs	r3, #2
 800036e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000372:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000376:	48a7      	ldr	r0, [pc, #668]	; (8000614 <init_SPIx+0x304>)
 8000378:	4619      	mov	r1, r3
 800037a:	f004 fa63 	bl	8004844 <GPIO_Init>
	// MISO PA6
	GPIO_InitStruct.GPIO_Pin = SPIx_MISO_PIN;
 800037e:	2340      	movs	r3, #64	; 0x40
 8000380:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000382:	2302      	movs	r3, #2
 8000384:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8000388:	2301      	movs	r3, #1
 800038a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800038e:	2303      	movs	r3, #3
 8000390:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000394:	2300      	movs	r3, #0
 8000396:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 800039a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800039e:	489d      	ldr	r0, [pc, #628]	; (8000614 <init_SPIx+0x304>)
 80003a0:	4619      	mov	r1, r3
 80003a2:	f004 fa4f 	bl	8004844 <GPIO_Init>
	
	// connect SPI1 pins to SPI alternate function
	GPIO_PinAFConfig(SPIx_MISO_GPIO_PORT, SPIx_MISO_SOURCE, SPIx_MISO_AF);
 80003a6:	489b      	ldr	r0, [pc, #620]	; (8000614 <init_SPIx+0x304>)
 80003a8:	2106      	movs	r1, #6
 80003aa:	2205      	movs	r2, #5
 80003ac:	f004 fb60 	bl	8004a70 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(SPIx_MOSI_GPIO_PORT, SPIx_MOSI_SOURCE, SPIx_MOSI_AF);
 80003b0:	4898      	ldr	r0, [pc, #608]	; (8000614 <init_SPIx+0x304>)
 80003b2:	2107      	movs	r1, #7
 80003b4:	2205      	movs	r2, #5
 80003b6:	f004 fb5b 	bl	8004a70 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(SPIx_SCK_GPIO_PORT,  SPIx_SCK_SOURCE,  SPIx_SCK_AF);
 80003ba:	4896      	ldr	r0, [pc, #600]	; (8000614 <init_SPIx+0x304>)
 80003bc:	2105      	movs	r1, #5
 80003be:	2205      	movs	r2, #5
 80003c0:	f004 fb56 	bl	8004a70 <GPIO_PinAFConfig>


	RCC_AHB1PeriphClockCmd(WIZ_HR_GPIO_CLK, ENABLE);
 80003c4:	2004      	movs	r0, #4
 80003c6:	2101      	movs	r1, #1
 80003c8:	f004 fd24 	bl	8004e14 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(WIZ_IT_GPIO_CLK, ENABLE);
 80003cc:	2004      	movs	r0, #4
 80003ce:	2101      	movs	r1, #1
 80003d0:	f004 fd20 	bl	8004e14 <RCC_AHB1PeriphClockCmd>
	
		
	/* Configure the chip select pin
	   in this case we will use PA4 */
	GPIO_InitStruct.GPIO_Pin = SPIx_CS_PIN;
 80003d4:	2310      	movs	r3, #16
 80003d6:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 80003d8:	2301      	movs	r3, #1
 80003da:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80003de:	2300      	movs	r3, #0
 80003e0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80003e4:	2303      	movs	r3, #3
 80003e6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 80003ea:	2301      	movs	r3, #1
 80003ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(SPIx_CS_GPIO_PORT, &GPIO_InitStruct);
 80003f0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80003f4:	4887      	ldr	r0, [pc, #540]	; (8000614 <init_SPIx+0x304>)
 80003f6:	4619      	mov	r1, r3
 80003f8:	f004 fa24 	bl	8004844 <GPIO_Init>
	
	CSOFF(); // set PA4 high
 80003fc:	4b85      	ldr	r3, [pc, #532]	; (8000614 <init_SPIx+0x304>)
 80003fe:	4a85      	ldr	r2, [pc, #532]	; (8000614 <init_SPIx+0x304>)
 8000400:	8b12      	ldrh	r2, [r2, #24]
 8000402:	b292      	uxth	r2, r2
 8000404:	f042 0210 	orr.w	r2, r2, #16
 8000408:	b292      	uxth	r2, r2
 800040a:	831a      	strh	r2, [r3, #24]

	/* Configure the hard reset pin
	   in this case we will use PA3 */
	GPIO_InitStruct.GPIO_Pin = WIZ_HR_PIN;
 800040c:	2320      	movs	r3, #32
 800040e:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8000410:	2301      	movs	r3, #1
 8000412:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000416:	2300      	movs	r3, #0
 8000418:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800041c:	2303      	movs	r3, #3
 800041e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000422:	2301      	movs	r3, #1
 8000424:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_Init(WIZ_HR_GPIO_PORT, &GPIO_InitStruct);
 8000428:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800042c:	487a      	ldr	r0, [pc, #488]	; (8000618 <init_SPIx+0x308>)
 800042e:	4619      	mov	r1, r3
 8000430:	f004 fa08 	bl	8004844 <GPIO_Init>
	
	RESET_LOW(); // set PA3 high
 8000434:	4b78      	ldr	r3, [pc, #480]	; (8000618 <init_SPIx+0x308>)
 8000436:	4a78      	ldr	r2, [pc, #480]	; (8000618 <init_SPIx+0x308>)
 8000438:	8b12      	ldrh	r2, [r2, #24]
 800043a:	b292      	uxth	r2, r2
 800043c:	f042 0220 	orr.w	r2, r2, #32
 8000440:	b292      	uxth	r2, r2
 8000442:	831a      	strh	r2, [r3, #24]

	// enable peripheral clock
	RCC_APB2PeriphClockCmd(SPIx_CLK, ENABLE);
 8000444:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000448:	2101      	movs	r1, #1
 800044a:	f004 fd1b 	bl	8004e84 <RCC_APB2PeriphClockCmd>
	
	/* configure SPI1 in Mode 0 
	 * CPOL = 0 --> clock is low when idle
	 * CPHA = 0 --> data is sampled at the first edge
	 */
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex; // set to full duplex mode, seperate MOSI and MISO lines
 800044e:	2300      	movs	r3, #0
 8000450:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;     // transmit in master mode, NSS pin has to be always high
 8000454:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000458:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b; // one packet of data is 8 bits wide
 800045c:	2300      	movs	r3, #0
 800045e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;        // clock is low when idle
 8000462:	2300      	movs	r3, #0
 8000464:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;      // data sampled at second edge
 8000468:	2300      	movs	r3, #0
 800046a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft | SPI_NSSInternalSoft_Set; // set the NSS management to internal and pull internal NSS high
 800046e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000472:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4; // SPI frequency is APB2 frequency / 4
 8000476:	2308      	movs	r3, #8
 8000478:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;// data is transmitted MSB first
 800047c:	2300      	movs	r3, #0
 800047e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	SPI_Init(SPIx, &SPI_InitStruct); 
 8000482:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000486:	4865      	ldr	r0, [pc, #404]	; (800061c <init_SPIx+0x30c>)
 8000488:	4619      	mov	r1, r3
 800048a:	f004 fd33 	bl	8004ef4 <SPI_Init>
	
	SPI_Cmd(SPIx, ENABLE);			
 800048e:	4863      	ldr	r0, [pc, #396]	; (800061c <init_SPIx+0x30c>)
 8000490:	2101      	movs	r1, #1
 8000492:	f004 fe21 	bl	80050d8 <SPI_Cmd>
	

	/* setup DMA */

	// enable clock 
	RCC_AHB1PeriphClockCmd (SPIx_DMA_CLK, ENABLE); 
 8000496:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800049a:	2101      	movs	r1, #1
 800049c:	f004 fcba 	bl	8004e14 <RCC_AHB1PeriphClockCmd>
	
	// start with blank DMA configuration
	DMA_DeInit (SPIx_TX_DMA_STREAM);
 80004a0:	485f      	ldr	r0, [pc, #380]	; (8000620 <init_SPIx+0x310>)
 80004a2:	f003 f97f 	bl	80037a4 <DMA_DeInit>
	DMA_DeInit (SPIx_RX_DMA_STREAM);
 80004a6:	485f      	ldr	r0, [pc, #380]	; (8000624 <init_SPIx+0x314>)
 80004a8:	f003 f97c 	bl	80037a4 <DMA_DeInit>

	// check if DMA stream is disabled before enabling 
	// this is useful when stream is enabled and disabled multiple times. 
	while (DMA_GetCmdStatus (SPIx_TX_DMA_STREAM) != DISABLE);
 80004ac:	bf00      	nop
 80004ae:	485c      	ldr	r0, [pc, #368]	; (8000620 <init_SPIx+0x310>)
 80004b0:	f003 fd88 	bl	8003fc4 <DMA_GetCmdStatus>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d1f9      	bne.n	80004ae <init_SPIx+0x19e>
	while (DMA_GetCmdStatus (SPIx_RX_DMA_STREAM) != DISABLE);
 80004ba:	bf00      	nop
 80004bc:	4859      	ldr	r0, [pc, #356]	; (8000624 <init_SPIx+0x314>)
 80004be:	f003 fd81 	bl	8003fc4 <DMA_GetCmdStatus>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d1f9      	bne.n	80004bc <init_SPIx+0x1ac>
	
	
	DMA_StructInit(&DMA_InitStruct);
 80004c8:	f107 0310 	add.w	r3, r7, #16
 80004cc:	4618      	mov	r0, r3
 80004ce:	f003 fc43 	bl	8003d58 <DMA_StructInit>
  	//Configure DMA Initialization Structure
	//DMA_InitStruct.DMA_FIFOMode = DMA_FIFOMode_Disable ;
 	//DMA_InitStruct.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull ;
  	//DMA_InitStruct.DMA_MemoryBurst = DMA_MemoryBurst_Single ;
  	DMA_InitStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80004d2:	2300      	movs	r3, #0
 80004d4:	633b      	str	r3, [r7, #48]	; 0x30
  	DMA_InitStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80004d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004da:	62bb      	str	r3, [r7, #40]	; 0x28
  	DMA_InitStruct.DMA_Mode = DMA_Mode_Normal;
 80004dc:	2300      	movs	r3, #0
 80004de:	637b      	str	r3, [r7, #52]	; 0x34
  	DMA_InitStruct.DMA_PeripheralBaseAddr =(uint32_t) (&(SPIx->DR)) ;
 80004e0:	4b51      	ldr	r3, [pc, #324]	; (8000628 <init_SPIx+0x318>)
 80004e2:	617b      	str	r3, [r7, #20]
  	DMA_InitStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80004e4:	2300      	movs	r3, #0
 80004e6:	64bb      	str	r3, [r7, #72]	; 0x48
  	DMA_InitStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80004e8:	2300      	movs	r3, #0
 80004ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  	DMA_InitStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80004ec:	2300      	movs	r3, #0
 80004ee:	627b      	str	r3, [r7, #36]	; 0x24
  	DMA_InitStruct.DMA_Priority = DMA_Priority_High;
 80004f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80004f4:	63bb      	str	r3, [r7, #56]	; 0x38
  	// Configure TX DMA 
  	DMA_InitStruct.DMA_Channel = SPIx_TX_DMA_CHANNEL ;
 80004f6:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80004fa:	613b      	str	r3, [r7, #16]
  	DMA_InitStruct.DMA_DIR = DMA_DIR_MemoryToPeripheral ;
 80004fc:	2340      	movs	r3, #64	; 0x40
 80004fe:	61fb      	str	r3, [r7, #28]
  	DMA_InitStruct.DMA_Memory0BaseAddr = (uint32_t) &bufferTX ;
 8000500:	4b4a      	ldr	r3, [pc, #296]	; (800062c <init_SPIx+0x31c>)
 8000502:	61bb      	str	r3, [r7, #24]
	DMA_InitStruct.DMA_BufferSize = MAX_BUFFER_LENGTH;
 8000504:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000508:	623b      	str	r3, [r7, #32]
  	DMA_Init(SPIx_TX_DMA_STREAM, &DMA_InitStruct);
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	4844      	ldr	r0, [pc, #272]	; (8000620 <init_SPIx+0x310>)
 8000510:	4619      	mov	r1, r3
 8000512:	f003 fa5d 	bl	80039d0 <DMA_Init>
	// Configure RX DMA 
  	DMA_InitStruct.DMA_Channel = SPIx_RX_DMA_CHANNEL ;
 8000516:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 800051a:	613b      	str	r3, [r7, #16]
	DMA_InitStruct.DMA_DIR = DMA_DIR_PeripheralToMemory ;
 800051c:	2300      	movs	r3, #0
 800051e:	61fb      	str	r3, [r7, #28]
	DMA_InitStruct.DMA_Memory0BaseAddr = (uint32_t)&bufferRX; 
 8000520:	4b43      	ldr	r3, [pc, #268]	; (8000630 <init_SPIx+0x320>)
 8000522:	61bb      	str	r3, [r7, #24]
	DMA_InitStruct.DMA_BufferSize = MAX_BUFFER_LENGTH;
 8000524:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000528:	623b      	str	r3, [r7, #32]
	DMA_Init(SPIx_RX_DMA_STREAM, &DMA_InitStruct);	
 800052a:	f107 0310 	add.w	r3, r7, #16
 800052e:	483d      	ldr	r0, [pc, #244]	; (8000624 <init_SPIx+0x314>)
 8000530:	4619      	mov	r1, r3
 8000532:	f003 fa4d 	bl	80039d0 <DMA_Init>
	
	DMA_ITConfig(SPIx_TX_DMA_STREAM, DMA_IT_TC, ENABLE); 
 8000536:	483a      	ldr	r0, [pc, #232]	; (8000620 <init_SPIx+0x310>)
 8000538:	2110      	movs	r1, #16
 800053a:	2201      	movs	r2, #1
 800053c:	f003 fdc0 	bl	80040c0 <DMA_ITConfig>
	DMA_ITConfig(SPIx_RX_DMA_STREAM, DMA_IT_TC, ENABLE); 
 8000540:	4838      	ldr	r0, [pc, #224]	; (8000624 <init_SPIx+0x314>)
 8000542:	2110      	movs	r1, #16
 8000544:	2201      	movs	r2, #1
 8000546:	f003 fdbb 	bl	80040c0 <DMA_ITConfig>
  
	SPI_I2S_ClearFlag(SPIx, SPI_I2S_FLAG_TXE);
 800054a:	4834      	ldr	r0, [pc, #208]	; (800061c <init_SPIx+0x30c>)
 800054c:	2102      	movs	r1, #2
 800054e:	f004 fec1 	bl	80052d4 <SPI_I2S_ClearFlag>
	SPI_I2S_ClearFlag(SPIx, SPI_I2S_FLAG_RXNE);
 8000552:	4832      	ldr	r0, [pc, #200]	; (800061c <init_SPIx+0x30c>)
 8000554:	2101      	movs	r1, #1
 8000556:	f004 febd 	bl	80052d4 <SPI_I2S_ClearFlag>
  	
	// enable the interrupt in the NVIC
 	NVIC_InitStruct.NVIC_IRQChannel = SPIx_TX_DMA_IRQn;
 800055a:	233b      	movs	r3, #59	; 0x3b
 800055c:	733b      	strb	r3, [r7, #12]
  	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 2;
 800055e:	2307      	movs	r3, #7
 8000560:	737b      	strb	r3, [r7, #13]
 	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x1;
 8000562:	2301      	movs	r3, #1
 8000564:	73bb      	strb	r3, [r7, #14]
  	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000566:	2301      	movs	r3, #1
 8000568:	73fb      	strb	r3, [r7, #15]
  	NVIC_Init (&NVIC_InitStruct);
 800056a:	f107 030c 	add.w	r3, r7, #12
 800056e:	4618      	mov	r0, r3
 8000570:	f003 f870 	bl	8003654 <NVIC_Init>
	// enable the interrupt in the NVIC
 	NVIC_InitStruct.NVIC_IRQChannel = SPIx_RX_DMA_IRQn;
 8000574:	233a      	movs	r3, #58	; 0x3a
 8000576:	733b      	strb	r3, [r7, #12]
   	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 2;
 8000578:	2307      	movs	r3, #7
 800057a:	737b      	strb	r3, [r7, #13]
 	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x1;
 800057c:	2301      	movs	r3, #1
 800057e:	73bb      	strb	r3, [r7, #14]
  	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000580:	2301      	movs	r3, #1
 8000582:	73fb      	strb	r3, [r7, #15]
  	NVIC_Init (&NVIC_InitStruct);
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	4618      	mov	r0, r3
 800058a:	f003 f863 	bl	8003654 <NVIC_Init>
  	// Enable dma tx and rx request
	SPI_I2S_DMACmd (SPIx, SPI_I2S_DMAReq_Tx, ENABLE);	
 800058e:	4823      	ldr	r0, [pc, #140]	; (800061c <init_SPIx+0x30c>)
 8000590:	2102      	movs	r1, #2
 8000592:	2201      	movs	r2, #1
 8000594:	f004 fde2 	bl	800515c <SPI_I2S_DMACmd>
	SPI_I2S_DMACmd (SPIx, SPI_I2S_DMAReq_Rx, ENABLE);	
 8000598:	4820      	ldr	r0, [pc, #128]	; (800061c <init_SPIx+0x30c>)
 800059a:	2101      	movs	r1, #1
 800059c:	2201      	movs	r2, #1
 800059e:	f004 fddd 	bl	800515c <SPI_I2S_DMACmd>
	

	/* Configure interrupt pin */
	GPIO_InitStruct.GPIO_Pin = WIZ_IT_PIN;
 80005a2:	2310      	movs	r3, #16
 80005a4:	663b      	str	r3, [r7, #96]	; 0x60
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 80005a6:	2300      	movs	r3, #0
 80005a8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80005ac:	2300      	movs	r3, #0
 80005ae:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80005b8:	2303      	movs	r3, #3
 80005ba:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GPIO_Init(WIZ_IT_GPIO_PORT, &GPIO_InitStruct);	
 80005be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80005c2:	4815      	ldr	r0, [pc, #84]	; (8000618 <init_SPIx+0x308>)
 80005c4:	4619      	mov	r1, r3
 80005c6:	f004 f93d 	bl	8004844 <GPIO_Init>
	
	EXTI_InitTypeDef EXTI_InitStruct;
	NVIC_InitTypeDef NVIC_InitStruct1;
	/* Connect EXTI Line to appropriate GPIO Pin */ 
	
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80005ca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80005ce:	2101      	movs	r1, #1
 80005d0:	f004 fc58 	bl	8004e84 <RCC_APB2PeriphClockCmd>

	SYSCFG_EXTILineConfig(WIZ_IT_EXTI_PORT_SOURCE, WIZ_IT_EXTI_PIN_SOURCE);
 80005d4:	2002      	movs	r0, #2
 80005d6:	2104      	movs	r1, #4
 80005d8:	f004 feb6 	bl	8005348 <SYSCFG_EXTILineConfig>
	
	/* Configure EXTI Line */
	EXTI_InitStruct.EXTI_Line = WIZ_IT_EXTI_LINE;
 80005dc:	2310      	movs	r3, #16
 80005de:	607b      	str	r3, [r7, #4]
 	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 80005e0:	2300      	movs	r3, #0
 80005e2:	723b      	strb	r3, [r7, #8]
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Falling;
 80005e4:	230c      	movs	r3, #12
 80005e6:	727b      	strb	r3, [r7, #9]
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	72bb      	strb	r3, [r7, #10]
	EXTI_Init(&EXTI_InitStruct);
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	4618      	mov	r0, r3
 80005f0:	f004 f884 	bl	80046fc <EXTI_Init>
 	
 	/* Enable and set EXTI Line Interrupt */
	NVIC_InitStruct1.NVIC_IRQChannel = WIZ_IT_EXTI_IRQn;
 80005f4:	230a      	movs	r3, #10
 80005f6:	703b      	strb	r3, [r7, #0]
 	NVIC_InitStruct1.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 4;
 80005f8:	2309      	movs	r3, #9
 80005fa:	707b      	strb	r3, [r7, #1]
	NVIC_InitStruct1.NVIC_IRQChannelSubPriority = 0x3;
 80005fc:	2303      	movs	r3, #3
 80005fe:	70bb      	strb	r3, [r7, #2]
 	NVIC_InitStruct1.NVIC_IRQChannelCmd = ENABLE;
 8000600:	2301      	movs	r3, #1
 8000602:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&NVIC_InitStruct1);
 8000604:	463b      	mov	r3, r7
 8000606:	4618      	mov	r0, r3
 8000608:	f003 f824 	bl	8003654 <NVIC_Init>


	
}
 800060c:	3768      	adds	r7, #104	; 0x68
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40020000 	.word	0x40020000
 8000618:	40020800 	.word	0x40020800
 800061c:	40013000 	.word	0x40013000
 8000620:	40026458 	.word	0x40026458
 8000624:	40026440 	.word	0x40026440
 8000628:	4001300c 	.word	0x4001300c
 800062c:	200139cc 	.word	0x200139cc
 8000630:	200131f4 	.word	0x200131f4

08000634 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler()
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
	/*!	\var static unsigned portBASE_TYPE xHigherPriorityTaskWoken
	 * 	\brief Indicates if higher priority has been woken
	 */

	unsigned portBASE_TYPE xHigherPriorityTaskWoken = pdFalse;
 800063a:	2300      	movs	r3, #0
 800063c:	607b      	str	r3, [r7, #4]

  // Test if DMA Stream Transfer Complete interrupt
  if (DMA_GetITStatus (SPIx_RX_DMA_STREAM, DMA_IT_TCIF2)) {
 800063e:	481d      	ldr	r0, [pc, #116]	; (80006b4 <DMA2_Stream2_IRQHandler+0x80>)
 8000640:	491d      	ldr	r1, [pc, #116]	; (80006b8 <DMA2_Stream2_IRQHandler+0x84>)
 8000642:	f003 fdf3 	bl	800422c <DMA_GetITStatus>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d028      	beq.n	800069e <DMA2_Stream2_IRQHandler+0x6a>
    
	DMA_ClearITPendingBit (SPIx_RX_DMA_STREAM, DMA_IT_TCIF2);
 800064c:	4819      	ldr	r0, [pc, #100]	; (80006b4 <DMA2_Stream2_IRQHandler+0x80>)
 800064e:	491a      	ldr	r1, [pc, #104]	; (80006b8 <DMA2_Stream2_IRQHandler+0x84>)
 8000650:	f003 ffa8 	bl	80045a4 <DMA_ClearITPendingBit>
	
	while (SPI_I2S_GetFlagStatus (SPIx, SPI_I2S_FLAG_BSY) == SET);
 8000654:	bf00      	nop
 8000656:	4819      	ldr	r0, [pc, #100]	; (80006bc <DMA2_Stream2_IRQHandler+0x88>)
 8000658:	2180      	movs	r1, #128	; 0x80
 800065a:	f004 fddd 	bl	8005218 <SPI_I2S_GetFlagStatus>
 800065e:	4603      	mov	r3, r0
 8000660:	2b01      	cmp	r3, #1
 8000662:	d0f8      	beq.n	8000656 <DMA2_Stream2_IRQHandler+0x22>
     * Now we can deselect the display. If more than one peripheral was being run
     * on this SPI peripheral, we would have to do both/all of them, or work out
     * which one was active and deselect that one.i
	
     */
	CSOFF();
 8000664:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <DMA2_Stream2_IRQHandler+0x8c>)
 8000666:	4a16      	ldr	r2, [pc, #88]	; (80006c0 <DMA2_Stream2_IRQHandler+0x8c>)
 8000668:	8b12      	ldrh	r2, [r2, #24]
 800066a:	b292      	uxth	r2, r2
 800066c:	f042 0210 	orr.w	r2, r2, #16
 8000670:	b292      	uxth	r2, r2
 8000672:	831a      	strh	r2, [r3, #24]
	DMA_Cmd(SPIx_TX_DMA_STREAM, DISABLE);		
 8000674:	4813      	ldr	r0, [pc, #76]	; (80006c4 <DMA2_Stream2_IRQHandler+0x90>)
 8000676:	2100      	movs	r1, #0
 8000678:	f003 fba4 	bl	8003dc4 <DMA_Cmd>
	DMA_Cmd(SPIx_RX_DMA_STREAM, DISABLE);		
 800067c:	480d      	ldr	r0, [pc, #52]	; (80006b4 <DMA2_Stream2_IRQHandler+0x80>)
 800067e:	2100      	movs	r1, #0
 8000680:	f003 fba0 	bl	8003dc4 <DMA_Cmd>
 
	taskENTER_CRITICAL(); 
 8000684:	f002 f940 	bl	8002908 <vPortEnterCritical>
//       xSemaphoreGive( xSemaphoreDMASPI);
	xSemaphoreGiveFromISR( xSemaphoreDMASPI, &xHigherPriorityTaskWoken );
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <DMA2_Stream2_IRQHandler+0x94>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	4610      	mov	r0, r2
 8000690:	2100      	movs	r1, #0
 8000692:	461a      	mov	r2, r3
 8000694:	2300      	movs	r3, #0
 8000696:	f001 fd49 	bl	800212c <xQueueGenericSendFromISR>
	taskEXIT_CRITICAL(); //
 800069a:	f002 f945 	bl	8002928 <vPortExitCritical>
  }	
 portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d003      	beq.n	80006ac <DMA2_Stream2_IRQHandler+0x78>
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <DMA2_Stream2_IRQHandler+0x98>)
 80006a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006aa:	601a      	str	r2, [r3, #0]
}
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40026440 	.word	0x40026440
 80006b8:	10208000 	.word	0x10208000
 80006bc:	40013000 	.word	0x40013000
 80006c0:	40020000 	.word	0x40020000
 80006c4:	40026458 	.word	0x40026458
 80006c8:	200131e0 	.word	0x200131e0
 80006cc:	e000ed04 	.word	0xe000ed04

080006d0 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler()
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
	/*!	\var static unsigned portBASE_TYPE xHigherPriorityTaskWoken
	 * 	\brief Indicates if higher priority has been woken
	 */

	unsigned portBASE_TYPE xHigherPriorityTaskWoken = pdFalse;
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]

  // Test if DMA Stream Transfer Complete interrupt
  if (DMA_GetITStatus (SPIx_TX_DMA_STREAM, DMA_IT_TCIF3)) {
 80006da:	481d      	ldr	r0, [pc, #116]	; (8000750 <DMA2_Stream3_IRQHandler+0x80>)
 80006dc:	491d      	ldr	r1, [pc, #116]	; (8000754 <DMA2_Stream3_IRQHandler+0x84>)
 80006de:	f003 fda5 	bl	800422c <DMA_GetITStatus>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d028      	beq.n	800073a <DMA2_Stream3_IRQHandler+0x6a>
    
	DMA_ClearITPendingBit (SPIx_TX_DMA_STREAM, DMA_IT_TCIF3);
 80006e8:	4819      	ldr	r0, [pc, #100]	; (8000750 <DMA2_Stream3_IRQHandler+0x80>)
 80006ea:	491a      	ldr	r1, [pc, #104]	; (8000754 <DMA2_Stream3_IRQHandler+0x84>)
 80006ec:	f003 ff5a 	bl	80045a4 <DMA_ClearITPendingBit>
	
	while (SPI_I2S_GetFlagStatus (SPIx, SPI_I2S_FLAG_BSY) == SET);
 80006f0:	bf00      	nop
 80006f2:	4819      	ldr	r0, [pc, #100]	; (8000758 <DMA2_Stream3_IRQHandler+0x88>)
 80006f4:	2180      	movs	r1, #128	; 0x80
 80006f6:	f004 fd8f 	bl	8005218 <SPI_I2S_GetFlagStatus>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d0f8      	beq.n	80006f2 <DMA2_Stream3_IRQHandler+0x22>
     * Now we can deselect the display. If more than one peripheral was being run
     * on this SPI peripheral, we would have to do both/all of them, or work out
     * which one was active and deselect that one.i
	
     */
	CSOFF();
 8000700:	4b16      	ldr	r3, [pc, #88]	; (800075c <DMA2_Stream3_IRQHandler+0x8c>)
 8000702:	4a16      	ldr	r2, [pc, #88]	; (800075c <DMA2_Stream3_IRQHandler+0x8c>)
 8000704:	8b12      	ldrh	r2, [r2, #24]
 8000706:	b292      	uxth	r2, r2
 8000708:	f042 0210 	orr.w	r2, r2, #16
 800070c:	b292      	uxth	r2, r2
 800070e:	831a      	strh	r2, [r3, #24]
	DMA_Cmd(SPIx_TX_DMA_STREAM, DISABLE);		
 8000710:	480f      	ldr	r0, [pc, #60]	; (8000750 <DMA2_Stream3_IRQHandler+0x80>)
 8000712:	2100      	movs	r1, #0
 8000714:	f003 fb56 	bl	8003dc4 <DMA_Cmd>
	DMA_Cmd(SPIx_RX_DMA_STREAM, DISABLE);		
 8000718:	4811      	ldr	r0, [pc, #68]	; (8000760 <DMA2_Stream3_IRQHandler+0x90>)
 800071a:	2100      	movs	r1, #0
 800071c:	f003 fb52 	bl	8003dc4 <DMA_Cmd>
       
	taskENTER_CRITICAL(); 
 8000720:	f002 f8f2 	bl	8002908 <vPortEnterCritical>
//	 xSemaphoreGive( xSemaphoreDMASPI );
	xSemaphoreGiveFromISR( xSemaphoreDMASPI, &xHigherPriorityTaskWoken );
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <DMA2_Stream3_IRQHandler+0x94>)
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	4610      	mov	r0, r2
 800072c:	2100      	movs	r1, #0
 800072e:	461a      	mov	r2, r3
 8000730:	2300      	movs	r3, #0
 8000732:	f001 fcfb 	bl	800212c <xQueueGenericSendFromISR>
 	taskEXIT_CRITICAL();  
 8000736:	f002 f8f7 	bl	8002928 <vPortExitCritical>
 }
   portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d003      	beq.n	8000748 <DMA2_Stream3_IRQHandler+0x78>
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <DMA2_Stream3_IRQHandler+0x98>)
 8000742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000746:	601a      	str	r2, [r3, #0]
}
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40026458 	.word	0x40026458
 8000754:	18008000 	.word	0x18008000
 8000758:	40013000 	.word	0x40013000
 800075c:	40020000 	.word	0x40020000
 8000760:	40026440 	.word	0x40026440
 8000764:	200131e0 	.word	0x200131e0
 8000768:	e000ed04 	.word	0xe000ed04

0800076c <init_USARTx>:
#define pdFalse 0
#define pdTrue 	1


void init_USARTx(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b096      	sub	sp, #88	; 0x58
 8000770:	af00      	add	r7, sp, #0
	
	/* enable APB2 peripheral clock for USART1 
	 * note that only USART1 and USART6 are connected to APB2
	 * the other USARTs are connected to APB1
	 */
	RCC_APB2PeriphClockCmd(USARTx_CLK, ENABLE);
 8000772:	2020      	movs	r0, #32
 8000774:	2101      	movs	r1, #1
 8000776:	f004 fb85 	bl	8004e84 <RCC_APB2PeriphClockCmd>
	
	/* enable the peripheral clock for the pins used by 
	 * USART1, PB6 for TX and PB7 for RX 
	 */
	RCC_AHB1PeriphClockCmd(USARTx_TX_GPIO_CLK, ENABLE);
 800077a:	2004      	movs	r0, #4
 800077c:	2101      	movs	r1, #1
 800077e:	f004 fb49 	bl	8004e14 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(USARTx_RX_GPIO_CLK, ENABLE);
 8000782:	2004      	movs	r0, #4
 8000784:	2101      	movs	r1, #1
 8000786:	f004 fb45 	bl	8004e14 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(USARTx_CS_GPIO_CLK, ENABLE);
 800078a:	2040      	movs	r0, #64	; 0x40
 800078c:	2101      	movs	r1, #1
 800078e:	f004 fb41 	bl	8004e14 <RCC_AHB1PeriphClockCmd>

	
	/* This sequence sets up the TX and RX pins 
	 * so they work correctly with the USART1 peripheral
	 */
	GPIO_InitStruct.GPIO_Pin = USARTx_RX_GPIO_PIN | USARTx_TX_GPIO_PIN; // Pins 6 (TX) and 7 (RX) are used
 8000792:	23c0      	movs	r3, #192	; 0xc0
 8000794:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF; 			// the pins are configured as alternate function so the USART peripheral has access to them
 8000796:	2302      	movs	r3, #2
 8000798:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;		// this defines the IO speed and has nothing to do with the baudrate!
 800079c:	2303      	movs	r3, #3
 800079e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;			// this defines the output type as push pull mode (as opposed to open drain)
 80007a2:	2300      	movs	r3, #0
 80007a4:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;			// this activates the pullup resistors on the IO pins
 80007a8:	2301      	movs	r3, #1
 80007aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);					// now all the values are passed to the GPIO_Init() function which sets the GPIO registers
 80007ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007b2:	4876      	ldr	r0, [pc, #472]	; (800098c <init_USARTx+0x220>)
 80007b4:	4619      	mov	r1, r3
 80007b6:	f004 f845 	bl	8004844 <GPIO_Init>
	
	
	
	/* Configure the chip select pin in this case we will use PG8 */
	GPIO_InitStruct.GPIO_Pin = USARTx_CS_GPIO_PIN;
 80007ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007be:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 80007c0:	2301      	movs	r3, #1
 80007c2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80007c6:	2300      	movs	r3, #0
 80007c8:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80007cc:	2303      	movs	r3, #3
 80007ce:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	GPIO_Init(USARTx_CS_GPIO_PORT, &GPIO_InitStruct);
 80007d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007dc:	486c      	ldr	r0, [pc, #432]	; (8000990 <init_USARTx+0x224>)
 80007de:	4619      	mov	r1, r3
 80007e0:	f004 f830 	bl	8004844 <GPIO_Init>

	DD() // set PG8 high
 80007e4:	4b6a      	ldr	r3, [pc, #424]	; (8000990 <init_USARTx+0x224>)
 80007e6:	4a6a      	ldr	r2, [pc, #424]	; (8000990 <init_USARTx+0x224>)
 80007e8:	8b12      	ldrh	r2, [r2, #24]
 80007ea:	b292      	uxth	r2, r2
 80007ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007f0:	b292      	uxth	r2, r2
 80007f2:	831a      	strh	r2, [r3, #24]
	
	/* The RX and TX pins are now connected to their AF
	 * so that the USART1 can take over control of the 
	 * pins
	 */
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_USART6); //
 80007f4:	4865      	ldr	r0, [pc, #404]	; (800098c <init_USARTx+0x220>)
 80007f6:	2106      	movs	r1, #6
 80007f8:	2208      	movs	r2, #8
 80007fa:	f004 f939 	bl	8004a70 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_USART6);
 80007fe:	4863      	ldr	r0, [pc, #396]	; (800098c <init_USARTx+0x220>)
 8000800:	2107      	movs	r1, #7
 8000802:	2208      	movs	r2, #8
 8000804:	f004 f934 	bl	8004a70 <GPIO_PinAFConfig>
	
	/* Now the USART_InitStruct is used to define the 
	 * properties of USART1 
	 */
	USART_InitStruct.USART_BaudRate = 38400;				// the baudrate is set to the value we passed into this init function
 8000808:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 800080c:	643b      	str	r3, [r7, #64]	; 0x40
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 800080e:	2300      	movs	r3, #0
 8000810:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	USART_InitStruct.USART_StopBits = USART_StopBits_1;		// we want 1 stop bit (standard)
 8000814:	2300      	movs	r3, #0
 8000816:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	USART_InitStruct.USART_Parity = USART_Parity_No;		// we don't want a parity bit (standard)
 800081a:	2300      	movs	r3, #0
 800081c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 8000820:	2300      	movs	r3, #0
 8000822:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000826:	230c      	movs	r3, #12
 8000828:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	USART_Init(USART6, &USART_InitStruct);					// again all the properties are passed to the USART_Init function which takes care of all the bit setting
 800082c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000830:	4858      	ldr	r0, [pc, #352]	; (8000994 <init_USARTx+0x228>)
 8000832:	4619      	mov	r1, r3
 8000834:	f004 fe1a 	bl	800546c <USART_Init>
	/* Here the USART1 receive interrupt is enabled
	 * and the interrupt controller is configured 
	 * to jump to the USART1_IRQHandler() function
	 * if the USART1 receive interrupt occurs
	 */
	USART_ITConfig(USARTx, USART_IT_RXNE, ENABLE); // enable the USART1 receive interrupt 
 8000838:	4856      	ldr	r0, [pc, #344]	; (8000994 <init_USARTx+0x228>)
 800083a:	f240 5125 	movw	r1, #1317	; 0x525
 800083e:	2201      	movs	r2, #1
 8000840:	f005 f834 	bl	80058ac <USART_ITConfig>
	
	NVIC_InitStruct.NVIC_IRQChannel = USART6_IRQn;		 // we want to configure the USART interrupts
 8000844:	2347      	movs	r3, #71	; 0x47
 8000846:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1;;// this sets the priority group of the USART1 interrupts
 800084a:	2306      	movs	r3, #6
 800084c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x1;		 // this sets the subpriority inside the group
 8000850:	2301      	movs	r3, #1
 8000852:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;			 // the USART1 interrupts are globally enabled
 8000856:	2301      	movs	r3, #1
 8000858:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	NVIC_Init(&NVIC_InitStruct);	 // the properties are passed to the NVIC_Init function which takes care of the low level stuff	
 800085c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000860:	4618      	mov	r0, r3
 8000862:	f002 fef7 	bl	8003654 <NVIC_Init>

	// finally this enables the complete USART1 peripheral
	USART_Cmd(USART6, ENABLE);
 8000866:	484b      	ldr	r0, [pc, #300]	; (8000994 <init_USARTx+0x228>)
 8000868:	2101      	movs	r1, #1
 800086a:	f004 ff65 	bl	8005738 <USART_Cmd>

		/* setup DMA */

	// enable clock 
	RCC_AHB1PeriphClockCmd (USARTx_DMA_CLK, ENABLE); 
 800086e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000872:	2101      	movs	r1, #1
 8000874:	f004 face 	bl	8004e14 <RCC_AHB1PeriphClockCmd>
	
	// start with blank DMA configuration
	DMA_DeInit (USARTx_TX_DMA_STREAM);
 8000878:	4847      	ldr	r0, [pc, #284]	; (8000998 <init_USARTx+0x22c>)
 800087a:	f002 ff93 	bl	80037a4 <DMA_DeInit>
	DMA_DeInit (USARTx_RX_DMA_STREAM);
 800087e:	4847      	ldr	r0, [pc, #284]	; (800099c <init_USARTx+0x230>)
 8000880:	f002 ff90 	bl	80037a4 <DMA_DeInit>

	// check if DMA stream is disabled before enabling 
	// this is useful when stream is enabled and disabled multiple times. 
	while (DMA_GetCmdStatus (USARTx_TX_DMA_STREAM) != DISABLE);
 8000884:	bf00      	nop
 8000886:	4844      	ldr	r0, [pc, #272]	; (8000998 <init_USARTx+0x22c>)
 8000888:	f003 fb9c 	bl	8003fc4 <DMA_GetCmdStatus>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d1f9      	bne.n	8000886 <init_USARTx+0x11a>
	while (DMA_GetCmdStatus (USARTx_RX_DMA_STREAM) != DISABLE);
 8000892:	bf00      	nop
 8000894:	4841      	ldr	r0, [pc, #260]	; (800099c <init_USARTx+0x230>)
 8000896:	f003 fb95 	bl	8003fc4 <DMA_GetCmdStatus>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d1f9      	bne.n	8000894 <init_USARTx+0x128>
	
	
	DMA_StructInit(&DMA_InitStruct);
 80008a0:	463b      	mov	r3, r7
 80008a2:	4618      	mov	r0, r3
 80008a4:	f003 fa58 	bl	8003d58 <DMA_StructInit>
  	//Configure DMA Initialization Structure
	//DMA_InitStruct.DMA_FIFOMode = DMA_FIFOMode_Disable ;
 	//DMA_InitStruct.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull ;
  	//DMA_InitStruct.DMA_MemoryBurst = DMA_MemoryBurst_Single ;
  	DMA_InitStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80008a8:	2300      	movs	r3, #0
 80008aa:	623b      	str	r3, [r7, #32]
  	DMA_InitStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80008ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b0:	61bb      	str	r3, [r7, #24]
  	DMA_InitStruct.DMA_Mode = DMA_Mode_Normal;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  	DMA_InitStruct.DMA_PeripheralBaseAddr =(uint32_t) (&(USARTx->DR)) ;
 80008b6:	4b3a      	ldr	r3, [pc, #232]	; (80009a0 <init_USARTx+0x234>)
 80008b8:	607b      	str	r3, [r7, #4]
  	DMA_InitStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80008ba:	2300      	movs	r3, #0
 80008bc:	63bb      	str	r3, [r7, #56]	; 0x38
  	DMA_InitStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  	DMA_InitStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
  	DMA_InitStruct.DMA_Priority = DMA_Priority_High;
 80008c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  	// Configure TX DMA 
  	DMA_InitStruct.DMA_Channel = USARTx_TX_DMA_CHANNEL ;
 80008cc:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 80008d0:	603b      	str	r3, [r7, #0]
  	DMA_InitStruct.DMA_DIR = DMA_DIR_MemoryToPeripheral ;
 80008d2:	2340      	movs	r3, #64	; 0x40
 80008d4:	60fb      	str	r3, [r7, #12]
  	DMA_InitStruct.DMA_Memory0BaseAddr = (uint32_t) &bufferTX ;
 80008d6:	4b33      	ldr	r3, [pc, #204]	; (80009a4 <init_USARTx+0x238>)
 80008d8:	60bb      	str	r3, [r7, #8]
	DMA_InitStruct.DMA_BufferSize = MAX_BUFFER_LENGTH;
 80008da:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80008de:	613b      	str	r3, [r7, #16]
  	DMA_Init(USARTx_TX_DMA_STREAM, &DMA_InitStruct);
 80008e0:	463b      	mov	r3, r7
 80008e2:	482d      	ldr	r0, [pc, #180]	; (8000998 <init_USARTx+0x22c>)
 80008e4:	4619      	mov	r1, r3
 80008e6:	f003 f873 	bl	80039d0 <DMA_Init>
	// Configure RX DMA 
  	DMA_InitStruct.DMA_Channel = USARTx_RX_DMA_CHANNEL ;
 80008ea:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 80008ee:	603b      	str	r3, [r7, #0]
	DMA_InitStruct.DMA_DIR = DMA_DIR_PeripheralToMemory ;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
	DMA_InitStruct.DMA_Memory0BaseAddr = (uint32_t)&bufferRX; 
 80008f4:	4b2c      	ldr	r3, [pc, #176]	; (80009a8 <init_USARTx+0x23c>)
 80008f6:	60bb      	str	r3, [r7, #8]
	DMA_InitStruct.DMA_BufferSize = MAX_BUFFER_LENGTH;
 80008f8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80008fc:	613b      	str	r3, [r7, #16]
	DMA_Init(USARTx_RX_DMA_STREAM, &DMA_InitStruct);	
 80008fe:	463b      	mov	r3, r7
 8000900:	4826      	ldr	r0, [pc, #152]	; (800099c <init_USARTx+0x230>)
 8000902:	4619      	mov	r1, r3
 8000904:	f003 f864 	bl	80039d0 <DMA_Init>
	
	DMA_ITConfig(USARTx_TX_DMA_STREAM, DMA_IT_TC, ENABLE); 
 8000908:	4823      	ldr	r0, [pc, #140]	; (8000998 <init_USARTx+0x22c>)
 800090a:	2110      	movs	r1, #16
 800090c:	2201      	movs	r2, #1
 800090e:	f003 fbd7 	bl	80040c0 <DMA_ITConfig>
	DMA_ITConfig(USARTx_RX_DMA_STREAM, DMA_IT_TC, ENABLE); 
 8000912:	4822      	ldr	r0, [pc, #136]	; (800099c <init_USARTx+0x230>)
 8000914:	2110      	movs	r1, #16
 8000916:	2201      	movs	r2, #1
 8000918:	f003 fbd2 	bl	80040c0 <DMA_ITConfig>
  
	USART_ClearFlag(USARTx, USART_FLAG_TXE);
 800091c:	481d      	ldr	r0, [pc, #116]	; (8000994 <init_USARTx+0x228>)
 800091e:	2180      	movs	r1, #128	; 0x80
 8000920:	f005 f882 	bl	8005a28 <USART_ClearFlag>
	USART_ClearFlag(USARTx, USART_FLAG_RXNE);
 8000924:	481b      	ldr	r0, [pc, #108]	; (8000994 <init_USARTx+0x228>)
 8000926:	2120      	movs	r1, #32
 8000928:	f005 f87e 	bl	8005a28 <USART_ClearFlag>
  	
	// enable the interrupt in the NVIC
 	NVIC_InitStruct.NVIC_IRQChannel = USARTx_TX_DMA_IRQn;
 800092c:	2345      	movs	r3, #69	; 0x45
 800092e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 2;
 8000932:	2307      	movs	r3, #7
 8000934:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x1;
 8000938:	2301      	movs	r3, #1
 800093a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 800093e:	2301      	movs	r3, #1
 8000940:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  	NVIC_Init (&NVIC_InitStruct);
 8000944:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000948:	4618      	mov	r0, r3
 800094a:	f002 fe83 	bl	8003654 <NVIC_Init>
	// enable the interrupt in the NVIC
 	NVIC_InitStruct.NVIC_IRQChannel = USARTx_RX_DMA_IRQn;
 800094e:	2339      	movs	r3, #57	; 0x39
 8000950:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
   	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 2;
 8000954:	2307      	movs	r3, #7
 8000956:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x1;
 800095a:	2301      	movs	r3, #1
 800095c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000960:	2301      	movs	r3, #1
 8000962:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  	NVIC_Init (&NVIC_InitStruct);
 8000966:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800096a:	4618      	mov	r0, r3
 800096c:	f002 fe72 	bl	8003654 <NVIC_Init>
  	// Enable dma tx and rx request
	USART_DMACmd (USARTx, USART_DMAReq_Tx, ENABLE);	
 8000970:	4808      	ldr	r0, [pc, #32]	; (8000994 <init_USARTx+0x228>)
 8000972:	2180      	movs	r1, #128	; 0x80
 8000974:	2201      	movs	r2, #1
 8000976:	f004 ff33 	bl	80057e0 <USART_DMACmd>
	USART_DMACmd (USARTx, USART_DMAReq_Rx, ENABLE);	
 800097a:	4806      	ldr	r0, [pc, #24]	; (8000994 <init_USARTx+0x228>)
 800097c:	2140      	movs	r1, #64	; 0x40
 800097e:	2201      	movs	r2, #1
 8000980:	f004 ff2e 	bl	80057e0 <USART_DMACmd>
	

}
 8000984:	3758      	adds	r7, #88	; 0x58
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40020800 	.word	0x40020800
 8000990:	40021800 	.word	0x40021800
 8000994:	40011400 	.word	0x40011400
 8000998:	400264a0 	.word	0x400264a0
 800099c:	40026428 	.word	0x40026428
 80009a0:	40011404 	.word	0x40011404
 80009a4:	200139cc 	.word	0x200139cc
 80009a8:	200131f4 	.word	0x200131f4

080009ac <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler()
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
	/*!	\var static unsigned portBASE_TYPE xHigherPriorityTaskWoken
	 * 	\brief Indicates if higher priority has been woken
	 */

	unsigned portBASE_TYPE xHigherPriorityTaskWoken = pdFalse;
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]

  // Test if DMA Stream Transfer Complete interrupt
  if (DMA_GetITStatus (USARTx_RX_DMA_STREAM, USARTx_RX_DMA_FLAG_TCIF)) {
 80009b6:	4817      	ldr	r0, [pc, #92]	; (8000a14 <DMA2_Stream1_IRQHandler+0x68>)
 80009b8:	4917      	ldr	r1, [pc, #92]	; (8000a18 <DMA2_Stream1_IRQHandler+0x6c>)
 80009ba:	f003 fc37 	bl	800422c <DMA_GetITStatus>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d01c      	beq.n	80009fe <DMA2_Stream1_IRQHandler+0x52>
    
	DMA_ClearITPendingBit (USARTx_RX_DMA_STREAM,  USARTx_RX_DMA_FLAG_TCIF);
 80009c4:	4813      	ldr	r0, [pc, #76]	; (8000a14 <DMA2_Stream1_IRQHandler+0x68>)
 80009c6:	4914      	ldr	r1, [pc, #80]	; (8000a18 <DMA2_Stream1_IRQHandler+0x6c>)
 80009c8:	f003 fdec 	bl	80045a4 <DMA_ClearITPendingBit>
	
	DE();
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <DMA2_Stream1_IRQHandler+0x70>)
 80009ce:	4a13      	ldr	r2, [pc, #76]	; (8000a1c <DMA2_Stream1_IRQHandler+0x70>)
 80009d0:	8b52      	ldrh	r2, [r2, #26]
 80009d2:	b292      	uxth	r2, r2
 80009d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80009d8:	b292      	uxth	r2, r2
 80009da:	835a      	strh	r2, [r3, #26]
//	DMA_Cmd(USARTx_TX_DMA_STREAM, DISABLE);		
	DMA_Cmd(USARTx_RX_DMA_STREAM, DISABLE);		
 80009dc:	480d      	ldr	r0, [pc, #52]	; (8000a14 <DMA2_Stream1_IRQHandler+0x68>)
 80009de:	2100      	movs	r1, #0
 80009e0:	f003 f9f0 	bl	8003dc4 <DMA_Cmd>
 
	taskENTER_CRITICAL(); 
 80009e4:	f001 ff90 	bl	8002908 <vPortEnterCritical>
	xSemaphoreGiveFromISR( xSemaphoreDMASPI, &xHigherPriorityTaskWoken );
 80009e8:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <DMA2_Stream1_IRQHandler+0x74>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	4610      	mov	r0, r2
 80009f0:	2100      	movs	r1, #0
 80009f2:	461a      	mov	r2, r3
 80009f4:	2300      	movs	r3, #0
 80009f6:	f001 fb99 	bl	800212c <xQueueGenericSendFromISR>
	taskEXIT_CRITICAL(); //
 80009fa:	f001 ff95 	bl	8002928 <vPortExitCritical>
  }	
 portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d003      	beq.n	8000a0c <DMA2_Stream1_IRQHandler+0x60>
 8000a04:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <DMA2_Stream1_IRQHandler+0x78>)
 8000a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a0a:	601a      	str	r2, [r3, #0]
}
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40026428 	.word	0x40026428
 8000a18:	10008800 	.word	0x10008800
 8000a1c:	40021800 	.word	0x40021800
 8000a20:	200131e0 	.word	0x200131e0
 8000a24:	e000ed04 	.word	0xe000ed04

08000a28 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler()
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
	/*!	\var static unsigned portBASE_TYPE xHigherPriorityTaskWoken
	 * 	\brief Indicates if higher priority has been woken
	 */

	unsigned portBASE_TYPE xHigherPriorityTaskWoken = pdFalse;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]

  // Test if DMA Stream Transfer Complete interrupt
  if (DMA_GetITStatus (USARTx_TX_DMA_STREAM,  USARTx_TX_DMA_FLAG_TCIF)) {
 8000a32:	4817      	ldr	r0, [pc, #92]	; (8000a90 <DMA2_Stream6_IRQHandler+0x68>)
 8000a34:	4917      	ldr	r1, [pc, #92]	; (8000a94 <DMA2_Stream6_IRQHandler+0x6c>)
 8000a36:	f003 fbf9 	bl	800422c <DMA_GetITStatus>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d01c      	beq.n	8000a7a <DMA2_Stream6_IRQHandler+0x52>
    
	DMA_ClearITPendingBit (USARTx_TX_DMA_STREAM, USARTx_TX_DMA_FLAG_TCIF);
 8000a40:	4813      	ldr	r0, [pc, #76]	; (8000a90 <DMA2_Stream6_IRQHandler+0x68>)
 8000a42:	4914      	ldr	r1, [pc, #80]	; (8000a94 <DMA2_Stream6_IRQHandler+0x6c>)
 8000a44:	f003 fdae 	bl	80045a4 <DMA_ClearITPendingBit>
	
	DE();
 8000a48:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <DMA2_Stream6_IRQHandler+0x70>)
 8000a4a:	4a13      	ldr	r2, [pc, #76]	; (8000a98 <DMA2_Stream6_IRQHandler+0x70>)
 8000a4c:	8b52      	ldrh	r2, [r2, #26]
 8000a4e:	b292      	uxth	r2, r2
 8000a50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a54:	b292      	uxth	r2, r2
 8000a56:	835a      	strh	r2, [r3, #26]
	DMA_Cmd(USARTx_TX_DMA_STREAM, DISABLE);		
 8000a58:	480d      	ldr	r0, [pc, #52]	; (8000a90 <DMA2_Stream6_IRQHandler+0x68>)
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	f003 f9b2 	bl	8003dc4 <DMA_Cmd>
//	DMA_Cmd(USARTx_RX_DMA_STREAM, DISABLE);		
       
	taskENTER_CRITICAL(); 
 8000a60:	f001 ff52 	bl	8002908 <vPortEnterCritical>
	xSemaphoreGiveFromISR( xSemaphoreDMASPI, &xHigherPriorityTaskWoken );
 8000a64:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <DMA2_Stream6_IRQHandler+0x74>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	461a      	mov	r2, r3
 8000a70:	2300      	movs	r3, #0
 8000a72:	f001 fb5b 	bl	800212c <xQueueGenericSendFromISR>
 	taskEXIT_CRITICAL();  
 8000a76:	f001 ff57 	bl	8002928 <vPortExitCritical>
 }
   portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d003      	beq.n	8000a88 <DMA2_Stream6_IRQHandler+0x60>
 8000a80:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <DMA2_Stream6_IRQHandler+0x78>)
 8000a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a86:	601a      	str	r2, [r3, #0]
}
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	400264a0 	.word	0x400264a0
 8000a94:	20208000 	.word	0x20208000
 8000a98:	40021800 	.word	0x40021800
 8000a9c:	200131e0 	.word	0x200131e0
 8000aa0:	e000ed04 	.word	0xe000ed04

08000aa4 <usart_dma_send>:


void usart_dma_send(uint16_t data_len, uint8_t *data_buf)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	6039      	str	r1, [r7, #0]
 8000aae:	80fb      	strh	r3, [r7, #6]
	
		DMA_SetCurrDataCounter(USARTx_TX_DMA_STREAM, data_len);
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	4811      	ldr	r0, [pc, #68]	; (8000af8 <usart_dma_send+0x54>)
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f003 fa11 	bl	8003edc <DMA_SetCurrDataCounter>
		USARTx_TX_DMA_STREAM->M0AR =(uint32_t)data_buf;	
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <usart_dma_send+0x54>)
 8000abc:	683a      	ldr	r2, [r7, #0]
 8000abe:	60da      	str	r2, [r3, #12]
		DD(); // chip select 
 8000ac0:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <usart_dma_send+0x58>)
 8000ac2:	4a0e      	ldr	r2, [pc, #56]	; (8000afc <usart_dma_send+0x58>)
 8000ac4:	8b12      	ldrh	r2, [r2, #24]
 8000ac6:	b292      	uxth	r2, r2
 8000ac8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000acc:	b292      	uxth	r2, r2
 8000ace:	831a      	strh	r2, [r3, #24]
		DMA_Cmd(USARTx_TX_DMA_STREAM, ENABLE);		
 8000ad0:	4809      	ldr	r0, [pc, #36]	; (8000af8 <usart_dma_send+0x54>)
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	f003 f976 	bl	8003dc4 <DMA_Cmd>
		DMA_Cmd(USARTx_RX_DMA_STREAM, ENABLE);	
 8000ad8:	4809      	ldr	r0, [pc, #36]	; (8000b00 <usart_dma_send+0x5c>)
 8000ada:	2101      	movs	r1, #1
 8000adc:	f003 f972 	bl	8003dc4 <DMA_Cmd>
		/* Block until the semaphore is given */
        	xSemaphoreTake(xSemaphoreDMASPI, 100/portTICK_RATE_MS);
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <usart_dma_send+0x60>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	2264      	movs	r2, #100	; 0x64
 8000aea:	2300      	movs	r3, #0
 8000aec:	f001 fb88 	bl	8002200 <xQueueGenericReceive>

	//	CSOFF(); // chip deselect 
			
	
}
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	400264a0 	.word	0x400264a0
 8000afc:	40021800 	.word	0x40021800
 8000b00:	40026428 	.word	0x40026428
 8000b04:	200131e0 	.word	0x200131e0

08000b08 <usart_send>:

int usart_send( uint8_t *buffer,  uint16_t len)
{
 8000b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b0c:	b088      	sub	sp, #32
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
 8000b12:	8079      	strh	r1, [r7, #2]
 8000b14:	4669      	mov	r1, sp
 8000b16:	4688      	mov	r8, r1
	/* notify that you'll send some data */
	uint8_t buf[10 + 4 + len];
 8000b18:	8879      	ldrh	r1, [r7, #2]
 8000b1a:	f101 060e 	add.w	r6, r1, #14
 8000b1e:	1e71      	subs	r1, r6, #1
 8000b20:	61b9      	str	r1, [r7, #24]
 8000b22:	4631      	mov	r1, r6
 8000b24:	4608      	mov	r0, r1
 8000b26:	f04f 0100 	mov.w	r1, #0
 8000b2a:	00cd      	lsls	r5, r1, #3
 8000b2c:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
 8000b30:	00c4      	lsls	r4, r0, #3
 8000b32:	4631      	mov	r1, r6
 8000b34:	4608      	mov	r0, r1
 8000b36:	f04f 0100 	mov.w	r1, #0
 8000b3a:	00cb      	lsls	r3, r1, #3
 8000b3c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b40:	00c2      	lsls	r2, r0, #3
 8000b42:	4633      	mov	r3, r6
 8000b44:	3307      	adds	r3, #7
 8000b46:	08db      	lsrs	r3, r3, #3
 8000b48:	00db      	lsls	r3, r3, #3
 8000b4a:	ebad 0d03 	sub.w	sp, sp, r3
 8000b4e:	466b      	mov	r3, sp
 8000b50:	3300      	adds	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
	int i;
	uint16_t nmsg = (len + 4)/10;
 8000b54:	887b      	ldrh	r3, [r7, #2]
 8000b56:	3304      	adds	r3, #4
 8000b58:	4a5b      	ldr	r2, [pc, #364]	; (8000cc8 <usart_send+0x1c0>)
 8000b5a:	fb82 1203 	smull	r1, r2, r2, r3
 8000b5e:	1092      	asrs	r2, r2, #2
 8000b60:	17db      	asrs	r3, r3, #31
 8000b62:	1ad3      	subs	r3, r2, r3
 8000b64:	827b      	strh	r3, [r7, #18]
	nmsg += ((len + 4) % 10) ? 1 : 0; 
 8000b66:	887b      	ldrh	r3, [r7, #2]
 8000b68:	1d19      	adds	r1, r3, #4
 8000b6a:	4b57      	ldr	r3, [pc, #348]	; (8000cc8 <usart_send+0x1c0>)
 8000b6c:	fb83 2301 	smull	r2, r3, r3, r1
 8000b70:	109a      	asrs	r2, r3, #2
 8000b72:	17cb      	asrs	r3, r1, #31
 8000b74:	1ad2      	subs	r2, r2, r3
 8000b76:	4613      	mov	r3, r2
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	4413      	add	r3, r2
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	1aca      	subs	r2, r1, r3
 8000b80:	2a00      	cmp	r2, #0
 8000b82:	bf0c      	ite	eq
 8000b84:	2300      	moveq	r3, #0
 8000b86:	2301      	movne	r3, #1
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	8a7b      	ldrh	r3, [r7, #18]
 8000b8e:	4413      	add	r3, r2
 8000b90:	827b      	strh	r3, [r7, #18]
	buf[0] = 0x2;//len ? 0x2 : 0x0; 	// command 
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	2202      	movs	r2, #2
 8000b96:	701a      	strb	r2, [r3, #0]
	buf[1] = (len & 0xff) >> 8;
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	705a      	strb	r2, [r3, #1]
	buf[2] = (len & 0x00ff); 		
 8000b9e:	887b      	ldrh	r3, [r7, #2]
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	709a      	strb	r2, [r3, #2]
	buf[3] = 0xff;		 // offset 
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	22ff      	movs	r2, #255	; 0xff
 8000baa:	70da      	strb	r2, [r3, #3]
	buf[4] = 0xff;		 // offset 
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	22ff      	movs	r2, #255	; 0xff
 8000bb0:	711a      	strb	r2, [r3, #4]
	buf[5] = nmsg;
 8000bb2:	8a7b      	ldrh	r3, [r7, #18]
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	715a      	strb	r2, [r3, #5]
	/* crc calation*/ 
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_CRC, ENABLE);
 8000bba:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	f004 f928 	bl	8004e14 <RCC_AHB1PeriphClockCmd>
	CRC_ResetDR();
 8000bc4:	f002 fdc0 	bl	8003748 <CRC_ResetDR>
	uint32_t crc = CRC_CalcBlockCRC((uint32_t)buf, 6);
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	2106      	movs	r1, #6
 8000bce:	f002 fdc7 	bl	8003760 <CRC_CalcBlockCRC>
 8000bd2:	60f8      	str	r0, [r7, #12]
	buf[6] = crc >> 24;
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	0e1b      	lsrs	r3, r3, #24
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	719a      	strb	r2, [r3, #6]
	buf[7] = crc >> 16;
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	0c1b      	lsrs	r3, r3, #16
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	71da      	strb	r2, [r3, #7]
	buf[8] = crc >> 8;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	0a1b      	lsrs	r3, r3, #8
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	721a      	strb	r2, [r3, #8]
	buf[9] = crc ;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	725a      	strb	r2, [r3, #9]
	if (!len) 
 8000bfa:	887b      	ldrh	r3, [r7, #2]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d106      	bne.n	8000c0e <usart_send+0x106>
	{	
		usart_dma_send(10, buf);
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	200a      	movs	r0, #10
 8000c04:	4619      	mov	r1, r3
 8000c06:	f7ff ff4d 	bl	8000aa4 <usart_dma_send>
		return 0; 
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e056      	b.n	8000cbc <usart_send+0x1b4>
	}
	CRC_ResetDR();
 8000c0e:	f002 fd9b 	bl	8003748 <CRC_ResetDR>
	crc = CRC_CalcBlockCRC((uint32_t)buffer, len);
 8000c12:	887b      	ldrh	r3, [r7, #2]
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	4619      	mov	r1, r3
 8000c18:	f002 fda2 	bl	8003760 <CRC_CalcBlockCRC>
 8000c1c:	60f8      	str	r0, [r7, #12]
	for (i = 0; i < len; i++  ) buf[i+10] = buffer[i];
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
 8000c22:	e00a      	b.n	8000c3a <usart_send+0x132>
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	330a      	adds	r3, #10
 8000c28:	69fa      	ldr	r2, [r7, #28]
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	440a      	add	r2, r1
 8000c2e:	7811      	ldrb	r1, [r2, #0]
 8000c30:	697a      	ldr	r2, [r7, #20]
 8000c32:	54d1      	strb	r1, [r2, r3]
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	3301      	adds	r3, #1
 8000c38:	61fb      	str	r3, [r7, #28]
 8000c3a:	887a      	ldrh	r2, [r7, #2]
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	dcf0      	bgt.n	8000c24 <usart_send+0x11c>
	
	buf[nmsg*10  + 10 - 4 ] = crc >> 24;
 8000c42:	8a7b      	ldrh	r3, [r7, #18]
 8000c44:	1c5a      	adds	r2, r3, #1
 8000c46:	4613      	mov	r3, r2
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	4413      	add	r3, r2
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	3b04      	subs	r3, #4
 8000c50:	68fa      	ldr	r2, [r7, #12]
 8000c52:	0e12      	lsrs	r2, r2, #24
 8000c54:	b2d1      	uxtb	r1, r2
 8000c56:	697a      	ldr	r2, [r7, #20]
 8000c58:	54d1      	strb	r1, [r2, r3]
	buf[nmsg*10  + 10 - 3] = crc >> 16;
 8000c5a:	8a7b      	ldrh	r3, [r7, #18]
 8000c5c:	1c5a      	adds	r2, r3, #1
 8000c5e:	4613      	mov	r3, r2
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	4413      	add	r3, r2
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	3b03      	subs	r3, #3
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	0c12      	lsrs	r2, r2, #16
 8000c6c:	b2d1      	uxtb	r1, r2
 8000c6e:	697a      	ldr	r2, [r7, #20]
 8000c70:	54d1      	strb	r1, [r2, r3]
	buf[nmsg*10  + 10 - 2] = crc >> 8;
 8000c72:	8a7b      	ldrh	r3, [r7, #18]
 8000c74:	1c5a      	adds	r2, r3, #1
 8000c76:	4613      	mov	r3, r2
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	4413      	add	r3, r2
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	3b02      	subs	r3, #2
 8000c80:	68fa      	ldr	r2, [r7, #12]
 8000c82:	0a12      	lsrs	r2, r2, #8
 8000c84:	b2d1      	uxtb	r1, r2
 8000c86:	697a      	ldr	r2, [r7, #20]
 8000c88:	54d1      	strb	r1, [r2, r3]
	buf[nmsg*10  + 10 - 1] = crc;
 8000c8a:	8a7b      	ldrh	r3, [r7, #18]
 8000c8c:	1c5a      	adds	r2, r3, #1
 8000c8e:	4613      	mov	r3, r2
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	4413      	add	r3, r2
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	3b01      	subs	r3, #1
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	b2d1      	uxtb	r1, r2
 8000c9c:	697a      	ldr	r2, [r7, #20]
 8000c9e:	54d1      	strb	r1, [r2, r3]

	usart_dma_send(nmsg*10 + 10, buf);	
 8000ca0:	8a7b      	ldrh	r3, [r7, #18]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	0092      	lsls	r2, r2, #2
 8000caa:	4413      	add	r3, r2
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	4610      	mov	r0, r2
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f7ff fef5 	bl	8000aa4 <usart_dma_send>

	return 0; 
 8000cba:	2300      	movs	r3, #0
 8000cbc:	46c5      	mov	sp, r8

	
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3720      	adds	r7, #32
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000cc8:	66666667 	.word	0x66666667

08000ccc <NVIC_SetPendingIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the interrupt for set pending
 */
static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <NVIC_SetPendingIRQ+0x30>)
 8000cd8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000cdc:	0952      	lsrs	r2, r2, #5
 8000cde:	79f9      	ldrb	r1, [r7, #7]
 8000ce0:	f001 011f 	and.w	r1, r1, #31
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	fa00 f101 	lsl.w	r1, r0, r1
 8000cea:	3240      	adds	r2, #64	; 0x40
 8000cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000e100 	.word	0xe000e100

08000d00 <CoreSight_configure>:

#ifdef DEBUG
#define SWO_BAUD_RATE 230400

void CoreSight_configure(uint32_t SystemCoreClock)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

  uint32_t SWOPrescaler;

  SWOPrescaler = (SystemCoreClock / SWO_BAUD_RATE ) - 1;
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <CoreSight_configure+0x60>)
 8000d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8000d10:	0c5b      	lsrs	r3, r3, #17
 8000d12:	3b01      	subs	r3, #1
 8000d14:	60fb      	str	r3, [r7, #12]

  CoreDebug->DEMCR = 1 << CoreDebug_DEMCR_TRCENA_Pos; /* Enable trace */
 8000d16:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <CoreSight_configure+0x64>)
 8000d18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d1c:	60da      	str	r2, [r3, #12]
  *((volatile unsigned *) 0xE0042004) = 0x00000020;   /* DBGMCU_CR */
 8000d1e:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <CoreSight_configure+0x68>)
 8000d20:	2220      	movs	r2, #32
 8000d22:	601a      	str	r2, [r3, #0]
  
  
  *((volatile unsigned *) 0xE0040004) = 0x00000001; /* port size -> 1 bit */
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <CoreSight_configure+0x6c>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	601a      	str	r2, [r3, #0]

  /* Set TPIU register->Selected pinprotocol = 10b: Serial Wire Output - NRZ */
  *((volatile unsigned *) 0xE00400F0) = 0x00000002; /* "Selected PIN Protocol Register": Select which protocol to use for trace output (2: SWO)*/
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <CoreSight_configure+0x70>)
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	601a      	str	r2, [r3, #0]

  /* Set TPIU -> Async Clock Prescaler Register [bits 0-12] */
  *((volatile unsigned *) 0xE0040010) = SWOPrescaler; /* "Async Clock Prescaler Register". Scale the baud rate of the asynchronous output */
 8000d30:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <CoreSight_configure+0x74>)
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	601a      	str	r2, [r3, #0]

  *((volatile unsigned *) 0xE0040304) = 0x00000100; /* Formatter and Flush Control Register */
 8000d36:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <CoreSight_configure+0x78>)
 8000d38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d3c:	601a      	str	r2, [r3, #0]

  /* ITM Lock Access Register */
  *((volatile unsigned *) 0xE0000FB0) = 0xC5ACCE55; /* ITM Lock Access Register, C5ACCE55 enables more */
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <CoreSight_configure+0x7c>)
 8000d40:	4a0f      	ldr	r2, [pc, #60]	; (8000d80 <CoreSight_configure+0x80>)
 8000d42:	601a      	str	r2, [r3, #0]
                                                    /* write access to Control Register 0xE00 :: 0xFFC */
  *((volatile unsigned *) 0xE0000E80) = 0x00010005; /* ITM Trace Control Register */
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <CoreSight_configure+0x84>)
 8000d46:	4a10      	ldr	r2, [pc, #64]	; (8000d88 <CoreSight_configure+0x88>)
 8000d48:	601a      	str	r2, [r3, #0]
  *((volatile unsigned *) 0xE0000E00) = 0x00000001; /* ITM Trace Enable Register. Enabled tracing on stimulus */
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <CoreSight_configure+0x8c>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	601a      	str	r2, [r3, #0]
                                                    /* ports. One bit per stimulus port. */
  *((volatile unsigned *) 0xE0000E40) = 0x00000001; /* ITM Trace Privilege Register */
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <CoreSight_configure+0x90>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	601a      	str	r2, [r3, #0]

  /*  *((volatile unsigned *) 0xE0001000) = 0x400003FE; */ /* DWT_CTRL */

  //  *(volatile unsigned int *)0xE0001000 |= 0x00000001 ;  /* Enable cycle counter*/
  // *(volatile unsigned int *)0xE0001004 = 0;             /* Reset counter */
}
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	91a2b3c5 	.word	0x91a2b3c5
 8000d64:	e000edf0 	.word	0xe000edf0
 8000d68:	e0042004 	.word	0xe0042004
 8000d6c:	e0040004 	.word	0xe0040004
 8000d70:	e00400f0 	.word	0xe00400f0
 8000d74:	e0040010 	.word	0xe0040010
 8000d78:	e0040304 	.word	0xe0040304
 8000d7c:	e0000fb0 	.word	0xe0000fb0
 8000d80:	c5acce55 	.word	0xc5acce55
 8000d84:	e0000e80 	.word	0xe0000e80
 8000d88:	00010005 	.word	0x00010005
 8000d8c:	e0000e00 	.word	0xe0000e00
 8000d90:	e0000e40 	.word	0xe0000e40

08000d94 <main>:
#endif

/*-----------------------------------------------------------*/

int main(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af04      	add	r7, sp, #16

#ifdef DEBUG
	SystemCoreClockUpdate();
 8000d9a:	f000 f93d 	bl	8001018 <SystemCoreClockUpdate>

	CoreSight_configure(SystemCoreClock);
 8000d9e:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <main+0x78>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ffac 	bl	8000d00 <CoreSight_configure>
	
	/*<! Configure the hardware ready to run the test. */
	t_printf("Starting\n");
 8000da8:	4819      	ldr	r0, [pc, #100]	; (8000e10 <main+0x7c>)
 8000daa:	f002 f96f 	bl	800308c <t_printf>
#endif
	prvSetupHardware();
 8000dae:	f000 f85f 	bl	8000e70 <prvSetupHardware>

	xSemaphoreDMASPI = xSemaphoreCreateBinary();
 8000db2:	2001      	movs	r0, #1
 8000db4:	2100      	movs	r1, #0
 8000db6:	2203      	movs	r2, #3
 8000db8:	f001 f8c6 	bl	8001f48 <xQueueGenericCreate>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <main+0x80>)
 8000dc0:	601a      	str	r2, [r3, #0]




	// set motor task 
	if (xTaskCreate(usart_task, "usart", configMINIMAL_STACK_SIZE * 5,		       				
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	9301      	str	r3, [sp, #4]
 8000dca:	2300      	movs	r3, #0
 8000dcc:	9302      	str	r3, [sp, #8]
 8000dce:	2300      	movs	r3, #0
 8000dd0:	9303      	str	r3, [sp, #12]
 8000dd2:	4811      	ldr	r0, [pc, #68]	; (8000e18 <main+0x84>)
 8000dd4:	4911      	ldr	r1, [pc, #68]	; (8000e1c <main+0x88>)
 8000dd6:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f000 fa12 	bl	8001204 <xTaskGenericCreate>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d005      	beq.n	8000df2 <main+0x5e>
			NULL, mainFLASH_TASK_PRIORITY  , NULL)
			!= pdTRUE)
	{
		#ifdef DEBUG
		t_printf("Error creating motorHB task.\n");
 8000de6:	480e      	ldr	r0, [pc, #56]	; (8000e20 <main+0x8c>)
 8000de8:	f002 f950 	bl	800308c <t_printf>
		#endif
		return -1;
 8000dec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000df0:	e008      	b.n	8000e04 <main+0x70>

	}
	else
	{
		#ifdef DEBUG
		t_printf("Succsessfully created motorHB task\n");
 8000df2:	480c      	ldr	r0, [pc, #48]	; (8000e24 <main+0x90>)
 8000df4:	f002 f94a 	bl	800308c <t_printf>
	mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY is set to 0 (at the top of this
	file).  See the comments at the top of this file for more information. */
	//prvOptionallyCreateComprehensveTestApplication();

	/* Start the scheduler. */
	vTaskStartScheduler();
 8000df8:	f000 fae0 	bl	80013bc <vTaskStartScheduler>

	#ifdef DEBUG
	t_printf("\n\nError with scheduler!! .\n\n");
 8000dfc:	480a      	ldr	r0, [pc, #40]	; (8000e28 <main+0x94>)
 8000dfe:	f002 f945 	bl	800308c <t_printf>
	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details. */
	for( ;; );
 8000e02:	e7fe      	b.n	8000e02 <main+0x6e>
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	08005d30 	.word	0x08005d30
 8000e14:	200131e0 	.word	0x200131e0
 8000e18:	08000e2d 	.word	0x08000e2d
 8000e1c:	08005d3c 	.word	0x08005d3c
 8000e20:	08005d44 	.word	0x08005d44
 8000e24:	08005d64 	.word	0x08005d64
 8000e28:	08005d88 	.word	0x08005d88

08000e2c <usart_task>:


void usart_task(void * pvParameters) 
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08c      	sub	sp, #48	; 0x30
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]


	char  str[30];
	int i = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 29; i++) str[i] =  i; 
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e3c:	e009      	b.n	8000e52 <usart_task+0x26>
 8000e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	f107 0108 	add.w	r1, r7, #8
 8000e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e48:	440b      	add	r3, r1
 8000e4a:	701a      	strb	r2, [r3, #0]
 8000e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e4e:	3301      	adds	r3, #1
 8000e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e54:	2b1c      	cmp	r3, #28
 8000e56:	ddf2      	ble.n	8000e3e <usart_task+0x12>
	int len = 13;
 8000e58:	230d      	movs	r3, #13
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
	for(;;)
	{
		usart_send(NULL, 0x0);
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	2100      	movs	r1, #0
 8000e60:	f7ff fe52 	bl	8000b08 <usart_send>
		vTaskDelay(1000/portTICK_RATE_MS);
 8000e64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e68:	f000 fa80 	bl	800136c <vTaskDelay>
	}
 8000e6c:	e7f6      	b.n	8000e5c <usart_task+0x30>
 8000e6e:	bf00      	nop

08000e70 <prvSetupHardware>:
/*! 	\fn static void prvSetupHardware(void) 
 *	\brief Sets up hardware
 * 	
 */
void prvSetupHardware( void )
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	/* Setup STM32 system (clock, PLL and Flash configuration) */
	SystemInit();
 8000e74:	f000 f89c 	bl	8000fb0 <SystemInit>

	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8000e78:	f44f 7040 	mov.w	r0, #768	; 0x300
 8000e7c:	f002 fbc0 	bl	8003600 <NVIC_PriorityGroupConfig>
	
	//init_SPIx();
	init_SPIx();	
 8000e80:	f7ff fa46 	bl	8000310 <init_SPIx>
	
	// init USARTx 
	init_USARTx();
 8000e84:	f7ff fc72 	bl	800076c <init_USARTx>

	
	
}
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop

08000e8c <vApplicationTickHook>:
/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	#if ( mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY == 0 )
	{
		/* Just to verify that the interrupt nesting behaves as expected,
		increment ulFPUInterruptNesting on entry, and decrement it on exit. */
		ulFPUInterruptNesting++;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <vApplicationTickHook+0x20>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	1c5a      	adds	r2, r3, #1
 8000e96:	4b05      	ldr	r3, [pc, #20]	; (8000eac <vApplicationTickHook+0x20>)
 8000e98:	601a      	str	r2, [r3, #0]

		/* Trigger a timer 2 interrupt, which will fill the registers with a
		different value and itself trigger a timer 3 interrupt.  Note that the
		timers are not actually used.  The timer 2 and 3 interrupt vectors are
		just used for convenience. */
		NVIC_SetPendingIRQ( TIM2_IRQn );
 8000e9a:	201c      	movs	r0, #28
 8000e9c:	f7ff ff16 	bl	8000ccc <NVIC_SetPendingIRQ>
		/* Ensure that, after returning from the nested interrupts, all the FPU
		registers contain the value to which they were set by the tick hook
		function. */
		//configASSERT( ulRegTestCheckFlopRegistersContainParameterValue( 0UL ) );

		ulFPUInterruptNesting--;
 8000ea0:	4b02      	ldr	r3, [pc, #8]	; (8000eac <vApplicationTickHook+0x20>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	1e5a      	subs	r2, r3, #1
 8000ea6:	4b01      	ldr	r3, [pc, #4]	; (8000eac <vApplicationTickHook+0x20>)
 8000ea8:	601a      	str	r2, [r3, #0]
	}
	#endif
}
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000474 	.word	0x20000474

08000eb0 <TIM3_IRQHandler>:
	NVIC_Init( &NVIC_InitStructure );
}
/*-----------------------------------------------------------*/

void TIM3_IRQHandler( void )
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
	/* Just to verify that the interrupt nesting behaves as expected, increment
	ulFPUInterruptNesting on entry, and decrement it on exit. */
	ulFPUInterruptNesting++;
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <TIM3_IRQHandler+0x34>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	1c5a      	adds	r2, r3, #1
 8000eba:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <TIM3_IRQHandler+0x34>)
 8000ebc:	601a      	str	r2, [r3, #0]

	/* This is the highest priority interrupt in the chain of forced nesting
	interrupts, so latch the maximum value reached by ulFPUInterruptNesting.
	This is done purely to allow verification that the nesting depth reaches
	that intended. */
	if( ulFPUInterruptNesting > ulMaxFPUInterruptNesting )
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <TIM3_IRQHandler+0x34>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <TIM3_IRQHandler+0x38>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d903      	bls.n	8000ed2 <TIM3_IRQHandler+0x22>
	{
		ulMaxFPUInterruptNesting = ulFPUInterruptNesting;
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <TIM3_IRQHandler+0x34>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <TIM3_IRQHandler+0x38>)
 8000ed0:	601a      	str	r2, [r3, #0]

	/* Fill the FPU registers with 99 to overwrite the values written by
	TIM2_IRQHandler(). */
	//vRegTestClearFlopRegistersToParameterValue( 99UL );

	ulFPUInterruptNesting--;
 8000ed2:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <TIM3_IRQHandler+0x34>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	1e5a      	subs	r2, r3, #1
 8000ed8:	4b02      	ldr	r3, [pc, #8]	; (8000ee4 <TIM3_IRQHandler+0x34>)
 8000eda:	601a      	str	r2, [r3, #0]
}
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	20000474 	.word	0x20000474
 8000ee8:	20000478 	.word	0x20000478

08000eec <TIM2_IRQHandler>:
/*-----------------------------------------------------------*/

void TIM2_IRQHandler( void )
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	/* Just to verify that the interrupt nesting behaves as expected, increment
	ulFPUInterruptNesting on entry, and decrement it on exit. */
	ulFPUInterruptNesting++;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <TIM2_IRQHandler+0x20>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	1c5a      	adds	r2, r3, #1
 8000ef6:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <TIM2_IRQHandler+0x20>)
 8000ef8:	601a      	str	r2, [r3, #0]
	/* Fill the FPU registers with 1. */
	//vRegTestClearFlopRegistersToParameterValue( 1UL );

	/* Trigger a timer 3 interrupt, which will fill the registers with a
	different value. */
	NVIC_SetPendingIRQ( TIM3_IRQn );
 8000efa:	201d      	movs	r0, #29
 8000efc:	f7ff fee6 	bl	8000ccc <NVIC_SetPendingIRQ>
	/* Ensure that, after returning from the nesting interrupt, all the FPU
	registers contain the value to which they were set by this interrupt
	function. */
	//configASSERT( ulRegTestCheckFlopRegistersContainParameterValue( 1UL ) );

	ulFPUInterruptNesting--;
 8000f00:	4b02      	ldr	r3, [pc, #8]	; (8000f0c <TIM2_IRQHandler+0x20>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	1e5a      	subs	r2, r3, #1
 8000f06:	4b01      	ldr	r3, [pc, #4]	; (8000f0c <TIM2_IRQHandler+0x20>)
 8000f08:	601a      	str	r2, [r3, #0]
}
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000474 	.word	0x20000474

08000f10 <vApplicationMallocFailedHook>:


/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 8000f14:	f001 fd1a 	bl	800294c <ulPortSetInterruptMask>
	for( ;; );
 8000f18:	e7fe      	b.n	8000f18 <vApplicationMallocFailedHook+0x8>
 8000f1a:	bf00      	nop

08000f1c <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	unction, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 8000f32:	f001 fd0b 	bl	800294c <ulPortSetInterruptMask>
	for( ;; );
 8000f36:	e7fe      	b.n	8000f36 <vApplicationStackOverflowHook+0xe>

08000f38 <assert_failed>:
}
///*-----------------------------------------------------------*/
void assert_failed(uint8_t* file, uint32_t line){}
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <Reset_Handler>:
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	f000 b804 	b.w	8000f5a <LoopCopyDataInit>

08000f52 <CopyDataInit>:
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <LoopFillZerobss+0x22>)
 8000f54:	585b      	ldr	r3, [r3, r1]
 8000f56:	5043      	str	r3, [r0, r1]
 8000f58:	3104      	adds	r1, #4

08000f5a <LoopCopyDataInit>:
 8000f5a:	480f      	ldr	r0, [pc, #60]	; (8000f98 <LoopFillZerobss+0x26>)
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <LoopFillZerobss+0x2a>)
 8000f5e:	1842      	adds	r2, r0, r1
 8000f60:	429a      	cmp	r2, r3
 8000f62:	f4ff aff6 	bcc.w	8000f52 <CopyDataInit>
 8000f66:	4a0e      	ldr	r2, [pc, #56]	; (8000fa0 <LoopFillZerobss+0x2e>)
 8000f68:	f000 b803 	b.w	8000f72 <LoopFillZerobss>

08000f6c <FillZerobss>:
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f842 3b04 	str.w	r3, [r2], #4

08000f72 <LoopFillZerobss>:
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <LoopFillZerobss+0x32>)
 8000f74:	429a      	cmp	r2, r3
 8000f76:	f4ff aff9 	bcc.w	8000f6c <FillZerobss>
 8000f7a:	480b      	ldr	r0, [pc, #44]	; (8000fa8 <LoopFillZerobss+0x36>)
 8000f7c:	6801      	ldr	r1, [r0, #0]
 8000f7e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000f82:	6001      	str	r1, [r0, #0]
 8000f84:	f000 f814 	bl	8000fb0 <SystemInit>
 8000f88:	f004 fdb0 	bl	8005aec <__libc_init_array>
 8000f8c:	f7ff ff02 	bl	8000d94 <main>
 8000f90:	4770      	bx	lr
 8000f92:	0000      	.short	0x0000
 8000f94:	0800608c 	.word	0x0800608c
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	20000458 	.word	0x20000458
 8000fa0:	20000458 	.word	0x20000458
 8000fa4:	200141ac 	.word	0x200141ac
 8000fa8:	e000ed88 	.word	0xe000ed88

08000fac <ADC_IRQHandler>:
 8000fac:	f7ff bffe 	b.w	8000fac <ADC_IRQHandler>

08000fb0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <SystemInit+0x5c>)
 8000fb6:	4a15      	ldr	r2, [pc, #84]	; (800100c <SystemInit+0x5c>)
 8000fb8:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8000fbc:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000fc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <SystemInit+0x60>)
 8000fc6:	4a12      	ldr	r2, [pc, #72]	; (8001010 <SystemInit+0x60>)
 8000fc8:	6812      	ldr	r2, [r2, #0]
 8000fca:	f042 0201 	orr.w	r2, r2, #1
 8000fce:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <SystemInit+0x60>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000fd6:	4a0e      	ldr	r2, [pc, #56]	; (8001010 <SystemInit+0x60>)
 8000fd8:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <SystemInit+0x60>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fe4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <SystemInit+0x60>)
 8000fe8:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <SystemInit+0x64>)
 8000fea:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <SystemInit+0x60>)
 8000fee:	4a08      	ldr	r2, [pc, #32]	; (8001010 <SystemInit+0x60>)
 8000ff0:	6812      	ldr	r2, [r2, #0]
 8000ff2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ff6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <SystemInit+0x60>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000ffe:	f000 f887 	bl	8001110 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001002:	4b02      	ldr	r3, [pc, #8]	; (800100c <SystemInit+0x5c>)
 8001004:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001008:	609a      	str	r2, [r3, #8]
#endif
}
 800100a:	bd80      	pop	{r7, pc}
 800100c:	e000ed00 	.word	0xe000ed00
 8001010:	40023800 	.word	0x40023800
 8001014:	24003010 	.word	0x24003010

08001018 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001018:	b480      	push	{r7}
 800101a:	b087      	sub	sp, #28
 800101c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	2302      	movs	r3, #2
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	2300      	movs	r3, #0
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	2302      	movs	r3, #2
 8001030:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001032:	4b32      	ldr	r3, [pc, #200]	; (80010fc <SystemCoreClockUpdate+0xe4>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f003 030c 	and.w	r3, r3, #12
 800103a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	2b04      	cmp	r3, #4
 8001040:	d007      	beq.n	8001052 <SystemCoreClockUpdate+0x3a>
 8001042:	2b08      	cmp	r3, #8
 8001044:	d009      	beq.n	800105a <SystemCoreClockUpdate+0x42>
 8001046:	2b00      	cmp	r3, #0
 8001048:	d13f      	bne.n	80010ca <SystemCoreClockUpdate+0xb2>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800104a:	4b2d      	ldr	r3, [pc, #180]	; (8001100 <SystemCoreClockUpdate+0xe8>)
 800104c:	4a2d      	ldr	r2, [pc, #180]	; (8001104 <SystemCoreClockUpdate+0xec>)
 800104e:	601a      	str	r2, [r3, #0]
      break;
 8001050:	e03f      	b.n	80010d2 <SystemCoreClockUpdate+0xba>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001052:	4b2b      	ldr	r3, [pc, #172]	; (8001100 <SystemCoreClockUpdate+0xe8>)
 8001054:	4a2c      	ldr	r2, [pc, #176]	; (8001108 <SystemCoreClockUpdate+0xf0>)
 8001056:	601a      	str	r2, [r3, #0]
      break;
 8001058:	e03b      	b.n	80010d2 <SystemCoreClockUpdate+0xba>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800105a:	4b28      	ldr	r3, [pc, #160]	; (80010fc <SystemCoreClockUpdate+0xe4>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001062:	0d9b      	lsrs	r3, r3, #22
 8001064:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001066:	4b25      	ldr	r3, [pc, #148]	; (80010fc <SystemCoreClockUpdate+0xe4>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800106e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d00d      	beq.n	8001092 <SystemCoreClockUpdate+0x7a>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001076:	4a24      	ldr	r2, [pc, #144]	; (8001108 <SystemCoreClockUpdate+0xf0>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	fbb2 f2f3 	udiv	r2, r2, r3
 800107e:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <SystemCoreClockUpdate+0xe4>)
 8001080:	6859      	ldr	r1, [r3, #4]
 8001082:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001086:	400b      	ands	r3, r1
 8001088:	099b      	lsrs	r3, r3, #6
 800108a:	fb03 f302 	mul.w	r3, r3, r2
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	e00c      	b.n	80010ac <SystemCoreClockUpdate+0x94>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001092:	4a1c      	ldr	r2, [pc, #112]	; (8001104 <SystemCoreClockUpdate+0xec>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	fbb2 f2f3 	udiv	r2, r2, r3
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <SystemCoreClockUpdate+0xe4>)
 800109c:	6859      	ldr	r1, [r3, #4]
 800109e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80010a2:	400b      	ands	r3, r1
 80010a4:	099b      	lsrs	r3, r3, #6
 80010a6:	fb03 f302 	mul.w	r3, r3, r2
 80010aa:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80010ac:	4b13      	ldr	r3, [pc, #76]	; (80010fc <SystemCoreClockUpdate+0xe4>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010b4:	0c1b      	lsrs	r3, r3, #16
 80010b6:	3301      	adds	r3, #1
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80010bc:	697a      	ldr	r2, [r7, #20]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80010c4:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <SystemCoreClockUpdate+0xe8>)
 80010c6:	601a      	str	r2, [r3, #0]
      break;
 80010c8:	e003      	b.n	80010d2 <SystemCoreClockUpdate+0xba>
    default:
      SystemCoreClock = HSI_VALUE;
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <SystemCoreClockUpdate+0xe8>)
 80010cc:	4a0d      	ldr	r2, [pc, #52]	; (8001104 <SystemCoreClockUpdate+0xec>)
 80010ce:	601a      	str	r2, [r3, #0]
      break;
 80010d0:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <SystemCoreClockUpdate+0xe4>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010da:	091b      	lsrs	r3, r3, #4
 80010dc:	4a0b      	ldr	r2, [pc, #44]	; (800110c <SystemCoreClockUpdate+0xf4>)
 80010de:	5cd3      	ldrb	r3, [r2, r3]
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <SystemCoreClockUpdate+0xe8>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	40da      	lsrs	r2, r3
 80010ec:	4b04      	ldr	r3, [pc, #16]	; (8001100 <SystemCoreClockUpdate+0xe8>)
 80010ee:	601a      	str	r2, [r3, #0]
}
 80010f0:	371c      	adds	r7, #28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800
 8001100:	20000000 	.word	0x20000000
 8001104:	00f42400 	.word	0x00f42400
 8001108:	017d7840 	.word	0x017d7840
 800110c:	20000004 	.word	0x20000004

08001110 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800111e:	4b35      	ldr	r3, [pc, #212]	; (80011f4 <SetSysClock+0xe4>)
 8001120:	4a34      	ldr	r2, [pc, #208]	; (80011f4 <SetSysClock+0xe4>)
 8001122:	6812      	ldr	r2, [r2, #0]
 8001124:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001128:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800112a:	4b32      	ldr	r3, [pc, #200]	; (80011f4 <SetSysClock+0xe4>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001132:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3301      	adds	r3, #1
 8001138:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d103      	bne.n	8001148 <SetSysClock+0x38>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001146:	d1f0      	bne.n	800112a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001148:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <SetSysClock+0xe4>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d002      	beq.n	800115a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001154:	2301      	movs	r3, #1
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	e001      	b.n	800115e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800115a:	2300      	movs	r3, #0
 800115c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d142      	bne.n	80011ea <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001164:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <SetSysClock+0xe4>)
 8001166:	4a23      	ldr	r2, [pc, #140]	; (80011f4 <SetSysClock+0xe4>)
 8001168:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800116a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800116e:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001170:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <SetSysClock+0xe8>)
 8001172:	4a21      	ldr	r2, [pc, #132]	; (80011f8 <SetSysClock+0xe8>)
 8001174:	6812      	ldr	r2, [r2, #0]
 8001176:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800117a:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800117c:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <SetSysClock+0xe4>)
 800117e:	4a1d      	ldr	r2, [pc, #116]	; (80011f4 <SetSysClock+0xe4>)
 8001180:	6892      	ldr	r2, [r2, #8]
 8001182:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001184:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <SetSysClock+0xe4>)
 8001186:	4a1b      	ldr	r2, [pc, #108]	; (80011f4 <SetSysClock+0xe4>)
 8001188:	6892      	ldr	r2, [r2, #8]
 800118a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800118e:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001190:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <SetSysClock+0xe4>)
 8001192:	4a18      	ldr	r2, [pc, #96]	; (80011f4 <SetSysClock+0xe4>)
 8001194:	6892      	ldr	r2, [r2, #8]
 8001196:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 800119a:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <SetSysClock+0xe4>)
 800119e:	4a17      	ldr	r2, [pc, #92]	; (80011fc <SetSysClock+0xec>)
 80011a0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80011a2:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <SetSysClock+0xe4>)
 80011a4:	4a13      	ldr	r2, [pc, #76]	; (80011f4 <SetSysClock+0xe4>)
 80011a6:	6812      	ldr	r2, [r2, #0]
 80011a8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80011ac:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80011ae:	bf00      	nop
 80011b0:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <SetSysClock+0xe4>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d0f9      	beq.n	80011b0 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_4WS;
 80011bc:	4b10      	ldr	r3, [pc, #64]	; (8001200 <SetSysClock+0xf0>)
 80011be:	f240 6204 	movw	r2, #1540	; 0x604
 80011c2:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80011c4:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <SetSysClock+0xe4>)
 80011c6:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <SetSysClock+0xe4>)
 80011c8:	6892      	ldr	r2, [r2, #8]
 80011ca:	f022 0203 	bic.w	r2, r2, #3
 80011ce:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <SetSysClock+0xe4>)
 80011d2:	4a08      	ldr	r2, [pc, #32]	; (80011f4 <SetSysClock+0xe4>)
 80011d4:	6892      	ldr	r2, [r2, #8]
 80011d6:	f042 0202 	orr.w	r2, r2, #2
 80011da:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80011dc:	bf00      	nop
 80011de:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <SetSysClock+0xe4>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 030c 	and.w	r3, r3, #12
 80011e6:	2b08      	cmp	r3, #8
 80011e8:	d1f9      	bne.n	80011de <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40007000 	.word	0x40007000
 80011fc:	07404b19 	.word	0x07404b19
 8001200:	40023c00 	.word	0x40023c00

08001204 <xTaskGenericCreate>:
	static portTickType prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;

#endif

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	; 0x28
 8001208:	af02      	add	r7, sp, #8
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	603b      	str	r3, [r7, #0]
 8001210:	4613      	mov	r3, r2
 8001212:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d102      	bne.n	8001220 <xTaskGenericCreate+0x1c>
 800121a:	f001 fb97 	bl	800294c <ulPortSetInterruptMask>
 800121e:	e7fe      	b.n	800121e <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 8001220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001222:	2b04      	cmp	r3, #4
 8001224:	d902      	bls.n	800122c <xTaskGenericCreate+0x28>
 8001226:	f001 fb91 	bl	800294c <ulPortSetInterruptMask>
 800122a:	e7fe      	b.n	800122a <xTaskGenericCreate+0x26>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 800122c:	88fb      	ldrh	r3, [r7, #6]
 800122e:	4618      	mov	r0, r3
 8001230:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001232:	f000 fd29 	bl	8001c88 <prvAllocateTCBAndStack>
 8001236:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d072      	beq.n	8001324 <xTaskGenericCreate+0x120>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001248:	3b01      	subs	r3, #1
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	f023 0307 	bic.w	r3, r3, #7
 8001256:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	2b00      	cmp	r3, #0
 8001260:	d002      	beq.n	8001268 <xTaskGenericCreate+0x64>
 8001262:	f001 fb73 	bl	800294c <ulPortSetInterruptMask>
 8001266:	e7fe      	b.n	8001266 <xTaskGenericCreate+0x62>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	69b8      	ldr	r0, [r7, #24]
 800126e:	68b9      	ldr	r1, [r7, #8]
 8001270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001274:	f000 fc12 	bl	8001a9c <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001278:	6978      	ldr	r0, [r7, #20]
 800127a:	68f9      	ldr	r1, [r7, #12]
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	f001 fa73 	bl	8002768 <pxPortInitialiseStack>
 8001282:	4602      	mov	r2, r0
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 8001288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800128a:	2b00      	cmp	r3, #0
 800128c:	d002      	beq.n	8001294 <xTaskGenericCreate+0x90>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 800128e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	601a      	str	r2, [r3, #0]
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 8001294:	f001 fb38 	bl	8002908 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8001298:	4b2e      	ldr	r3, [pc, #184]	; (8001354 <xTaskGenericCreate+0x150>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	1c5a      	adds	r2, r3, #1
 800129e:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <xTaskGenericCreate+0x150>)
 80012a0:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 80012a2:	4b2d      	ldr	r3, [pc, #180]	; (8001358 <xTaskGenericCreate+0x154>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d109      	bne.n	80012be <xTaskGenericCreate+0xba>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 80012aa:	4b2b      	ldr	r3, [pc, #172]	; (8001358 <xTaskGenericCreate+0x154>)
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 80012b0:	4b28      	ldr	r3, [pc, #160]	; (8001354 <xTaskGenericCreate+0x150>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d10f      	bne.n	80012d8 <xTaskGenericCreate+0xd4>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 80012b8:	f000 fc38 	bl	8001b2c <prvInitialiseTaskLists>
 80012bc:	e00c      	b.n	80012d8 <xTaskGenericCreate+0xd4>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 80012be:	4b27      	ldr	r3, [pc, #156]	; (800135c <xTaskGenericCreate+0x158>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d108      	bne.n	80012d8 <xTaskGenericCreate+0xd4>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 80012c6:	4b24      	ldr	r3, [pc, #144]	; (8001358 <xTaskGenericCreate+0x154>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d802      	bhi.n	80012d8 <xTaskGenericCreate+0xd4>
					{
						pxCurrentTCB = pxNewTCB;
 80012d2:	4b21      	ldr	r3, [pc, #132]	; (8001358 <xTaskGenericCreate+0x154>)
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	601a      	str	r2, [r3, #0]
					}
				}
			}

			uxTaskNumber++;
 80012d8:	4b21      	ldr	r3, [pc, #132]	; (8001360 <xTaskGenericCreate+0x15c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	1c5a      	adds	r2, r3, #1
 80012de:	4b20      	ldr	r3, [pc, #128]	; (8001360 <xTaskGenericCreate+0x15c>)
 80012e0:	601a      	str	r2, [r3, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 80012e2:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <xTaskGenericCreate+0x15c>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ee:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <xTaskGenericCreate+0x160>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d903      	bls.n	80012fe <xTaskGenericCreate+0xfa>
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012fa:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <xTaskGenericCreate+0x160>)
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4a17      	ldr	r2, [pc, #92]	; (8001368 <xTaskGenericCreate+0x164>)
 800130c:	441a      	add	r2, r3
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	3304      	adds	r3, #4
 8001312:	4610      	mov	r0, r2
 8001314:	4619      	mov	r1, r3
 8001316:	f001 f9a1 	bl	800265c <vListInsertEnd>

			xReturn = pdPASS;
 800131a:	2301      	movs	r3, #1
 800131c:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 800131e:	f001 fb03 	bl	8002928 <vPortExitCritical>
 8001322:	e002      	b.n	800132a <xTaskGenericCreate+0x126>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001324:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001328:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d10b      	bne.n	8001348 <xTaskGenericCreate+0x144>
	{
		if( xSchedulerRunning != pdFALSE )
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <xTaskGenericCreate+0x158>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d007      	beq.n	8001348 <xTaskGenericCreate+0x144>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8001338:	4b07      	ldr	r3, [pc, #28]	; (8001358 <xTaskGenericCreate+0x154>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800133e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001340:	429a      	cmp	r2, r3
 8001342:	d201      	bcs.n	8001348 <xTaskGenericCreate+0x144>
			{
				portYIELD_WITHIN_API();
 8001344:	f001 fad0 	bl	80028e8 <vPortYield>
			}
		}
	}

	return xReturn;
 8001348:	69fb      	ldr	r3, [r7, #28]
}
 800134a:	4618      	mov	r0, r3
 800134c:	3720      	adds	r7, #32
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000554 	.word	0x20000554
 8001358:	2000047c 	.word	0x2000047c
 800135c:	20000560 	.word	0x20000560
 8001360:	20000574 	.word	0x20000574
 8001364:	2000055c 	.word	0x2000055c
 8001368:	20000480 	.word	0x20000480

0800136c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d012      	beq.n	80013a4 <vTaskDelay+0x38>
		{
			vTaskSuspendAll();
 800137e:	f000 f855 	bl	800142c <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <vTaskDelay+0x48>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 800138c:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <vTaskDelay+0x4c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	3304      	adds	r3, #4
 8001392:	4618      	mov	r0, r3
 8001394:	f001 f9be 	bl	8002714 <uxListRemove>
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8001398:	68b8      	ldr	r0, [r7, #8]
 800139a:	f000 fc3f 	bl	8001c1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800139e:	f000 f853 	bl	8001448 <xTaskResumeAll>
 80013a2:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <vTaskDelay+0x42>
		{
			portYIELD_WITHIN_API();
 80013aa:	f001 fa9d 	bl	80028e8 <vPortYield>
		}
	}
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000558 	.word	0x20000558
 80013b8:	2000047c 	.word	0x2000047c

080013bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 80013c2:	2300      	movs	r3, #0
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	2300      	movs	r3, #0
 80013c8:	9301      	str	r3, [sp, #4]
 80013ca:	2300      	movs	r3, #0
 80013cc:	9302      	str	r3, [sp, #8]
 80013ce:	2300      	movs	r3, #0
 80013d0:	9303      	str	r3, [sp, #12]
 80013d2:	4812      	ldr	r0, [pc, #72]	; (800141c <vTaskStartScheduler+0x60>)
 80013d4:	4912      	ldr	r1, [pc, #72]	; (8001420 <vTaskStartScheduler+0x64>)
 80013d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013da:	2300      	movs	r3, #0
 80013dc:	f7ff ff12 	bl	8001204 <xTaskGenericCreate>
 80013e0:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d102      	bne.n	80013ee <vTaskStartScheduler+0x32>
		{
			xReturn = xTimerCreateTimerTask();
 80013e8:	f001 fb4a 	bl	8002a80 <xTimerCreateTimerTask>
 80013ec:	6078      	str	r0, [r7, #4]
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d10a      	bne.n	800140a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80013f4:	f001 faaa 	bl	800294c <ulPortSetInterruptMask>
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
 80013f8:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <vTaskStartScheduler+0x68>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <vTaskStartScheduler+0x6c>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001404:	f001 fa0a 	bl	800281c <xPortStartScheduler>
 8001408:	e005      	b.n	8001416 <vTaskStartScheduler+0x5a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d102      	bne.n	8001416 <vTaskStartScheduler+0x5a>
 8001410:	f001 fa9c 	bl	800294c <ulPortSetInterruptMask>
 8001414:	e7fe      	b.n	8001414 <vTaskStartScheduler+0x58>
	}
}
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	08001a79 	.word	0x08001a79
 8001420:	08005da8 	.word	0x08005da8
 8001424:	20000560 	.word	0x20000560
 8001428:	20000558 	.word	0x20000558

0800142c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 8001430:	4b04      	ldr	r3, [pc, #16]	; (8001444 <vTaskSuspendAll+0x18>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	1c5a      	adds	r2, r3, #1
 8001436:	4b03      	ldr	r3, [pc, #12]	; (8001444 <vTaskSuspendAll+0x18>)
 8001438:	601a      	str	r2, [r3, #0]
}
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	20000564 	.word	0x20000564

08001448 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
tskTCB *pxTCB;
portBASE_TYPE xAlreadyYielded = pdFALSE;
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001452:	4b38      	ldr	r3, [pc, #224]	; (8001534 <xTaskResumeAll+0xec>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d102      	bne.n	8001460 <xTaskResumeAll+0x18>
 800145a:	f001 fa77 	bl	800294c <ulPortSetInterruptMask>
 800145e:	e7fe      	b.n	800145e <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001460:	f001 fa52 	bl	8002908 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001464:	4b33      	ldr	r3, [pc, #204]	; (8001534 <xTaskResumeAll+0xec>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	1e5a      	subs	r2, r3, #1
 800146a:	4b32      	ldr	r3, [pc, #200]	; (8001534 <xTaskResumeAll+0xec>)
 800146c:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 800146e:	4b31      	ldr	r3, [pc, #196]	; (8001534 <xTaskResumeAll+0xec>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d156      	bne.n	8001524 <xTaskResumeAll+0xdc>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 8001476:	4b30      	ldr	r3, [pc, #192]	; (8001538 <xTaskResumeAll+0xf0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d052      	beq.n	8001524 <xTaskResumeAll+0xdc>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800147e:	e02f      	b.n	80014e0 <xTaskResumeAll+0x98>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001480:	4b2e      	ldr	r3, [pc, #184]	; (800153c <xTaskResumeAll+0xf4>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	3318      	adds	r3, #24
 800148c:	4618      	mov	r0, r3
 800148e:	f001 f941 	bl	8002714 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	3304      	adds	r3, #4
 8001496:	4618      	mov	r0, r3
 8001498:	f001 f93c 	bl	8002714 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014a0:	4b27      	ldr	r3, [pc, #156]	; (8001540 <xTaskResumeAll+0xf8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d903      	bls.n	80014b0 <xTaskResumeAll+0x68>
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014ac:	4b24      	ldr	r3, [pc, #144]	; (8001540 <xTaskResumeAll+0xf8>)
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4a21      	ldr	r2, [pc, #132]	; (8001544 <xTaskResumeAll+0xfc>)
 80014be:	441a      	add	r2, r3
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	3304      	adds	r3, #4
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	f001 f8c8 	bl	800265c <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014d0:	4b1d      	ldr	r3, [pc, #116]	; (8001548 <xTaskResumeAll+0x100>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d302      	bcc.n	80014e0 <xTaskResumeAll+0x98>
					{
						xYieldPending = pdTRUE;
 80014da:	4b1c      	ldr	r3, [pc, #112]	; (800154c <xTaskResumeAll+0x104>)
 80014dc:	2201      	movs	r2, #1
 80014de:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80014e0:	4b16      	ldr	r3, [pc, #88]	; (800153c <xTaskResumeAll+0xf4>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1cb      	bne.n	8001480 <xTaskResumeAll+0x38>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 80014e8:	4b19      	ldr	r3, [pc, #100]	; (8001550 <xTaskResumeAll+0x108>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d011      	beq.n	8001514 <xTaskResumeAll+0xcc>
				{
					while( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 80014f0:	e00c      	b.n	800150c <xTaskResumeAll+0xc4>
					{
						if( xTaskIncrementTick() != pdFALSE )
 80014f2:	f000 f841 	bl	8001578 <xTaskIncrementTick>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d002      	beq.n	8001502 <xTaskResumeAll+0xba>
						{
							xYieldPending = pdTRUE;
 80014fc:	4b13      	ldr	r3, [pc, #76]	; (800154c <xTaskResumeAll+0x104>)
 80014fe:	2201      	movs	r2, #1
 8001500:	601a      	str	r2, [r3, #0]
						}
						--uxPendedTicks;
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <xTaskResumeAll+0x108>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	1e5a      	subs	r2, r3, #1
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <xTaskResumeAll+0x108>)
 800150a:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 800150c:	4b10      	ldr	r3, [pc, #64]	; (8001550 <xTaskResumeAll+0x108>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1ee      	bne.n	80014f2 <xTaskResumeAll+0xaa>
						}
						--uxPendedTicks;
					}
				}

				if( xYieldPending == pdTRUE )
 8001514:	4b0d      	ldr	r3, [pc, #52]	; (800154c <xTaskResumeAll+0x104>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d103      	bne.n	8001524 <xTaskResumeAll+0xdc>
				{
					xAlreadyYielded = pdTRUE;
 800151c:	2301      	movs	r3, #1
 800151e:	607b      	str	r3, [r7, #4]
					portYIELD_WITHIN_API();
 8001520:	f001 f9e2 	bl	80028e8 <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 8001524:	f001 fa00 	bl	8002928 <vPortExitCritical>

	return xAlreadyYielded;
 8001528:	687b      	ldr	r3, [r7, #4]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000564 	.word	0x20000564
 8001538:	20000554 	.word	0x20000554
 800153c:	20000514 	.word	0x20000514
 8001540:	2000055c 	.word	0x2000055c
 8001544:	20000480 	.word	0x20000480
 8001548:	2000047c 	.word	0x2000047c
 800154c:	2000056c 	.word	0x2000056c
 8001550:	20000568 	.word	0x20000568

08001554 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCount( void )
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 800155a:	f001 f9d5 	bl	8002908 <vPortEnterCritical>
	{
		xTicks = xTickCount;
 800155e:	4b05      	ldr	r3, [pc, #20]	; (8001574 <xTaskGetTickCount+0x20>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
 8001564:	f001 f9e0 	bl	8002928 <vPortExitCritical>

	return xTicks;
 8001568:	687b      	ldr	r3, [r7, #4]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000558 	.word	0x20000558

08001578 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

portBASE_TYPE xTaskIncrementTick( void )
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
tskTCB * pxTCB;
portTickType xItemValue;
portBASE_TYPE xSwitchRequired = pdFALSE;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8001582:	4b5d      	ldr	r3, [pc, #372]	; (80016f8 <xTaskIncrementTick+0x180>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	f040 80a4 	bne.w	80016d4 <xTaskIncrementTick+0x15c>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 800158c:	4b5b      	ldr	r3, [pc, #364]	; (80016fc <xTaskIncrementTick+0x184>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	1c5a      	adds	r2, r3, #1
 8001592:	4b5a      	ldr	r3, [pc, #360]	; (80016fc <xTaskIncrementTick+0x184>)
 8001594:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const portTickType xConstTickCount = xTickCount;
 8001596:	4b59      	ldr	r3, [pc, #356]	; (80016fc <xTaskIncrementTick+0x184>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( portTickType ) 0U )
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d12e      	bne.n	8001600 <xTaskIncrementTick+0x88>
			{
				taskSWITCH_DELAYED_LISTS();
 80015a2:	4b57      	ldr	r3, [pc, #348]	; (8001700 <xTaskIncrementTick+0x188>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d002      	beq.n	80015b2 <xTaskIncrementTick+0x3a>
 80015ac:	f001 f9ce 	bl	800294c <ulPortSetInterruptMask>
 80015b0:	e7fe      	b.n	80015b0 <xTaskIncrementTick+0x38>
 80015b2:	4b53      	ldr	r3, [pc, #332]	; (8001700 <xTaskIncrementTick+0x188>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	4b52      	ldr	r3, [pc, #328]	; (8001704 <xTaskIncrementTick+0x18c>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b50      	ldr	r3, [pc, #320]	; (8001700 <xTaskIncrementTick+0x188>)
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	4b50      	ldr	r3, [pc, #320]	; (8001704 <xTaskIncrementTick+0x18c>)
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	4b50      	ldr	r3, [pc, #320]	; (8001708 <xTaskIncrementTick+0x190>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	1c5a      	adds	r2, r3, #1
 80015cc:	4b4e      	ldr	r3, [pc, #312]	; (8001708 <xTaskIncrementTick+0x190>)
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	4b4b      	ldr	r3, [pc, #300]	; (8001700 <xTaskIncrementTick+0x188>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <xTaskIncrementTick+0x66>
 80015da:	2301      	movs	r3, #1
 80015dc:	e000      	b.n	80015e0 <xTaskIncrementTick+0x68>
 80015de:	2300      	movs	r3, #0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d004      	beq.n	80015ee <xTaskIncrementTick+0x76>
 80015e4:	4b49      	ldr	r3, [pc, #292]	; (800170c <xTaskIncrementTick+0x194>)
 80015e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	e008      	b.n	8001600 <xTaskIncrementTick+0x88>
 80015ee:	4b44      	ldr	r3, [pc, #272]	; (8001700 <xTaskIncrementTick+0x188>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	4b43      	ldr	r3, [pc, #268]	; (800170c <xTaskIncrementTick+0x194>)
 80015fe:	601a      	str	r2, [r3, #0]

			/* See if this tick has made a timeout expire.  Tasks are stored in the
			queue in the order of their wake time - meaning once one tasks has been
			found whose block time has not expired there is no need not look any
			further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8001600:	4b42      	ldr	r3, [pc, #264]	; (800170c <xTaskIncrementTick+0x194>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	429a      	cmp	r2, r3
 8001608:	d34f      	bcc.n	80016aa <xTaskIncrementTick+0x132>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800160a:	4b3d      	ldr	r3, [pc, #244]	; (8001700 <xTaskIncrementTick+0x188>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <xTaskIncrementTick+0xa0>
 8001614:	2301      	movs	r3, #1
 8001616:	e000      	b.n	800161a <xTaskIncrementTick+0xa2>
 8001618:	2300      	movs	r3, #0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d004      	beq.n	8001628 <xTaskIncrementTick+0xb0>
					{
						/* The delayed list is empty.  Set xNextTaskUnblockTime to
						the	maximum possible value so it is extremely unlikely that
						the if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 800161e:	4b3b      	ldr	r3, [pc, #236]	; (800170c <xTaskIncrementTick+0x194>)
 8001620:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001624:	601a      	str	r2, [r3, #0]
						break;
 8001626:	e040      	b.n	80016aa <xTaskIncrementTick+0x132>
					{
						/* The delayed list is not empty, get the value of the item
						at the head of the delayed list.  This is the time at which
						the task at the head of the delayed list must be removed
						from the Blocked state. */
						pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001628:	4b35      	ldr	r3, [pc, #212]	; (8001700 <xTaskIncrementTick+0x188>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	429a      	cmp	r2, r3
 800163e:	d203      	bcs.n	8001648 <xTaskIncrementTick+0xd0>
						{
							/* It is not time to unblock this item yet, but the item
							value is the time at which the task at the head of the
							blocked list must be removed from the Blocked state -
							so record the item value in xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 8001640:	4b32      	ldr	r3, [pc, #200]	; (800170c <xTaskIncrementTick+0x194>)
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	601a      	str	r2, [r3, #0]
							break;
 8001646:	e030      	b.n	80016aa <xTaskIncrementTick+0x132>
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	3304      	adds	r3, #4
 800164c:	4618      	mov	r0, r3
 800164e:	f001 f861 	bl	8002714 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove it
						from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001656:	2b00      	cmp	r3, #0
 8001658:	d004      	beq.n	8001664 <xTaskIncrementTick+0xec>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	3318      	adds	r3, #24
 800165e:	4618      	mov	r0, r3
 8001660:	f001 f858 	bl	8002714 <uxListRemove>
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001668:	4b29      	ldr	r3, [pc, #164]	; (8001710 <xTaskIncrementTick+0x198>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	429a      	cmp	r2, r3
 800166e:	d903      	bls.n	8001678 <xTaskIncrementTick+0x100>
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001674:	4b26      	ldr	r3, [pc, #152]	; (8001710 <xTaskIncrementTick+0x198>)
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800167c:	4613      	mov	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4a23      	ldr	r2, [pc, #140]	; (8001714 <xTaskIncrementTick+0x19c>)
 8001686:	441a      	add	r2, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	3304      	adds	r3, #4
 800168c:	4610      	mov	r0, r2
 800168e:	4619      	mov	r1, r3
 8001690:	f000 ffe4 	bl	800265c <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should only
							be performed if the unblocked task has a priority that
							is equal to or higher than the currently executing
							task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001698:	4b1f      	ldr	r3, [pc, #124]	; (8001718 <xTaskIncrementTick+0x1a0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169e:	429a      	cmp	r2, r3
 80016a0:	d302      	bcc.n	80016a8 <xTaskIncrementTick+0x130>
							{
								xSwitchRequired = pdTRUE;
 80016a2:	2301      	movs	r3, #1
 80016a4:	617b      	str	r3, [r7, #20]
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
 80016a6:	e7b0      	b.n	800160a <xTaskIncrementTick+0x92>
 80016a8:	e7af      	b.n	800160a <xTaskIncrementTick+0x92>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 80016aa:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <xTaskIncrementTick+0x1a0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b0:	4918      	ldr	r1, [pc, #96]	; (8001714 <xTaskIncrementTick+0x19c>)
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d901      	bls.n	80016c6 <xTaskIncrementTick+0x14e>
			{
				xSwitchRequired = pdTRUE;
 80016c2:	2301      	movs	r3, #1
 80016c4:	617b      	str	r3, [r7, #20]
		
		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( unsigned portBASE_TYPE ) 0U )
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <xTaskIncrementTick+0x1a4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d109      	bne.n	80016e2 <xTaskIncrementTick+0x16a>
			{
				vApplicationTickHook();
 80016ce:	f7ff fbdd 	bl	8000e8c <vApplicationTickHook>
 80016d2:	e006      	b.n	80016e2 <xTaskIncrementTick+0x16a>
		}
		#endif /* configUSE_TICK_HOOK */		
	}
	else
	{
		++uxPendedTicks;
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <xTaskIncrementTick+0x1a4>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	1c5a      	adds	r2, r3, #1
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <xTaskIncrementTick+0x1a4>)
 80016dc:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80016de:	f7ff fbd5 	bl	8000e8c <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80016e2:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <xTaskIncrementTick+0x1a8>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <xTaskIncrementTick+0x176>
		{
			xSwitchRequired = pdTRUE;
 80016ea:	2301      	movs	r3, #1
 80016ec:	617b      	str	r3, [r7, #20]
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80016ee:	697b      	ldr	r3, [r7, #20]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000564 	.word	0x20000564
 80016fc:	20000558 	.word	0x20000558
 8001700:	2000050c 	.word	0x2000050c
 8001704:	20000510 	.word	0x20000510
 8001708:	20000570 	.word	0x20000570
 800170c:	20000014 	.word	0x20000014
 8001710:	2000055c 	.word	0x2000055c
 8001714:	20000480 	.word	0x20000480
 8001718:	2000047c 	.word	0x2000047c
 800171c:	20000568 	.word	0x20000568
 8001720:	2000056c 	.word	0x2000056c

08001724 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 800172a:	4b35      	ldr	r3, [pc, #212]	; (8001800 <vTaskSwitchContext+0xdc>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001732:	4b34      	ldr	r3, [pc, #208]	; (8001804 <vTaskSwitchContext+0xe0>)
 8001734:	2201      	movs	r2, #1
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	e05e      	b.n	80017f8 <vTaskSwitchContext+0xd4>
	}
	else
	{
		xYieldPending = pdFALSE;
 800173a:	4b32      	ldr	r3, [pc, #200]	; (8001804 <vTaskSwitchContext+0xe0>)
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
				}
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 8001740:	4b31      	ldr	r3, [pc, #196]	; (8001808 <vTaskSwitchContext+0xe4>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	4b30      	ldr	r3, [pc, #192]	; (8001808 <vTaskSwitchContext+0xe4>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174c:	429a      	cmp	r2, r3
 800174e:	d808      	bhi.n	8001762 <vTaskSwitchContext+0x3e>
 8001750:	4b2d      	ldr	r3, [pc, #180]	; (8001808 <vTaskSwitchContext+0xe4>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b2c      	ldr	r3, [pc, #176]	; (8001808 <vTaskSwitchContext+0xe4>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	3334      	adds	r3, #52	; 0x34
 800175a:	4610      	mov	r0, r2
 800175c:	4619      	mov	r1, r3
 800175e:	f7ff fbe3 	bl	8000f28 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 8001762:	4b29      	ldr	r3, [pc, #164]	; (8001808 <vTaskSwitchContext+0xe4>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001768:	4618      	mov	r0, r3
 800176a:	4928      	ldr	r1, [pc, #160]	; (800180c <vTaskSwitchContext+0xe8>)
 800176c:	2214      	movs	r2, #20
 800176e:	f004 f9e5 	bl	8005b3c <memcmp>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d009      	beq.n	800178c <vTaskSwitchContext+0x68>
 8001778:	4b23      	ldr	r3, [pc, #140]	; (8001808 <vTaskSwitchContext+0xe4>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b22      	ldr	r3, [pc, #136]	; (8001808 <vTaskSwitchContext+0xe4>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	3334      	adds	r3, #52	; 0x34
 8001782:	4610      	mov	r0, r2
 8001784:	4619      	mov	r1, r3
 8001786:	f7ff fbcf 	bl	8000f28 <vApplicationStackOverflowHook>

		taskSELECT_HIGHEST_PRIORITY_TASK();
 800178a:	e00c      	b.n	80017a6 <vTaskSwitchContext+0x82>
 800178c:	e00b      	b.n	80017a6 <vTaskSwitchContext+0x82>
 800178e:	4b20      	ldr	r3, [pc, #128]	; (8001810 <vTaskSwitchContext+0xec>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d102      	bne.n	800179c <vTaskSwitchContext+0x78>
 8001796:	f001 f8d9 	bl	800294c <ulPortSetInterruptMask>
 800179a:	e7fe      	b.n	800179a <vTaskSwitchContext+0x76>
 800179c:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <vTaskSwitchContext+0xec>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	1e5a      	subs	r2, r3, #1
 80017a2:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <vTaskSwitchContext+0xec>)
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <vTaskSwitchContext+0xec>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	491a      	ldr	r1, [pc, #104]	; (8001814 <vTaskSwitchContext+0xf0>)
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	440b      	add	r3, r1
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0e8      	beq.n	800178e <vTaskSwitchContext+0x6a>
 80017bc:	4b14      	ldr	r3, [pc, #80]	; (8001810 <vTaskSwitchContext+0xec>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4a12      	ldr	r2, [pc, #72]	; (8001814 <vTaskSwitchContext+0xf0>)
 80017ca:	4413      	add	r3, r2
 80017cc:	607b      	str	r3, [r7, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3308      	adds	r3, #8
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d104      	bne.n	80017ee <vTaskSwitchContext+0xca>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <vTaskSwitchContext+0xe4>)
 80017f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000564 	.word	0x20000564
 8001804:	2000056c 	.word	0x2000056c
 8001808:	2000047c 	.word	0x2000047c
 800180c:	0800604c 	.word	0x0800604c
 8001810:	2000055c 	.word	0x2000055c
 8001814:	20000480 	.word	0x20000480

08001818 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( xList * const pxEventList, portTickType xTicksToWait )
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d102      	bne.n	800182e <vTaskPlaceOnEventList+0x16>
 8001828:	f001 f890 	bl	800294c <ulPortSetInterruptMask>
 800182c:	e7fe      	b.n	800182c <vTaskPlaceOnEventList+0x14>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800182e:	4b12      	ldr	r3, [pc, #72]	; (8001878 <vTaskPlaceOnEventList+0x60>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	3318      	adds	r3, #24
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	4619      	mov	r1, r3
 8001838:	f000 ff34 	bl	80026a4 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 800183c:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <vTaskPlaceOnEventList+0x60>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	3304      	adds	r3, #4
 8001842:	4618      	mov	r0, r3
 8001844:	f000 ff66 	bl	8002714 <uxListRemove>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800184e:	d107      	bne.n	8001860 <vTaskPlaceOnEventList+0x48>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8001850:	4b09      	ldr	r3, [pc, #36]	; (8001878 <vTaskPlaceOnEventList+0x60>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	3304      	adds	r3, #4
 8001856:	4809      	ldr	r0, [pc, #36]	; (800187c <vTaskPlaceOnEventList+0x64>)
 8001858:	4619      	mov	r1, r3
 800185a:	f000 feff 	bl	800265c <vListInsertEnd>
 800185e:	e007      	b.n	8001870 <vTaskPlaceOnEventList+0x58>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 8001860:	4b07      	ldr	r3, [pc, #28]	; (8001880 <vTaskPlaceOnEventList+0x68>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	4413      	add	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f000 f9d6 	bl	8001c1c <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	2000047c 	.word	0x2000047c
 800187c:	20000540 	.word	0x20000540
 8001880:	20000558 	.word	0x20000558

08001884 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( xList * const pxEventList, portTickType xTicksToWait )
	{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <vTaskPlaceOnEventListRestricted+0x16>
 8001894:	f001 f85a 	bl	800294c <ulPortSetInterruptMask>
 8001898:	e7fe      	b.n	8001898 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <vTaskPlaceOnEventListRestricted+0x48>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	3318      	adds	r3, #24
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	4619      	mov	r1, r3
 80018a4:	f000 feda 	bl	800265c <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <vTaskPlaceOnEventListRestricted+0x48>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	3304      	adds	r3, #4
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 ff30 	bl	8002714 <uxListRemove>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <vTaskPlaceOnEventListRestricted+0x4c>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	4413      	add	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f000 f9ac 	bl	8001c1c <prvAddCurrentTaskToDelayedList>
	}
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	2000047c 	.word	0x2000047c
 80018d0:	20000558 	.word	0x20000558

080018d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d102      	bne.n	80018f0 <xTaskRemoveFromEventList+0x1c>
 80018ea:	f001 f82f 	bl	800294c <ulPortSetInterruptMask>
 80018ee:	e7fe      	b.n	80018ee <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	3318      	adds	r3, #24
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 ff0d 	bl	8002714 <uxListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 80018fa:	4b1e      	ldr	r3, [pc, #120]	; (8001974 <xTaskRemoveFromEventList+0xa0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d11d      	bne.n	800193e <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	3304      	adds	r3, #4
 8001906:	4618      	mov	r0, r3
 8001908:	f000 ff04 	bl	8002714 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001910:	4b19      	ldr	r3, [pc, #100]	; (8001978 <xTaskRemoveFromEventList+0xa4>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d903      	bls.n	8001920 <xTaskRemoveFromEventList+0x4c>
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800191c:	4b16      	ldr	r3, [pc, #88]	; (8001978 <xTaskRemoveFromEventList+0xa4>)
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001924:	4613      	mov	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4a13      	ldr	r2, [pc, #76]	; (800197c <xTaskRemoveFromEventList+0xa8>)
 800192e:	441a      	add	r2, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	3304      	adds	r3, #4
 8001934:	4610      	mov	r0, r2
 8001936:	4619      	mov	r1, r3
 8001938:	f000 fe90 	bl	800265c <vListInsertEnd>
 800193c:	e005      	b.n	800194a <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	3318      	adds	r3, #24
 8001942:	480f      	ldr	r0, [pc, #60]	; (8001980 <xTaskRemoveFromEventList+0xac>)
 8001944:	4619      	mov	r1, r3
 8001946:	f000 fe89 	bl	800265c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800194e:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <xTaskRemoveFromEventList+0xb0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001954:	429a      	cmp	r2, r3
 8001956:	d305      	bcc.n	8001964 <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 8001958:	2301      	movs	r3, #1
 800195a:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800195c:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <xTaskRemoveFromEventList+0xb4>)
 800195e:	2201      	movs	r2, #1
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	e001      	b.n	8001968 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 8001964:	2300      	movs	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8001968:	68fb      	ldr	r3, [r7, #12]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000564 	.word	0x20000564
 8001978:	2000055c 	.word	0x2000055c
 800197c:	20000480 	.word	0x20000480
 8001980:	20000514 	.word	0x20000514
 8001984:	2000047c 	.word	0x2000047c
 8001988:	2000056c 	.word	0x2000056c

0800198c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d102      	bne.n	80019a0 <vTaskSetTimeOutState+0x14>
 800199a:	f000 ffd7 	bl	800294c <ulPortSetInterruptMask>
 800199e:	e7fe      	b.n	800199e <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <vTaskSetTimeOutState+0x2c>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80019a8:	4b04      	ldr	r3, [pc, #16]	; (80019bc <vTaskSetTimeOutState+0x30>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	605a      	str	r2, [r3, #4]
}
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000570 	.word	0x20000570
 80019bc:	20000558 	.word	0x20000558

080019c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d102      	bne.n	80019d6 <xTaskCheckForTimeOut+0x16>
 80019d0:	f000 ffbc 	bl	800294c <ulPortSetInterruptMask>
 80019d4:	e7fe      	b.n	80019d4 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d102      	bne.n	80019e2 <xTaskCheckForTimeOut+0x22>
 80019dc:	f000 ffb6 	bl	800294c <ulPortSetInterruptMask>
 80019e0:	e7fe      	b.n	80019e0 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 80019e2:	f000 ff91 	bl	8002908 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const portTickType xConstTickCount = xTickCount;
 80019e6:	4b1c      	ldr	r3, [pc, #112]	; (8001a58 <xTaskCheckForTimeOut+0x98>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019f4:	d102      	bne.n	80019fc <xTaskCheckForTimeOut+0x3c>
			{
				xReturn = pdFALSE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	e026      	b.n	8001a4a <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <xTaskCheckForTimeOut+0x9c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d007      	beq.n	8001a18 <xTaskCheckForTimeOut+0x58>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d802      	bhi.n	8001a18 <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 8001a12:	2301      	movs	r3, #1
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	e018      	b.n	8001a4a <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	68ba      	ldr	r2, [r7, #8]
 8001a1e:	1ad2      	subs	r2, r2, r3
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d20e      	bcs.n	8001a46 <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6859      	ldr	r1, [r3, #4]
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	1acb      	subs	r3, r1, r3
 8001a34:	441a      	add	r2, r3
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff ffa6 	bl	800198c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	e001      	b.n	8001a4a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
 8001a46:	2301      	movs	r3, #1
 8001a48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001a4a:	f000 ff6d 	bl	8002928 <vPortExitCritical>

	return xReturn;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20000558 	.word	0x20000558
 8001a5c:	20000570 	.word	0x20000570

08001a60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001a64:	4b03      	ldr	r3, [pc, #12]	; (8001a74 <vTaskMissedYield+0x14>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	601a      	str	r2, [r3, #0]
}
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	2000056c 	.word	0x2000056c

08001a78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 8001a80:	f000 f892 	bl	8001ba8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1U )
 8001a84:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <prvIdleTask+0x20>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d901      	bls.n	8001a90 <prvIdleTask+0x18>
			{
				taskYIELD();
 8001a8c:	f000 ff2c 	bl	80028e8 <vPortYield>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8001a90:	f7ff fa44 	bl	8000f1c <vApplicationIdleHook>
				}
				( void ) xTaskResumeAll();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8001a94:	e7f4      	b.n	8001a80 <prvIdleTask+0x8>
 8001a96:	bf00      	nop
 8001a98:	20000480 	.word	0x20000480

08001a9c <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
 8001aa8:	603b      	str	r3, [r7, #0]
unsigned portBASE_TYPE x;

	/* Store the task name in the TCB. */
	for( x = ( unsigned portBASE_TYPE ) 0; x < ( unsigned portBASE_TYPE ) configMAX_TASK_NAME_LEN; x++ )
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	e012      	b.n	8001ad6 <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	781a      	ldrb	r2, [r3, #0]
 8001ab8:	68f9      	ldr	r1, [r7, #12]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	440b      	add	r3, r1
 8001abe:	3330      	adds	r3, #48	; 0x30
 8001ac0:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001ac2:	68ba      	ldr	r2, [r7, #8]
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d100      	bne.n	8001ad0 <prvInitialiseTCBVariables+0x34>
		{
			break;
 8001ace:	e005      	b.n	8001adc <prvInitialiseTCBVariables+0x40>
static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
unsigned portBASE_TYPE x;

	/* Store the task name in the TCB. */
	for( x = ( unsigned portBASE_TYPE ) 0; x < ( unsigned portBASE_TYPE ) configMAX_TASK_NAME_LEN; x++ )
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	2b09      	cmp	r3, #9
 8001ada:	d9e9      	bls.n	8001ab0 <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = ( signed char ) '\0';
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( unsigned portBASE_TYPE ) configMAX_PRIORITIES )
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d901      	bls.n	8001aee <prvInitialiseTCBVariables+0x52>
	{
		uxPriority = ( unsigned portBASE_TYPE ) configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 8001aea:	2304      	movs	r3, #4
 8001aec:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	3304      	adds	r3, #4
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 fda0 	bl	8002644 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	3318      	adds	r3, #24
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 fd9b 	bl	8002644 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f1c3 0205 	rsb	r2, r3, #5
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop

08001b2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < ( unsigned portBASE_TYPE ) configMAX_PRIORITIES; uxPriority++ )
 8001b32:	2300      	movs	r3, #0
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	e00c      	b.n	8001b52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4a11      	ldr	r2, [pc, #68]	; (8001b88 <prvInitialiseTaskLists+0x5c>)
 8001b44:	4413      	add	r3, r2
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 fd5c 	bl	8002604 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < ( unsigned portBASE_TYPE ) configMAX_PRIORITIES; uxPriority++ )
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	607b      	str	r3, [r7, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	d9ef      	bls.n	8001b38 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8001b58:	480c      	ldr	r0, [pc, #48]	; (8001b8c <prvInitialiseTaskLists+0x60>)
 8001b5a:	f000 fd53 	bl	8002604 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001b5e:	480c      	ldr	r0, [pc, #48]	; (8001b90 <prvInitialiseTaskLists+0x64>)
 8001b60:	f000 fd50 	bl	8002604 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001b64:	480b      	ldr	r0, [pc, #44]	; (8001b94 <prvInitialiseTaskLists+0x68>)
 8001b66:	f000 fd4d 	bl	8002604 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001b6a:	480b      	ldr	r0, [pc, #44]	; (8001b98 <prvInitialiseTaskLists+0x6c>)
 8001b6c:	f000 fd4a 	bl	8002604 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001b70:	480a      	ldr	r0, [pc, #40]	; (8001b9c <prvInitialiseTaskLists+0x70>)
 8001b72:	f000 fd47 	bl	8002604 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001b76:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <prvInitialiseTaskLists+0x74>)
 8001b78:	4a04      	ldr	r2, [pc, #16]	; (8001b8c <prvInitialiseTaskLists+0x60>)
 8001b7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <prvInitialiseTaskLists+0x78>)
 8001b7e:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <prvInitialiseTaskLists+0x64>)
 8001b80:	601a      	str	r2, [r3, #0]
}
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000480 	.word	0x20000480
 8001b8c:	200004e4 	.word	0x200004e4
 8001b90:	200004f8 	.word	0x200004f8
 8001b94:	20000514 	.word	0x20000514
 8001b98:	20000528 	.word	0x20000528
 8001b9c:	20000540 	.word	0x20000540
 8001ba0:	2000050c 	.word	0x2000050c
 8001ba4:	20000510 	.word	0x20000510

08001ba8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8001bae:	e028      	b.n	8001c02 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8001bb0:	f7ff fc3c 	bl	800142c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001bb4:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <prvCheckTasksWaitingTermination+0x68>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	bf14      	ite	ne
 8001bbc:	2300      	movne	r3, #0
 8001bbe:	2301      	moveq	r3, #1
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	607b      	str	r3, [r7, #4]
			( void ) xTaskResumeAll();
 8001bc4:	f7ff fc40 	bl	8001448 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d119      	bne.n	8001c02 <prvCheckTasksWaitingTermination+0x5a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 8001bce:	f000 fe9b 	bl	8002908 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001bd2:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <prvCheckTasksWaitingTermination+0x68>)
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 fd98 	bl	8002714 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <prvCheckTasksWaitingTermination+0x6c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	1e5a      	subs	r2, r3, #1
 8001bea:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <prvCheckTasksWaitingTermination+0x6c>)
 8001bec:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 8001bee:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <prvCheckTasksWaitingTermination+0x70>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	1e5a      	subs	r2, r3, #1
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <prvCheckTasksWaitingTermination+0x70>)
 8001bf6:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 8001bf8:	f000 fe96 	bl	8002928 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8001bfc:	6838      	ldr	r0, [r7, #0]
 8001bfe:	f000 f875 	bl	8001cec <prvDeleteTCB>
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8001c02:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <prvCheckTasksWaitingTermination+0x70>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1d2      	bne.n	8001bb0 <prvCheckTasksWaitingTermination+0x8>
				prvDeleteTCB( pxTCB );
			}
		}
	}
	#endif /* vTaskDelete */
}
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000528 	.word	0x20000528
 8001c14:	20000554 	.word	0x20000554
 8001c18:	2000053c 	.word	0x2000053c

08001c1c <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8001c24:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <prvAddCurrentTaskToDelayedList+0x58>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <prvAddCurrentTaskToDelayedList+0x5c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d209      	bcs.n	8001c4a <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8001c36:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <prvAddCurrentTaskToDelayedList+0x60>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <prvAddCurrentTaskToDelayedList+0x58>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	3304      	adds	r3, #4
 8001c40:	4610      	mov	r0, r2
 8001c42:	4619      	mov	r1, r3
 8001c44:	f000 fd2e 	bl	80026a4 <vListInsert>
 8001c48:	e010      	b.n	8001c6c <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <prvAddCurrentTaskToDelayedList+0x64>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <prvAddCurrentTaskToDelayedList+0x58>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	3304      	adds	r3, #4
 8001c54:	4610      	mov	r0, r2
 8001c56:	4619      	mov	r1, r3
 8001c58:	f000 fd24 	bl	80026a4 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8001c5c:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <prvAddCurrentTaskToDelayedList+0x68>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d202      	bcs.n	8001c6c <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
 8001c66:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <prvAddCurrentTaskToDelayedList+0x68>)
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	2000047c 	.word	0x2000047c
 8001c78:	20000558 	.word	0x20000558
 8001c7c:	20000510 	.word	0x20000510
 8001c80:	2000050c 	.word	0x2000050c
 8001c84:	20000014 	.word	0x20000014

08001c88 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	6039      	str	r1, [r7, #0]
 8001c92:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 8001c94:	204c      	movs	r0, #76	; 0x4c
 8001c96:	f001 fb37 	bl	8003308 <pvPortMalloc>
 8001c9a:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d01f      	beq.n	8001ce2 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d106      	bne.n	8001cb6 <prvAllocateTCBAndStack+0x2e>
 8001ca8:	88fb      	ldrh	r3, [r7, #6]
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f001 fb2b 	bl	8003308 <pvPortMalloc>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	e000      	b.n	8001cb8 <prvAllocateTCBAndStack+0x30>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d105      	bne.n	8001cd0 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f001 fbab 	bl	8003420 <vPortFree>
			pxNewTCB = NULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	e008      	b.n	8001ce2 <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4610      	mov	r0, r2
 8001cda:	21a5      	movs	r1, #165	; 0xa5
 8001cdc:	461a      	mov	r2, r3
 8001cde:	f003 ff61 	bl	8005ba4 <memset>
		}
	}

	return pxNewTCB;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f001 fb91 	bl	8003420 <vPortFree>
		vPortFree( pxTCB );
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f001 fb8e 	bl	8003420 <vPortFree>
	}
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop

08001d0c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8001d12:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <xTaskGetCurrentTaskHandle+0x1c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	607b      	str	r3, [r7, #4]

		return xReturn;
 8001d18:	687b      	ldr	r3, [r7, #4]
	}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	2000047c 	.word	0x2000047c

08001d2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001d32:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <xTaskGetSchedulerState+0x34>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d102      	bne.n	8001d40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	607b      	str	r3, [r7, #4]
 8001d3e:	e008      	b.n	8001d52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8001d40:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <xTaskGetSchedulerState+0x38>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d102      	bne.n	8001d4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	e001      	b.n	8001d52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001d52:	687b      	ldr	r3, [r7, #4]
	}
 8001d54:	4618      	mov	r0, r3
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	20000560 	.word	0x20000560
 8001d64:	20000564 	.word	0x20000564

08001d68 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle const pxMutexHolder )
	{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d046      	beq.n	8001e08 <vTaskPriorityInherit+0xa0>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d7e:	4b24      	ldr	r3, [pc, #144]	; (8001e10 <vTaskPriorityInherit+0xa8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d23f      	bcs.n	8001e08 <vTaskPriorityInherit+0xa0>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d88:	4b21      	ldr	r3, [pc, #132]	; (8001e10 <vTaskPriorityInherit+0xa8>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8e:	f1c3 0205 	rsb	r2, r3, #5
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6959      	ldr	r1, [r3, #20]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4a1b      	ldr	r2, [pc, #108]	; (8001e14 <vTaskPriorityInherit+0xac>)
 8001da8:	4413      	add	r3, r2
 8001daa:	4299      	cmp	r1, r3
 8001dac:	d101      	bne.n	8001db2 <vTaskPriorityInherit+0x4a>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <vTaskPriorityInherit+0x4c>
 8001db2:	2300      	movs	r3, #0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d022      	beq.n	8001dfe <vTaskPriorityInherit+0x96>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	3304      	adds	r3, #4
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f000 fca9 	bl	8002714 <uxListRemove>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001dc2:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <vTaskPriorityInherit+0xa8>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dd0:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <vTaskPriorityInherit+0xb0>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d903      	bls.n	8001de0 <vTaskPriorityInherit+0x78>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ddc:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <vTaskPriorityInherit+0xb0>)
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de4:	4613      	mov	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4a09      	ldr	r2, [pc, #36]	; (8001e14 <vTaskPriorityInherit+0xac>)
 8001dee:	441a      	add	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	3304      	adds	r3, #4
 8001df4:	4610      	mov	r0, r2
 8001df6:	4619      	mov	r1, r3
 8001df8:	f000 fc30 	bl	800265c <vListInsertEnd>
 8001dfc:	e004      	b.n	8001e08 <vTaskPriorityInherit+0xa0>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001dfe:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <vTaskPriorityInherit+0xa8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	2000047c 	.word	0x2000047c
 8001e14:	20000480 	.word	0x20000480
 8001e18:	2000055c 	.word	0x2000055c

08001e1c <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle const pxMutexHolder )
	{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d02c      	beq.n	8001e88 <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d026      	beq.n	8001e88 <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 fc68 	bl	8002714 <uxListRemove>
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e50:	f1c3 0205 	rsb	r2, r3, #5
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyList( pxTCB );
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <vTaskPriorityDisinherit+0x74>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d903      	bls.n	8001e6c <vTaskPriorityDisinherit+0x50>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <vTaskPriorityDisinherit+0x74>)
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4a06      	ldr	r2, [pc, #24]	; (8001e94 <vTaskPriorityDisinherit+0x78>)
 8001e7a:	441a      	add	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	3304      	adds	r3, #4
 8001e80:	4610      	mov	r0, r2
 8001e82:	4619      	mov	r1, r3
 8001e84:	f000 fbea 	bl	800265c <vListInsertEnd>
			}
		}
	}
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	2000055c 	.word	0x2000055c
 8001e94:	20000480 	.word	0x20000480

08001e98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle xQueue, portBASE_TYPE xNewQueue )
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d102      	bne.n	8001eb2 <xQueueGenericReset+0x1a>
 8001eac:	f000 fd4e 	bl	800294c <ulPortSetInterruptMask>
 8001eb0:	e7fe      	b.n	8001eb0 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 8001eb2:	f000 fd29 	bl	8002908 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ebe:	68f9      	ldr	r1, [r7, #12]
 8001ec0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001ec2:	fb01 f303 	mul.w	r3, r1, r3
 8001ec6:	441a      	add	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	68f9      	ldr	r1, [r7, #12]
 8001ee6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001ee8:	fb01 f303 	mul.w	r3, r1, r3
 8001eec:	441a      	add	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ef8:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f00:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10e      	bne.n	8001f26 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d014      	beq.n	8001f3a <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	3310      	adds	r3, #16
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff fcdd 	bl	80018d4 <xTaskRemoveFromEventList>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d10c      	bne.n	8001f3a <xQueueGenericReset+0xa2>
				{
					portYIELD_WITHIN_API();
 8001f20:	f000 fce2 	bl	80028e8 <vPortYield>
 8001f24:	e009      	b.n	8001f3a <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	3310      	adds	r3, #16
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 fb6a 	bl	8002604 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	3324      	adds	r3, #36	; 0x24
 8001f34:	4618      	mov	r0, r3
 8001f36:	f000 fb65 	bl	8002604 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001f3a:	f000 fcf5 	bl	8002928 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001f3e:	2301      	movs	r3, #1
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b088      	sub	sp, #32
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	4613      	mov	r3, r2
 8001f54:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d02a      	beq.n	8001fb6 <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 8001f60:	2050      	movs	r0, #80	; 0x50
 8001f62:	f001 f9d1 	bl	8003308 <pvPortMalloc>
 8001f66:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d023      	beq.n	8001fb6 <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	fb02 f303 	mul.w	r3, r2, r3
 8001f76:	3301      	adds	r3, #1
 8001f78:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 8001f7a:	6978      	ldr	r0, [r7, #20]
 8001f7c:	f001 f9c4 	bl	8003308 <pvPortMalloc>
 8001f80:	4602      	mov	r2, r0
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d010      	beq.n	8001fb0 <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001f9a:	69b8      	ldr	r0, [r7, #24]
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	f7ff ff7b 	bl	8001e98 <xQueueGenericReset>

				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	79fa      	ldrb	r2, [r7, #7]
 8001fa6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	61fb      	str	r3, [r7, #28]
 8001fae:	e002      	b.n	8001fb6 <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 8001fb0:	69b8      	ldr	r0, [r7, #24]
 8001fb2:	f001 fa35 	bl	8003420 <vPortFree>
			}
		}
	}

	configASSERT( xReturn );
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d102      	bne.n	8001fc2 <xQueueGenericCreate+0x7a>
 8001fbc:	f000 fcc6 	bl	800294c <ulPortSetInterruptMask>
 8001fc0:	e7fe      	b.n	8001fc0 <xQueueGenericCreate+0x78>

	return xReturn;
 8001fc2:	69fb      	ldr	r3, [r7, #28]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3720      	adds	r7, #32
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
 8001fd8:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d102      	bne.n	8001fee <xQueueGenericSend+0x22>
 8001fe8:	f000 fcb0 	bl	800294c <ulPortSetInterruptMask>
 8001fec:	e7fe      	b.n	8001fec <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d103      	bne.n	8001ffc <xQueueGenericSend+0x30>
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <xQueueGenericSend+0x34>
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e000      	b.n	8002002 <xQueueGenericSend+0x36>
 8002000:	2300      	movs	r3, #0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d102      	bne.n	800200c <xQueueGenericSend+0x40>
 8002006:	f000 fca1 	bl	800294c <ulPortSetInterruptMask>
 800200a:	e7fe      	b.n	800200a <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d103      	bne.n	800201a <xQueueGenericSend+0x4e>
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002016:	2b01      	cmp	r3, #1
 8002018:	d101      	bne.n	800201e <xQueueGenericSend+0x52>
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <xQueueGenericSend+0x54>
 800201e:	2300      	movs	r3, #0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d102      	bne.n	800202a <xQueueGenericSend+0x5e>
 8002024:	f000 fc92 	bl	800294c <ulPortSetInterruptMask>
 8002028:	e7fe      	b.n	8002028 <xQueueGenericSend+0x5c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800202a:	f000 fc6d 	bl	8002908 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002036:	429a      	cmp	r2, r3
 8002038:	d302      	bcc.n	8002040 <xQueueGenericSend+0x74>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	2b02      	cmp	r3, #2
 800203e:	d116      	bne.n	800206e <xQueueGenericSend+0xa2>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002040:	69b8      	ldr	r0, [r7, #24]
 8002042:	68b9      	ldr	r1, [r7, #8]
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	f000 f9a9 	bl	800239c <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	2b00      	cmp	r3, #0
 8002050:	d009      	beq.n	8002066 <xQueueGenericSend+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	3324      	adds	r3, #36	; 0x24
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff fc3c 	bl	80018d4 <xTaskRemoveFromEventList>
 800205c:	4603      	mov	r3, r0
 800205e:	2b01      	cmp	r3, #1
 8002060:	d101      	bne.n	8002066 <xQueueGenericSend+0x9a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							portYIELD_WITHIN_API();
 8002062:	f000 fc41 	bl	80028e8 <vPortYield>
						}
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002066:	f000 fc5f 	bl	8002928 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 800206a:	2301      	movs	r3, #1
 800206c:	e059      	b.n	8002122 <xQueueGenericSend+0x156>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d103      	bne.n	800207c <xQueueGenericSend+0xb0>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002074:	f000 fc58 	bl	8002928 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002078:	2300      	movs	r3, #0
 800207a:	e052      	b.n	8002122 <xQueueGenericSend+0x156>
				}
				else if( xEntryTimeSet == pdFALSE )
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d106      	bne.n	8002090 <xQueueGenericSend+0xc4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8002082:	f107 0310 	add.w	r3, r7, #16
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff fc80 	bl	800198c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800208c:	2301      	movs	r3, #1
 800208e:	61fb      	str	r3, [r7, #28]
				{
					/* Entry time was already set. */
				}
			}
		}
		taskEXIT_CRITICAL();
 8002090:	f000 fc4a 	bl	8002928 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002094:	f7ff f9ca 	bl	800142c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002098:	f000 fc36 	bl	8002908 <vPortEnterCritical>
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020a4:	d102      	bne.n	80020ac <xQueueGenericSend+0xe0>
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	2200      	movs	r2, #0
 80020aa:	645a      	str	r2, [r3, #68]	; 0x44
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020b4:	d102      	bne.n	80020bc <xQueueGenericSend+0xf0>
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	2200      	movs	r2, #0
 80020ba:	649a      	str	r2, [r3, #72]	; 0x48
 80020bc:	f000 fc34 	bl	8002928 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80020c0:	f107 0210 	add.w	r2, r7, #16
 80020c4:	1d3b      	adds	r3, r7, #4
 80020c6:	4610      	mov	r0, r2
 80020c8:	4619      	mov	r1, r3
 80020ca:	f7ff fc79 	bl	80019c0 <xTaskCheckForTimeOut>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d11e      	bne.n	8002112 <xQueueGenericSend+0x146>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80020d4:	69b8      	ldr	r0, [r7, #24]
 80020d6:	f000 fa51 	bl	800257c <prvIsQueueFull>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d012      	beq.n	8002106 <xQueueGenericSend+0x13a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	f103 0210 	add.w	r2, r3, #16
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4610      	mov	r0, r2
 80020ea:	4619      	mov	r1, r3
 80020ec:	f7ff fb94 	bl	8001818 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80020f0:	69b8      	ldr	r0, [r7, #24]
 80020f2:	f000 f9e1 	bl	80024b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80020f6:	f7ff f9a7 	bl	8001448 <xTaskResumeAll>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10f      	bne.n	8002120 <xQueueGenericSend+0x154>
				{
					portYIELD_WITHIN_API();
 8002100:	f000 fbf2 	bl	80028e8 <vPortYield>
 8002104:	e00c      	b.n	8002120 <xQueueGenericSend+0x154>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002106:	69b8      	ldr	r0, [r7, #24]
 8002108:	f000 f9d6 	bl	80024b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800210c:	f7ff f99c 	bl	8001448 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 8002110:	e78b      	b.n	800202a <xQueueGenericSend+0x5e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002112:	69b8      	ldr	r0, [r7, #24]
 8002114:	f000 f9d0 	bl	80024b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002118:	f7ff f996 	bl	8001448 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800211c:	2300      	movs	r3, #0
 800211e:	e000      	b.n	8002122 <xQueueGenericSend+0x156>
		}
	}
 8002120:	e783      	b.n	800202a <xQueueGenericSend+0x5e>
}
 8002122:	4618      	mov	r0, r3
 8002124:	3720      	adds	r7, #32
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop

0800212c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle xQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d102      	bne.n	800214a <xQueueGenericSendFromISR+0x1e>
 8002144:	f000 fc02 	bl	800294c <ulPortSetInterruptMask>
 8002148:	e7fe      	b.n	8002148 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d103      	bne.n	8002158 <xQueueGenericSendFromISR+0x2c>
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <xQueueGenericSendFromISR+0x30>
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <xQueueGenericSendFromISR+0x32>
 800215c:	2300      	movs	r3, #0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d102      	bne.n	8002168 <xQueueGenericSendFromISR+0x3c>
 8002162:	f000 fbf3 	bl	800294c <ulPortSetInterruptMask>
 8002166:	e7fe      	b.n	8002166 <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	2b02      	cmp	r3, #2
 800216c:	d103      	bne.n	8002176 <xQueueGenericSendFromISR+0x4a>
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <xQueueGenericSendFromISR+0x4e>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <xQueueGenericSendFromISR+0x50>
 800217a:	2300      	movs	r3, #0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d102      	bne.n	8002186 <xQueueGenericSendFromISR+0x5a>
 8002180:	f000 fbe4 	bl	800294c <ulPortSetInterruptMask>
 8002184:	e7fe      	b.n	8002184 <xQueueGenericSendFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002186:	f000 fc4f 	bl	8002a28 <vPortValidateInterruptPriority>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800218a:	f000 fbdf 	bl	800294c <ulPortSetInterruptMask>
 800218e:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002198:	429a      	cmp	r2, r3
 800219a:	d302      	bcc.n	80021a2 <xQueueGenericSendFromISR+0x76>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d124      	bne.n	80021ec <xQueueGenericSendFromISR+0xc0>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80021a2:	69b8      	ldr	r0, [r7, #24]
 80021a4:	68b9      	ldr	r1, [r7, #8]
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	f000 f8f8 	bl	800239c <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021b4:	d112      	bne.n	80021dc <xQueueGenericSendFromISR+0xb0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d013      	beq.n	80021e6 <xQueueGenericSendFromISR+0xba>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	3324      	adds	r3, #36	; 0x24
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fb86 	bl	80018d4 <xTaskRemoveFromEventList>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00b      	beq.n	80021e6 <xQueueGenericSendFromISR+0xba>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d008      	beq.n	80021e6 <xQueueGenericSendFromISR+0xba>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	e004      	b.n	80021e6 <xQueueGenericSendFromISR+0xba>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e0:	1c5a      	adds	r2, r3, #1
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 80021e6:	2301      	movs	r3, #1
 80021e8:	61fb      	str	r3, [r7, #28]
 80021ea:	e001      	b.n	80021f0 <xQueueGenericSendFromISR+0xc4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80021f0:	6978      	ldr	r0, [r7, #20]
 80021f2:	f000 fbb5 	bl	8002960 <vPortClearInterruptMask>

	return xReturn;
 80021f6:	69fb      	ldr	r3, [r7, #28]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3720      	adds	r7, #32
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle xQueue, const void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08a      	sub	sp, #40	; 0x28
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
 800220c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 800220e:	2300      	movs	r3, #0
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8002216:	6a3b      	ldr	r3, [r7, #32]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d102      	bne.n	8002222 <xQueueGenericReceive+0x22>
 800221c:	f000 fb96 	bl	800294c <ulPortSetInterruptMask>
 8002220:	e7fe      	b.n	8002220 <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d103      	bne.n	8002230 <xQueueGenericReceive+0x30>
 8002228:	6a3b      	ldr	r3, [r7, #32]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <xQueueGenericReceive+0x34>
 8002230:	2301      	movs	r3, #1
 8002232:	e000      	b.n	8002236 <xQueueGenericReceive+0x36>
 8002234:	2300      	movs	r3, #0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d102      	bne.n	8002240 <xQueueGenericReceive+0x40>
 800223a:	f000 fb87 	bl	800294c <ulPortSetInterruptMask>
 800223e:	e7fe      	b.n	800223e <xQueueGenericReceive+0x3e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002240:	f000 fb62 	bl	8002908 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 8002244:	6a3b      	ldr	r3, [r7, #32]
 8002246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002248:	2b00      	cmp	r3, #0
 800224a:	d03b      	beq.n	80022c4 <xQueueGenericReceive+0xc4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002252:	6a38      	ldr	r0, [r7, #32]
 8002254:	68b9      	ldr	r1, [r7, #8]
 8002256:	f000 f909 	bl	800246c <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d11c      	bne.n	800229a <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002264:	1e5a      	subs	r2, r3, #1
 8002266:	6a3b      	ldr	r3, [r7, #32]
 8002268:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800226a:	6a3b      	ldr	r3, [r7, #32]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d104      	bne.n	800227c <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( signed char * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as xTaskHandle is a typedef. */
 8002272:	f7ff fd4b 	bl	8001d0c <xTaskGetCurrentTaskHandle>
 8002276:	4602      	mov	r2, r0
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d01b      	beq.n	80022bc <xQueueGenericReceive+0xbc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	3310      	adds	r3, #16
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fb23 	bl	80018d4 <xTaskRemoveFromEventList>
 800228e:	4603      	mov	r3, r0
 8002290:	2b01      	cmp	r3, #1
 8002292:	d113      	bne.n	80022bc <xQueueGenericReceive+0xbc>
						{
							portYIELD_WITHIN_API();
 8002294:	f000 fb28 	bl	80028e8 <vPortYield>
 8002298:	e010      	b.n	80022bc <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	69fa      	ldr	r2, [r7, #28]
 800229e:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d009      	beq.n	80022bc <xQueueGenericReceive+0xbc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	3324      	adds	r3, #36	; 0x24
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff fb11 	bl	80018d4 <xTaskRemoveFromEventList>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <xQueueGenericReceive+0xbc>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 80022b8:	f000 fb16 	bl	80028e8 <vPortYield>
						}
					}
				}

				taskEXIT_CRITICAL();
 80022bc:	f000 fb34 	bl	8002928 <vPortExitCritical>
				return pdPASS;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e066      	b.n	8002392 <xQueueGenericReceive+0x192>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d103      	bne.n	80022d2 <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80022ca:	f000 fb2d 	bl	8002928 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80022ce:	2300      	movs	r3, #0
 80022d0:	e05f      	b.n	8002392 <xQueueGenericReceive+0x192>
				}
				else if( xEntryTimeSet == pdFALSE )
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d106      	bne.n	80022e6 <xQueueGenericReceive+0xe6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80022d8:	f107 0314 	add.w	r3, r7, #20
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff fb55 	bl	800198c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80022e2:	2301      	movs	r3, #1
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
				{
					/* Entry time was already set. */
				}
			}
		}
		taskEXIT_CRITICAL();
 80022e6:	f000 fb1f 	bl	8002928 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80022ea:	f7ff f89f 	bl	800142c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80022ee:	f000 fb0b 	bl	8002908 <vPortEnterCritical>
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022fa:	d102      	bne.n	8002302 <xQueueGenericReceive+0x102>
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	2200      	movs	r2, #0
 8002300:	645a      	str	r2, [r3, #68]	; 0x44
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002306:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800230a:	d102      	bne.n	8002312 <xQueueGenericReceive+0x112>
 800230c:	6a3b      	ldr	r3, [r7, #32]
 800230e:	2200      	movs	r2, #0
 8002310:	649a      	str	r2, [r3, #72]	; 0x48
 8002312:	f000 fb09 	bl	8002928 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002316:	f107 0214 	add.w	r2, r7, #20
 800231a:	1d3b      	adds	r3, r7, #4
 800231c:	4610      	mov	r0, r2
 800231e:	4619      	mov	r1, r3
 8002320:	f7ff fb4e 	bl	80019c0 <xTaskCheckForTimeOut>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d12b      	bne.n	8002382 <xQueueGenericReceive+0x182>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800232a:	6a38      	ldr	r0, [r7, #32]
 800232c:	f000 f910 	bl	8002550 <prvIsQueueEmpty>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d01f      	beq.n	8002376 <xQueueGenericReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d108      	bne.n	8002350 <xQueueGenericReceive+0x150>
					{
						portENTER_CRITICAL();
 800233e:	f000 fae3 	bl	8002908 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fd0e 	bl	8001d68 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 800234c:	f000 faec 	bl	8002928 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4610      	mov	r0, r2
 800235a:	4619      	mov	r1, r3
 800235c:	f7ff fa5c 	bl	8001818 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002360:	6a38      	ldr	r0, [r7, #32]
 8002362:	f000 f8a9 	bl	80024b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002366:	f7ff f86f 	bl	8001448 <xTaskResumeAll>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10f      	bne.n	8002390 <xQueueGenericReceive+0x190>
				{
					portYIELD_WITHIN_API();
 8002370:	f000 faba 	bl	80028e8 <vPortYield>
 8002374:	e00c      	b.n	8002390 <xQueueGenericReceive+0x190>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002376:	6a38      	ldr	r0, [r7, #32]
 8002378:	f000 f89e 	bl	80024b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800237c:	f7ff f864 	bl	8001448 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 8002380:	e75e      	b.n	8002240 <xQueueGenericReceive+0x40>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8002382:	6a38      	ldr	r0, [r7, #32]
 8002384:	f000 f898 	bl	80024b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002388:	f7ff f85e 	bl	8001448 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 800238c:	2300      	movs	r3, #0
 800238e:	e000      	b.n	8002392 <xQueueGenericReceive+0x192>
		}
	}
 8002390:	e756      	b.n	8002240 <xQueueGenericReceive+0x40>
}
 8002392:	4618      	mov	r0, r3
 8002394:	3728      	adds	r7, #40	; 0x28
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop

0800239c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10c      	bne.n	80023ca <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d151      	bne.n	800245c <prvCopyDataToQueue+0xc0>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff fd2d 	bl	8001e1c <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	605a      	str	r2, [r3, #4]
 80023c8:	e048      	b.n	800245c <prvCopyDataToQueue+0xc0>
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d11a      	bne.n	8002406 <prvCopyDataToQueue+0x6a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	4610      	mov	r0, r2
 80023da:	68b9      	ldr	r1, [r7, #8]
 80023dc:	461a      	mov	r2, r3
 80023de:	f7fd fefd 	bl	80001dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	441a      	add	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d32f      	bcc.n	800245c <prvCopyDataToQueue+0xc0>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	e02a      	b.n	800245c <prvCopyDataToQueue+0xc0>
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	4610      	mov	r0, r2
 8002410:	68b9      	ldr	r1, [r7, #8]
 8002412:	461a      	mov	r2, r3
 8002414:	f7fd fee2 	bl	80001dc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	425b      	negs	r3, r3
 8002422:	441a      	add	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	68da      	ldr	r2, [r3, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d207      	bcs.n	8002444 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	425b      	negs	r3, r3
 800243e:	441a      	add	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	60da      	str	r2, [r3, #12]
		}

		if( xPosition == queueOVERWRITE )
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b02      	cmp	r3, #2
 8002448:	d108      	bne.n	800245c <prvCopyDataToQueue+0xc0>
		{
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244e:	2b00      	cmp	r3, #0
 8002450:	d004      	beq.n	800245c <prvCopyDataToQueue+0xc0>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002456:	1e5a      	subs	r2, r3, #1
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void * const pvBuffer )
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d019      	beq.n	80024b2 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	441a      	add	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68da      	ldr	r2, [r3, #12]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	429a      	cmp	r2, r3
 8002496:	d303      	bcc.n	80024a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	60da      	str	r2, [r3, #12]
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	6838      	ldr	r0, [r7, #0]
 80024aa:	4611      	mov	r1, r2
 80024ac:	461a      	mov	r2, r3
 80024ae:	f7fd fe95 	bl	80001dc <memcpy>
	}
}
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQUEUE *pxQueue )
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80024c0:	f000 fa22 	bl	8002908 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80024c4:	e014      	b.n	80024f0 <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00a      	beq.n	80024e4 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	3324      	adds	r3, #36	; 0x24
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff f9fe 	bl	80018d4 <xTaskRemoveFromEventList>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <prvUnlockQueue+0x2e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 80024de:	f7ff fabf 	bl	8001a60 <vTaskMissedYield>
 80024e2:	e000      	b.n	80024e6 <prvUnlockQueue+0x2e>
					}
				}
				else
				{
					break;
 80024e4:	e008      	b.n	80024f8 <prvUnlockQueue+0x40>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ea:	1e5a      	subs	r2, r3, #1
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	dce6      	bgt.n	80024c6 <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024fe:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8002500:	f000 fa12 	bl	8002928 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002504:	f000 fa00 	bl	8002908 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8002508:	e014      	b.n	8002534 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00f      	beq.n	8002532 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3310      	adds	r3, #16
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff f9dc 	bl	80018d4 <xTaskRemoveFromEventList>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
 8002522:	f7ff fa9d 	bl	8001a60 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	1e5a      	subs	r2, r3, #1
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	645a      	str	r2, [r3, #68]	; 0x44
 8002530:	e000      	b.n	8002534 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
 8002532:	e003      	b.n	800253c <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002538:	2b00      	cmp	r3, #0
 800253a:	dce6      	bgt.n	800250a <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002542:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002544:	f000 f9f0 	bl	8002928 <vPortExitCritical>
}
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop

08002550 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQUEUE *pxQueue )
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8002558:	f000 f9d6 	bl	8002908 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE )  0 )
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002560:	2b00      	cmp	r3, #0
 8002562:	d102      	bne.n	800256a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002564:	2301      	movs	r3, #1
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	e001      	b.n	800256e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800256e:	f000 f9db 	bl	8002928 <vPortExitCritical>

	return xReturn;
 8002572:	68fb      	ldr	r3, [r7, #12]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQUEUE *pxQueue )
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8002584:	f000 f9c0 	bl	8002908 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002590:	429a      	cmp	r2, r3
 8002592:	d102      	bne.n	800259a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002594:	2301      	movs	r3, #1
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	e001      	b.n	800259e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800259e:	f000 f9c3 	bl	8002928 <vPortExitCritical>

	return xReturn;
 80025a2:	68fb      	ldr	r3, [r7, #12]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( xQueueHandle xQueue, portTickType xTicksToWait )
	{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
	xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80025ba:	f000 f9a5 	bl	8002908 <vPortEnterCritical>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025c6:	d102      	bne.n	80025ce <vQueueWaitForMessageRestricted+0x22>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	645a      	str	r2, [r3, #68]	; 0x44
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025d6:	d102      	bne.n	80025de <vQueueWaitForMessageRestricted+0x32>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	649a      	str	r2, [r3, #72]	; 0x48
 80025de:	f000 f9a3 	bl	8002928 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d105      	bne.n	80025f6 <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	3324      	adds	r3, #36	; 0x24
 80025ee:	4618      	mov	r0, r3
 80025f0:	6839      	ldr	r1, [r7, #0]
 80025f2:	f7ff f947 	bl	8001884 <vTaskPlaceOnEventListRestricted>
		}
		prvUnlockQueue( pxQueue );
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f7ff ff5e 	bl	80024b8 <prvUnlockQueue>
	}
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop

08002604 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList * const pxList )
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f103 0208 	add.w	r2, r3, #8
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800261c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f103 0208 	add.w	r2, r3, #8
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f103 0208 	add.w	r2, r3, #8
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
}
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop

08002644 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem * const pxItem )
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	611a      	str	r2, [r3, #16]
}
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList * const pxList, xListItem * const pxNewListItem )
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
xListItem * pxIndex;

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry. */
	pxIndex = pxList->pxIndex;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	601a      	str	r2, [r3, #0]
}
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop

080026a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList * const pxList, xListItem * const pxNewListItem )
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026ba:	d103      	bne.n	80026c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	e00c      	b.n	80026de <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3308      	adds	r3, #8
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	e002      	b.n	80026d2 <vListInsert+0x2e>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d9f6      	bls.n	80026cc <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	601a      	str	r2, [r3, #0]
}
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem * const pxItemToRemove )
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6892      	ldr	r2, [r2, #8]
 8002724:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6852      	ldr	r2, [r2, #4]
 800272e:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	429a      	cmp	r2, r3
 800273e:	d103      	bne.n	8002748 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	1e5a      	subs	r2, r3, #1
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	3b04      	subs	r3, #4
 8002778:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002780:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	3b04      	subs	r3, #4
 8002786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	3b04      	subs	r3, #4
 8002792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) portTASK_RETURN_ADDRESS;	/* LR */
 8002794:	4a0c      	ldr	r2, [pc, #48]	; (80027c8 <pxPortInitialiseStack+0x60>)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	3b14      	subs	r3, #20
 800279e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	3b04      	subs	r3, #4
 80027aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f06f 0202 	mvn.w	r2, #2
 80027b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	3b20      	subs	r3, #32
 80027b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80027ba:	68fb      	ldr	r3, [r7, #12]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	080027cd 	.word	0x080027cd

080027cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80027d0:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <prvTaskExitError+0x1c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027d8:	d002      	beq.n	80027e0 <prvTaskExitError+0x14>
 80027da:	f000 f8b7 	bl	800294c <ulPortSetInterruptMask>
 80027de:	e7fe      	b.n	80027de <prvTaskExitError+0x12>
	portDISABLE_INTERRUPTS();
 80027e0:	f000 f8b4 	bl	800294c <ulPortSetInterruptMask>
	for( ;; );
 80027e4:	e7fe      	b.n	80027e4 <prvTaskExitError+0x18>
 80027e6:	bf00      	nop
 80027e8:	20000018 	.word	0x20000018

080027ec <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80027ec:	4b05      	ldr	r3, [pc, #20]	; (8002804 <pxCurrentTCBConst2>)
 80027ee:	6819      	ldr	r1, [r3, #0]
 80027f0:	6808      	ldr	r0, [r1, #0]
 80027f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027f6:	f380 8809 	msr	PSP, r0
 80027fa:	f04f 0000 	mov.w	r0, #0
 80027fe:	f380 8811 	msr	BASEPRI, r0
 8002802:	4770      	bx	lr

08002804 <pxCurrentTCBConst2>:
 8002804:	2000047c 	.word	0x2000047c

08002808 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002808:	4803      	ldr	r0, [pc, #12]	; (8002818 <prvPortStartFirstTask+0x10>)
 800280a:	6800      	ldr	r0, [r0, #0]
 800280c:	6800      	ldr	r0, [r0, #0]
 800280e:	f380 8808 	msr	MSP, r0
 8002812:	b662      	cpsie	i
 8002814:	df00      	svc	0
 8002816:	bf00      	nop
 8002818:	e000ed08 	.word	0xe000ed08

0800281c <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile unsigned long ulOriginalPriority;
		volatile char * const pcFirstUserPriorityRegister = ( volatile char * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002822:	4b2b      	ldr	r3, [pc, #172]	; (80028d0 <xPortStartScheduler+0xb4>)
 8002824:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pcFirstUserPriorityRegister;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	b2db      	uxtb	r3, r3
 800282c:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pcFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	22ff      	movs	r2, #255	; 0xff
 8002832:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pcFirstUserPriorityRegister;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	b2db      	uxtb	r3, r3
 800283a:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800283c:	79fb      	ldrb	r3, [r7, #7]
 800283e:	b2db      	uxtb	r3, r3
 8002840:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002844:	b2da      	uxtb	r2, r3
 8002846:	4b23      	ldr	r3, [pc, #140]	; (80028d4 <xPortStartScheduler+0xb8>)
 8002848:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800284a:	4b23      	ldr	r3, [pc, #140]	; (80028d8 <xPortStartScheduler+0xbc>)
 800284c:	2207      	movs	r2, #7
 800284e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002850:	e009      	b.n	8002866 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002852:	4b21      	ldr	r3, [pc, #132]	; (80028d8 <xPortStartScheduler+0xbc>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	1e5a      	subs	r2, r3, #1
 8002858:	4b1f      	ldr	r3, [pc, #124]	; (80028d8 <xPortStartScheduler+0xbc>)
 800285a:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( unsigned char ) 0x01;
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	b2db      	uxtb	r3, r3
 8002864:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	b2db      	uxtb	r3, r3
 800286a:	b2db      	uxtb	r3, r3
 800286c:	b25b      	sxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	dbef      	blt.n	8002852 <xPortStartScheduler+0x36>
			ucMaxPriorityValue <<= ( unsigned char ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002872:	4b19      	ldr	r3, [pc, #100]	; (80028d8 <xPortStartScheduler+0xbc>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	021a      	lsls	r2, r3, #8
 8002878:	4b17      	ldr	r3, [pc, #92]	; (80028d8 <xPortStartScheduler+0xbc>)
 800287a:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800287c:	4b16      	ldr	r3, [pc, #88]	; (80028d8 <xPortStartScheduler+0xbc>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002884:	4b14      	ldr	r3, [pc, #80]	; (80028d8 <xPortStartScheduler+0xbc>)
 8002886:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pcFirstUserPriorityRegister = ulOriginalPriority;
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	b2da      	uxtb	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002890:	4b12      	ldr	r3, [pc, #72]	; (80028dc <xPortStartScheduler+0xc0>)
 8002892:	4a12      	ldr	r2, [pc, #72]	; (80028dc <xPortStartScheduler+0xc0>)
 8002894:	6812      	ldr	r2, [r2, #0]
 8002896:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800289a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800289c:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <xPortStartScheduler+0xc0>)
 800289e:	4a0f      	ldr	r2, [pc, #60]	; (80028dc <xPortStartScheduler+0xc0>)
 80028a0:	6812      	ldr	r2, [r2, #0]
 80028a2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80028a6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80028a8:	f000 f89a 	bl	80029e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80028ac:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <xPortStartScheduler+0xc4>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80028b2:	f000 f8af 	bl	8002a14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80028b6:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <xPortStartScheduler+0xc8>)
 80028b8:	4a0a      	ldr	r2, [pc, #40]	; (80028e4 <xPortStartScheduler+0xc8>)
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80028c0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80028c2:	f7ff ffa1 	bl	8002808 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	e000e400 	.word	0xe000e400
 80028d4:	20000578 	.word	0x20000578
 80028d8:	2000057c 	.word	0x2000057c
 80028dc:	e000ed20 	.word	0xe000ed20
 80028e0:	20000018 	.word	0x20000018
 80028e4:	e000ef34 	.word	0xe000ef34

080028e8 <vPortYield>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80028ec:	4b05      	ldr	r3, [pc, #20]	; (8002904 <vPortYield+0x1c>)
 80028ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028f2:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 80028f4:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80028f8:	f3bf 8f6f 	isb	sy
}
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	e000ed04 	.word	0xe000ed04

08002908 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 800290c:	f000 f81e 	bl	800294c <ulPortSetInterruptMask>
	uxCriticalNesting++;
 8002910:	4b04      	ldr	r3, [pc, #16]	; (8002924 <vPortEnterCritical+0x1c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	4b03      	ldr	r3, [pc, #12]	; (8002924 <vPortEnterCritical+0x1c>)
 8002918:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800291a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800291e:	f3bf 8f6f 	isb	sy
}
 8002922:	bd80      	pop	{r7, pc}
 8002924:	20000018 	.word	0x20000018

08002928 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 800292c:	4b06      	ldr	r3, [pc, #24]	; (8002948 <vPortExitCritical+0x20>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	1e5a      	subs	r2, r3, #1
 8002932:	4b05      	ldr	r3, [pc, #20]	; (8002948 <vPortExitCritical+0x20>)
 8002934:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8002936:	4b04      	ldr	r3, [pc, #16]	; (8002948 <vPortExitCritical+0x20>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d102      	bne.n	8002944 <vPortExitCritical+0x1c>
	{
		portENABLE_INTERRUPTS();
 800293e:	2000      	movs	r0, #0
 8002940:	f000 f80e 	bl	8002960 <vPortClearInterruptMask>
	}
}
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20000018 	.word	0x20000018

0800294c <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
 800294c:	f3ef 8011 	mrs	r0, BASEPRI
 8002950:	f04f 0150 	mov.w	r1, #80	; 0x50
 8002954:	f381 8811 	msr	BASEPRI, r1
 8002958:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	bf00      	nop

08002960 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
 8002960:	f380 8811 	msr	BASEPRI, r0
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop

08002968 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002968:	f3ef 8009 	mrs	r0, PSP
 800296c:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <pxCurrentTCBConst>)
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	f01e 0f10 	tst.w	lr, #16
 8002974:	bf08      	it	eq
 8002976:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800297a:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800297e:	6010      	str	r0, [r2, #0]
 8002980:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002984:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002988:	f380 8811 	msr	BASEPRI, r0
 800298c:	f7fe feca 	bl	8001724 <vTaskSwitchContext>
 8002990:	f04f 0000 	mov.w	r0, #0
 8002994:	f380 8811 	msr	BASEPRI, r0
 8002998:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800299c:	6819      	ldr	r1, [r3, #0]
 800299e:	6808      	ldr	r0, [r1, #0]
 80029a0:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029a4:	f01e 0f10 	tst.w	lr, #16
 80029a8:	bf08      	it	eq
 80029aa:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80029ae:	f380 8809 	msr	PSP, r0
 80029b2:	4770      	bx	lr

080029b4 <pxCurrentTCBConst>:
 80029b4:	2000047c 	.word	0x2000047c

080029b8 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 80029bc:	f7ff ffc6 	bl	800294c <ulPortSetInterruptMask>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80029c0:	f7fe fdda 	bl	8001578 <xTaskIncrementTick>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80029ca:	4b04      	ldr	r3, [pc, #16]	; (80029dc <SysTick_Handler+0x24>)
 80029cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029d0:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 80029d2:	2000      	movs	r0, #0
 80029d4:	f7ff ffc4 	bl	8002960 <vPortClearInterruptMask>
}
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	e000ed04 	.word	0xe000ed04

080029e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
 80029e4:	4b07      	ldr	r3, [pc, #28]	; (8002a04 <vPortSetupTimerInterrupt+0x24>)
 80029e6:	4a08      	ldr	r2, [pc, #32]	; (8002a08 <vPortSetupTimerInterrupt+0x28>)
 80029e8:	6811      	ldr	r1, [r2, #0]
 80029ea:	4a08      	ldr	r2, [pc, #32]	; (8002a0c <vPortSetupTimerInterrupt+0x2c>)
 80029ec:	fba2 0201 	umull	r0, r2, r2, r1
 80029f0:	0992      	lsrs	r2, r2, #6
 80029f2:	3a01      	subs	r2, #1
 80029f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80029f6:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <vPortSetupTimerInterrupt+0x30>)
 80029f8:	2207      	movs	r2, #7
 80029fa:	601a      	str	r2, [r3, #0]
}
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	e000e014 	.word	0xe000e014
 8002a08:	20000000 	.word	0x20000000
 8002a0c:	10624dd3 	.word	0x10624dd3
 8002a10:	e000e010 	.word	0xe000e010

08002a14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002a14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002a24 <vPortEnableVFP+0x10>
 8002a18:	6801      	ldr	r1, [r0, #0]
 8002a1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002a1e:	6001      	str	r1, [r0, #0]
 8002a20:	4770      	bx	lr
 8002a22:	0000      	.short	0x0000
 8002a24:	e000ed88 	.word	0xe000ed88

08002a28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
	unsigned long ulCurrentInterrupt;
	unsigned char ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8002a2e:	f3ef 8305 	mrs	r3, IPSR
 8002a32:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b0f      	cmp	r3, #15
 8002a38:	d90c      	bls.n	8002a54 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002a3a:	4a0d      	ldr	r2, [pc, #52]	; (8002a70 <vPortValidateInterruptPriority+0x48>)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4413      	add	r3, r2
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <vPortValidateInterruptPriority+0x4c>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	78fa      	ldrb	r2, [r7, #3]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d202      	bcs.n	8002a54 <vPortValidateInterruptPriority+0x2c>
 8002a4e:	f7ff ff7d 	bl	800294c <ulPortSetInterruptMask>
 8002a52:	e7fe      	b.n	8002a52 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002a54:	4b08      	ldr	r3, [pc, #32]	; (8002a78 <vPortValidateInterruptPriority+0x50>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a5c:	4b07      	ldr	r3, [pc, #28]	; (8002a7c <vPortValidateInterruptPriority+0x54>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d902      	bls.n	8002a6a <vPortValidateInterruptPriority+0x42>
 8002a64:	f7ff ff72 	bl	800294c <ulPortSetInterruptMask>
 8002a68:	e7fe      	b.n	8002a68 <vPortValidateInterruptPriority+0x40>
	}
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	e000e3f0 	.word	0xe000e3f0
 8002a74:	20000578 	.word	0x20000578
 8002a78:	e000ed0c 	.word	0xe000ed0c
 8002a7c:	2000057c 	.word	0x2000057c

08002a80 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002a8a:	f000 fa45 	bl	8002f18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002a8e:	4b0f      	ldr	r3, [pc, #60]	; (8002acc <xTimerCreateTimerTask+0x4c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00f      	beq.n	8002ab6 <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 8002a96:	2302      	movs	r3, #2
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	9301      	str	r3, [sp, #4]
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	9302      	str	r3, [sp, #8]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	9303      	str	r3, [sp, #12]
 8002aa6:	480a      	ldr	r0, [pc, #40]	; (8002ad0 <xTimerCreateTimerTask+0x50>)
 8002aa8:	490a      	ldr	r1, [pc, #40]	; (8002ad4 <xTimerCreateTimerTask+0x54>)
 8002aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f7fe fba8 	bl	8001204 <xTaskGenericCreate>
 8002ab4:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d102      	bne.n	8002ac2 <xTimerCreateTimerTask+0x42>
 8002abc:	f7ff ff46 	bl	800294c <ulPortSetInterruptMask>
 8002ac0:	e7fe      	b.n	8002ac0 <xTimerCreateTimerTask+0x40>
	return xReturn;
 8002ac2:	687b      	ldr	r3, [r7, #4]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	200005b0 	.word	0x200005b0
 8002ad0:	08002bd5 	.word	0x08002bd5
 8002ad4:	08005dc4 	.word	0x08005dc4

08002ad8 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
 8002ae4:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002aea:	4b1d      	ldr	r3, [pc, #116]	; (8002b60 <xTimerGenericCommand+0x88>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d030      	beq.n	8002b54 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d11c      	bne.n	8002b3e <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002b04:	f7ff f912 	bl	8001d2c <xTaskGetSchedulerState>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d10b      	bne.n	8002b26 <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
 8002b0e:	4b14      	ldr	r3, [pc, #80]	; (8002b60 <xTimerGenericCommand+0x88>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	f107 0310 	add.w	r3, r7, #16
 8002b16:	4610      	mov	r0, r2
 8002b18:	4619      	mov	r1, r3
 8002b1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	f7ff fa55 	bl	8001fcc <xQueueGenericSend>
 8002b22:	61f8      	str	r0, [r7, #28]
 8002b24:	e016      	b.n	8002b54 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002b26:	4b0e      	ldr	r3, [pc, #56]	; (8002b60 <xTimerGenericCommand+0x88>)
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	f107 0310 	add.w	r3, r7, #16
 8002b2e:	4610      	mov	r0, r2
 8002b30:	4619      	mov	r1, r3
 8002b32:	2200      	movs	r2, #0
 8002b34:	2300      	movs	r3, #0
 8002b36:	f7ff fa49 	bl	8001fcc <xQueueGenericSend>
 8002b3a:	61f8      	str	r0, [r7, #28]
 8002b3c:	e00a      	b.n	8002b54 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002b3e:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <xTimerGenericCommand+0x88>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	f107 0310 	add.w	r3, r7, #16
 8002b46:	4610      	mov	r0, r2
 8002b48:	4619      	mov	r1, r3
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	f7ff faed 	bl	800212c <xQueueGenericSendFromISR>
 8002b52:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
 8002b54:	69fb      	ldr	r3, [r7, #28]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3720      	adds	r7, #32
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	200005b0 	.word	0x200005b0

08002b64 <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af02      	add	r7, sp, #8
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002b6e:	4b18      	ldr	r3, [pc, #96]	; (8002bd0 <prvProcessExpiredTimer+0x6c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	60fb      	str	r3, [r7, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	3304      	adds	r3, #4
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff fdc9 	bl	8002714 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d11b      	bne.n	8002bc2 <prvProcessExpiredTimer+0x5e>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	699a      	ldr	r2, [r3, #24]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4413      	add	r3, r2
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	4619      	mov	r1, r3
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f000 f8a9 	bl	8002cf0 <prvInsertTimerInActiveList>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d10e      	bne.n	8002bc2 <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	2100      	movs	r1, #0
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f7ff ff92 	bl	8002ad8 <xTimerGenericCommand>
 8002bb4:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d102      	bne.n	8002bc2 <prvProcessExpiredTimer+0x5e>
 8002bbc:	f7ff fec6 	bl	800294c <ulPortSetInterruptMask>
 8002bc0:	e7fe      	b.n	8002bc0 <prvProcessExpiredTimer+0x5c>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	4798      	blx	r3
}
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	200005a8 	.word	0x200005a8

08002bd4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002bdc:	f107 0308 	add.w	r3, r7, #8
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 f83f 	bl	8002c64 <prvGetNextExpireTime>
 8002be6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	4619      	mov	r1, r3
 8002bee:	f000 f803 	bl	8002bf8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002bf2:	f000 f8bf 	bl	8002d74 <prvProcessReceivedCommands>
	}
 8002bf6:	e7f1      	b.n	8002bdc <prvTimerTask+0x8>

08002bf8 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002c02:	f7fe fc13 	bl	800142c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002c06:	f107 0308 	add.w	r3, r7, #8
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 f84e 	bl	8002cac <prvSampleTimeNow>
 8002c10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d11e      	bne.n	8002c56 <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10a      	bne.n	8002c34 <prvProcessTimerOrBlockTask+0x3c>
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d806      	bhi.n	8002c34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002c26:	f7fe fc0f 	bl	8001448 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	68f9      	ldr	r1, [r7, #12]
 8002c2e:	f7ff ff99 	bl	8002b64 <prvProcessExpiredTimer>
 8002c32:	e012      	b.n	8002c5a <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8002c34:	4b0a      	ldr	r3, [pc, #40]	; (8002c60 <prvProcessTimerOrBlockTask+0x68>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1acb      	subs	r3, r1, r3
 8002c3e:	4610      	mov	r0, r2
 8002c40:	4619      	mov	r1, r3
 8002c42:	f7ff fcb3 	bl	80025ac <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 8002c46:	f7fe fbff 	bl	8001448 <xTaskResumeAll>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d104      	bne.n	8002c5a <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 8002c50:	f7ff fe4a 	bl	80028e8 <vPortYield>
 8002c54:	e001      	b.n	8002c5a <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 8002c56:	f7fe fbf7 	bl	8001448 <xTaskResumeAll>
		}
	}
}
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	200005b0 	.word	0x200005b0

08002c64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002c6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ca8 <prvGetNextExpireTime+0x44>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	bf14      	ite	ne
 8002c76:	2300      	movne	r3, #0
 8002c78:	2301      	moveq	r3, #1
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d105      	bne.n	8002c96 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002c8a:	4b07      	ldr	r3, [pc, #28]	; (8002ca8 <prvGetNextExpireTime+0x44>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	e001      	b.n	8002c9a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	200005a8 	.word	0x200005a8

08002cac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002cb4:	f7fe fc4e 	bl	8001554 <xTaskGetTickCount>
 8002cb8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002cba:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <prvSampleTimeNow+0x40>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d208      	bcs.n	8002cd6 <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
 8002cc4:	4b09      	ldr	r3, [pc, #36]	; (8002cec <prvSampleTimeNow+0x40>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f000 f8cb 	bl	8002e64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	e002      	b.n	8002cdc <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002cdc:	4b03      	ldr	r3, [pc, #12]	; (8002cec <prvSampleTimeNow+0x40>)
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	200005b4 	.word	0x200005b4

08002cf0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d812      	bhi.n	8002d3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	1ad2      	subs	r2, r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d302      	bcc.n	8002d2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002d24:	2301      	movs	r3, #1
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	e01b      	b.n	8002d62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002d2a:	4b10      	ldr	r3, [pc, #64]	; (8002d6c <prvInsertTimerInActiveList+0x7c>)
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	3304      	adds	r3, #4
 8002d32:	4610      	mov	r0, r2
 8002d34:	4619      	mov	r1, r3
 8002d36:	f7ff fcb5 	bl	80026a4 <vListInsert>
 8002d3a:	e012      	b.n	8002d62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d206      	bcs.n	8002d52 <prvInsertTimerInActiveList+0x62>
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d302      	bcc.n	8002d52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	e007      	b.n	8002d62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002d52:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <prvInsertTimerInActiveList+0x80>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	3304      	adds	r3, #4
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	f7ff fca1 	bl	80026a4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002d62:	697b      	ldr	r3, [r7, #20]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	200005ac 	.word	0x200005ac
 8002d70:	200005a8 	.word	0x200005a8

08002d74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08a      	sub	sp, #40	; 0x28
 8002d78:	af02      	add	r7, sp, #8
xTIMER_MESSAGE xMessage;
xTIMER *pxTimer;
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002d7a:	e060      	b.n	8002e3e <prvProcessReceivedCommands+0xca>
	{
		pxTimer = xMessage.pxTimer;
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	61fb      	str	r3, [r7, #28]

		if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d004      	beq.n	8002d92 <prvProcessReceivedCommands+0x1e>
		{
			/* The timer is in a list, remove it. */
			( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff fcc1 	bl	8002714 <uxListRemove>
		it must be present in the function call.  prvSampleTimeNow() must be 
		called after the message is received from xTimerQueue so there is no 
		possibility of a higher priority task adding a message to the message
		queue with a time that is ahead of the timer daemon task (because it
		pre-empted the timer daemon task after the xTimeNow value was set). */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002d92:	1d3b      	adds	r3, r7, #4
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff ff89 	bl	8002cac <prvSampleTimeNow>
 8002d9a:	61b8      	str	r0, [r7, #24]

		switch( xMessage.xMessageID )
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2b03      	cmp	r3, #3
 8002da0:	d84c      	bhi.n	8002e3c <prvProcessReceivedCommands+0xc8>
 8002da2:	a201      	add	r2, pc, #4	; (adr r2, 8002da8 <prvProcessReceivedCommands+0x34>)
 8002da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da8:	08002db9 	.word	0x08002db9
 8002dac:	08002e3d 	.word	0x08002e3d
 8002db0:	08002e0b 	.word	0x08002e0b
 8002db4:	08002e35 	.word	0x08002e35
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	441a      	add	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	69f8      	ldr	r0, [r7, #28]
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	f7ff ff92 	bl	8002cf0 <prvInsertTimerInActiveList>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d11a      	bne.n	8002e08 <prvProcessReceivedCommands+0x94>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	69f8      	ldr	r0, [r7, #28]
 8002dd8:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d112      	bne.n	8002e08 <prvProcessReceivedCommands+0x94>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	4413      	add	r3, r2
 8002dea:	2200      	movs	r2, #0
 8002dec:	9200      	str	r2, [sp, #0]
 8002dee:	69f8      	ldr	r0, [r7, #28]
 8002df0:	2100      	movs	r1, #0
 8002df2:	461a      	mov	r2, r3
 8002df4:	2300      	movs	r3, #0
 8002df6:	f7ff fe6f 	bl	8002ad8 <xTimerGenericCommand>
 8002dfa:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d102      	bne.n	8002e08 <prvProcessReceivedCommands+0x94>
 8002e02:	f7ff fda3 	bl	800294c <ulPortSetInterruptMask>
 8002e06:	e7fe      	b.n	8002e06 <prvProcessReceivedCommands+0x92>
						( void ) xResult;
					}
				}
				break;
 8002e08:	e019      	b.n	8002e3e <prvProcessReceivedCommands+0xca>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d102      	bne.n	8002e1e <prvProcessReceivedCommands+0xaa>
 8002e18:	f7ff fd98 	bl	800294c <ulPortSetInterruptMask>
 8002e1c:	e7fe      	b.n	8002e1c <prvProcessReceivedCommands+0xa8>
				longer or shorter than the old one.  The command time is 
				therefore set to the current time, and as the period cannot be
				zero the next expiry time can only be in the future, meaning
				(unlike for the xTimerStart() case above) there is no fail case
				that needs to be handled here. */
				( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	699a      	ldr	r2, [r3, #24]
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	4413      	add	r3, r2
 8002e26:	69f8      	ldr	r0, [r7, #28]
 8002e28:	4619      	mov	r1, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	f7ff ff5f 	bl	8002cf0 <prvInsertTimerInActiveList>
				break;
 8002e32:	e004      	b.n	8002e3e <prvProcessReceivedCommands+0xca>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
 8002e34:	69f8      	ldr	r0, [r7, #28]
 8002e36:	f000 faf3 	bl	8003420 <vPortFree>
				break;
 8002e3a:	e000      	b.n	8002e3e <prvProcessReceivedCommands+0xca>

			default	:
				/* Don't expect to get here. */
				break;
 8002e3c:	bf00      	nop
xTIMER_MESSAGE xMessage;
xTIMER *pxTimer;
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002e3e:	4b08      	ldr	r3, [pc, #32]	; (8002e60 <prvProcessReceivedCommands+0xec>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	f107 0308 	add.w	r3, r7, #8
 8002e46:	4610      	mov	r0, r2
 8002e48:	4619      	mov	r1, r3
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	f7ff f9d7 	bl	8002200 <xQueueGenericReceive>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d191      	bne.n	8002d7c <prvProcessReceivedCommands+0x8>
			default	:
				/* Don't expect to get here. */
				break;
		}
	}
}
 8002e58:	3720      	adds	r7, #32
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	200005b0 	.word	0x200005b0

08002e64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08a      	sub	sp, #40	; 0x28
 8002e68:	af02      	add	r7, sp, #8
 8002e6a:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002e6c:	e03d      	b.n	8002eea <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002e6e:	4b28      	ldr	r3, [pc, #160]	; (8002f10 <prvSwitchTimerLists+0xac>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002e78:	4b25      	ldr	r3, [pc, #148]	; (8002f10 <prvSwitchTimerLists+0xac>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	61bb      	str	r3, [r7, #24]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	3304      	adds	r3, #4
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff fc44 	bl	8002714 <uxListRemove>

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	69b8      	ldr	r0, [r7, #24]
 8002e92:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d126      	bne.n	8002eea <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	699a      	ldr	r2, [r3, #24]
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d90e      	bls.n	8002ecc <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002eba:	4b15      	ldr	r3, [pc, #84]	; (8002f10 <prvSwitchTimerLists+0xac>)
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	4610      	mov	r0, r2
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	f7ff fbed 	bl	80026a4 <vListInsert>
 8002eca:	e00e      	b.n	8002eea <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8002ecc:	2300      	movs	r3, #0
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	69b8      	ldr	r0, [r7, #24]
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	69fa      	ldr	r2, [r7, #28]
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f7ff fdfe 	bl	8002ad8 <xTimerGenericCommand>
 8002edc:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d102      	bne.n	8002eea <prvSwitchTimerLists+0x86>
 8002ee4:	f7ff fd32 	bl	800294c <ulPortSetInterruptMask>
 8002ee8:	e7fe      	b.n	8002ee8 <prvSwitchTimerLists+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002eea:	4b09      	ldr	r3, [pc, #36]	; (8002f10 <prvSwitchTimerLists+0xac>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1bc      	bne.n	8002e6e <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
 8002ef4:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <prvSwitchTimerLists+0xac>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
 8002efa:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <prvSwitchTimerLists+0xb0>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	4b04      	ldr	r3, [pc, #16]	; (8002f10 <prvSwitchTimerLists+0xac>)
 8002f00:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8002f02:	4b04      	ldr	r3, [pc, #16]	; (8002f14 <prvSwitchTimerLists+0xb0>)
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	601a      	str	r2, [r3, #0]
}
 8002f08:	3720      	adds	r7, #32
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	200005a8 	.word	0x200005a8
 8002f14:	200005ac 	.word	0x200005ac

08002f18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002f1c:	f7ff fcf4 	bl	8002908 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002f20:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <prvCheckForValidListAndQueue+0x40>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d113      	bne.n	8002f50 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 8002f28:	480c      	ldr	r0, [pc, #48]	; (8002f5c <prvCheckForValidListAndQueue+0x44>)
 8002f2a:	f7ff fb6b 	bl	8002604 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002f2e:	480c      	ldr	r0, [pc, #48]	; (8002f60 <prvCheckForValidListAndQueue+0x48>)
 8002f30:	f7ff fb68 	bl	8002604 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002f34:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <prvCheckForValidListAndQueue+0x4c>)
 8002f36:	4a09      	ldr	r2, [pc, #36]	; (8002f5c <prvCheckForValidListAndQueue+0x44>)
 8002f38:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002f3a:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <prvCheckForValidListAndQueue+0x50>)
 8002f3c:	4a08      	ldr	r2, [pc, #32]	; (8002f60 <prvCheckForValidListAndQueue+0x48>)
 8002f3e:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
 8002f40:	200a      	movs	r0, #10
 8002f42:	210c      	movs	r1, #12
 8002f44:	2200      	movs	r2, #0
 8002f46:	f7fe ffff 	bl	8001f48 <xQueueGenericCreate>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	4b02      	ldr	r3, [pc, #8]	; (8002f58 <prvCheckForValidListAndQueue+0x40>)
 8002f4e:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
 8002f50:	f7ff fcea 	bl	8002928 <vPortExitCritical>
}
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	200005b0 	.word	0x200005b0
 8002f5c:	20000580 	.word	0x20000580
 8002f60:	20000594 	.word	0x20000594
 8002f64:	200005a8 	.word	0x200005a8
 8002f68:	200005ac 	.word	0x200005ac

08002f6c <ITM_SendChar>:

    \param [in]     ch  Character to transmit
    \return             Character to transmit
 */
static __INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 8002f74:	4b13      	ldr	r3, [pc, #76]	; (8002fc4 <ITM_SendChar+0x58>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d01a      	beq.n	8002fb6 <ITM_SendChar+0x4a>
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8002f80:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002f84:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002f88:	f003 0301 	and.w	r3, r3, #1
    \param [in]     ch  Character to transmit
    \return             Character to transmit
 */
static __INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d012      	beq.n	8002fb6 <ITM_SendChar+0x4a>
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 8002f90:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002f94:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002f98:	f003 0301 	and.w	r3, r3, #1
    \return             Character to transmit
 */
static __INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00a      	beq.n	8002fb6 <ITM_SendChar+0x4a>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0].u32 == 0);
 8002fa0:	bf00      	nop
 8002fa2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0fa      	beq.n	8002fa2 <ITM_SendChar+0x36>
    ITM->PORT[0].u8 = (uint8_t) ch;
 8002fac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002fb6:	687b      	ldr	r3, [r7, #4]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	e000edf0 	.word	0xe000edf0

08002fc8 <out>:
static char buf[12];
static unsigned int num;
static char uc;
static char zs;

static void out(char c) {
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	71fb      	strb	r3, [r7, #7]
  *bf++ = c;
 8002fd2:	4b06      	ldr	r3, [pc, #24]	; (8002fec <out+0x24>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	1c59      	adds	r1, r3, #1
 8002fd8:	4a04      	ldr	r2, [pc, #16]	; (8002fec <out+0x24>)
 8002fda:	6011      	str	r1, [r2, #0]
 8002fdc:	79fa      	ldrb	r2, [r7, #7]
 8002fde:	701a      	strb	r2, [r3, #0]
}
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	200005b8 	.word	0x200005b8

08002ff0 <outDgt>:

static void outDgt(char dgt) {
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	71fb      	strb	r3, [r7, #7]
  out(dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10));
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	2b09      	cmp	r3, #9
 8002ffe:	d907      	bls.n	8003010 <outDgt+0x20>
 8003000:	4b0a      	ldr	r3, [pc, #40]	; (800302c <outDgt+0x3c>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <outDgt+0x1c>
 8003008:	2337      	movs	r3, #55	; 0x37
 800300a:	e002      	b.n	8003012 <outDgt+0x22>
 800300c:	2357      	movs	r3, #87	; 0x57
 800300e:	e000      	b.n	8003012 <outDgt+0x22>
 8003010:	2330      	movs	r3, #48	; 0x30
 8003012:	79fa      	ldrb	r2, [r7, #7]
 8003014:	4413      	add	r3, r2
 8003016:	b2db      	uxtb	r3, r3
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff ffd5 	bl	8002fc8 <out>
  zs=1;
 800301e:	4b04      	ldr	r3, [pc, #16]	; (8003030 <outDgt+0x40>)
 8003020:	2201      	movs	r2, #1
 8003022:	701a      	strb	r2, [r3, #0]
}
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	200005cc 	.word	0x200005cc
 8003030:	200005cd 	.word	0x200005cd

08003034 <divOut>:

static void divOut(unsigned int div) {
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  unsigned char dgt=0;
 800303c:	2300      	movs	r3, #0
 800303e:	73fb      	strb	r3, [r7, #15]
  num &= 0xffffffff;
 8003040:	4b10      	ldr	r3, [pc, #64]	; (8003084 <divOut+0x50>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <divOut+0x50>)
 8003046:	601a      	str	r2, [r3, #0]
  while (num>=div) {
 8003048:	e008      	b.n	800305c <divOut+0x28>
    num -= div;
 800304a:	4b0e      	ldr	r3, [pc, #56]	; (8003084 <divOut+0x50>)
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	1ad2      	subs	r2, r2, r3
 8003052:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <divOut+0x50>)
 8003054:	601a      	str	r2, [r3, #0]
    dgt++;
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	3301      	adds	r3, #1
 800305a:	73fb      	strb	r3, [r7, #15]
}

static void divOut(unsigned int div) {
  unsigned char dgt=0;
  num &= 0xffffffff;
  while (num>=div) {
 800305c:	4b09      	ldr	r3, [pc, #36]	; (8003084 <divOut+0x50>)
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	429a      	cmp	r2, r3
 8003064:	d2f1      	bcs.n	800304a <divOut+0x16>
    num -= div;
    dgt++;
  }
  if (zs || dgt>0)
 8003066:	4b08      	ldr	r3, [pc, #32]	; (8003088 <divOut+0x54>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d102      	bne.n	8003074 <divOut+0x40>
 800306e:	7bfb      	ldrb	r3, [r7, #15]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <divOut+0x48>
    outDgt(dgt);
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff ffba 	bl	8002ff0 <outDgt>
}
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	200005c8 	.word	0x200005c8
 8003088:	200005cd 	.word	0x200005cd

0800308c <t_printf>:
#endif
  return 1;
}

void t_printf(const char *fmt, ...)
{
 800308c:	b40f      	push	{r0, r1, r2, r3}
 800308e:	b580      	push	{r7, lr}
 8003090:	b084      	sub	sp, #16
 8003092:	af00      	add	r7, sp, #0
  va_list va;
  char ch;
  char* p;

  va_start(va,fmt);
 8003094:	f107 031c 	add.w	r3, r7, #28
 8003098:	603b      	str	r3, [r7, #0]

  while ((ch=*(fmt++))) {
 800309a:	e10f      	b.n	80032bc <t_printf+0x230>
    if (ch!='%') {
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	2b25      	cmp	r3, #37	; 0x25
 80030a0:	d004      	beq.n	80030ac <t_printf+0x20>
#ifdef ITM_TRACE
      ITM_SendChar ((uint32_t) ch);
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff ff61 	bl	8002f6c <ITM_SendChar>
 80030aa:	e107      	b.n	80032bc <t_printf+0x230>
#else
      putchar(ch);
#endif
    }
    else {
      char lz=0;
 80030ac:	2300      	movs	r3, #0
 80030ae:	71fb      	strb	r3, [r7, #7]
      char w=0;
 80030b0:	2300      	movs	r3, #0
 80030b2:	71bb      	strb	r3, [r7, #6]
      ch=*(fmt++);
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	61ba      	str	r2, [r7, #24]
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	73fb      	strb	r3, [r7, #15]
      if (ch=='0') {
 80030be:	7bfb      	ldrb	r3, [r7, #15]
 80030c0:	2b30      	cmp	r3, #48	; 0x30
 80030c2:	d106      	bne.n	80030d2 <t_printf+0x46>
	ch=*(fmt++);
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	1c5a      	adds	r2, r3, #1
 80030c8:	61ba      	str	r2, [r7, #24]
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	73fb      	strb	r3, [r7, #15]
	lz=1;
 80030ce:	2301      	movs	r3, #1
 80030d0:	71fb      	strb	r3, [r7, #7]
      }
      if (ch>='0' && ch<='9') {
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	2b2f      	cmp	r3, #47	; 0x2f
 80030d6:	d91d      	bls.n	8003114 <t_printf+0x88>
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
 80030da:	2b39      	cmp	r3, #57	; 0x39
 80030dc:	d81a      	bhi.n	8003114 <t_printf+0x88>
	w=0;
 80030de:	2300      	movs	r3, #0
 80030e0:	71bb      	strb	r3, [r7, #6]
	while (ch>='0' && ch<='9') {
 80030e2:	e011      	b.n	8003108 <t_printf+0x7c>
	  w=(((w<<2)+w)<<1)+ch-'0';
 80030e4:	79bb      	ldrb	r3, [r7, #6]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	79bb      	ldrb	r3, [r7, #6]
 80030ec:	4413      	add	r3, r2
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	7bfb      	ldrb	r3, [r7, #15]
 80030f6:	4413      	add	r3, r2
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	3b30      	subs	r3, #48	; 0x30
 80030fc:	71bb      	strb	r3, [r7, #6]
	  ch=*fmt++;
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	1c5a      	adds	r2, r3, #1
 8003102:	61ba      	str	r2, [r7, #24]
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	73fb      	strb	r3, [r7, #15]
	ch=*(fmt++);
	lz=1;
      }
      if (ch>='0' && ch<='9') {
	w=0;
	while (ch>='0' && ch<='9') {
 8003108:	7bfb      	ldrb	r3, [r7, #15]
 800310a:	2b2f      	cmp	r3, #47	; 0x2f
 800310c:	d902      	bls.n	8003114 <t_printf+0x88>
 800310e:	7bfb      	ldrb	r3, [r7, #15]
 8003110:	2b39      	cmp	r3, #57	; 0x39
 8003112:	d9e7      	bls.n	80030e4 <t_printf+0x58>
	  w=(((w<<2)+w)<<1)+ch-'0';
	  ch=*fmt++;
	}
      }
      bf=buf;
 8003114:	4b72      	ldr	r3, [pc, #456]	; (80032e0 <t_printf+0x254>)
 8003116:	4a73      	ldr	r2, [pc, #460]	; (80032e4 <t_printf+0x258>)
 8003118:	601a      	str	r2, [r3, #0]
      p=bf;
 800311a:	4b71      	ldr	r3, [pc, #452]	; (80032e0 <t_printf+0x254>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	60bb      	str	r3, [r7, #8]
      zs=0;
 8003120:	4b71      	ldr	r3, [pc, #452]	; (80032e8 <t_printf+0x25c>)
 8003122:	2200      	movs	r2, #0
 8003124:	701a      	strb	r2, [r3, #0]
      switch (ch) {
 8003126:	7bfb      	ldrb	r3, [r7, #15]
 8003128:	2b63      	cmp	r3, #99	; 0x63
 800312a:	f000 8082 	beq.w	8003232 <t_printf+0x1a6>
 800312e:	2b63      	cmp	r3, #99	; 0x63
 8003130:	dc08      	bgt.n	8003144 <t_printf+0xb8>
 8003132:	2b25      	cmp	r3, #37	; 0x25
 8003134:	f000 808c 	beq.w	8003250 <t_printf+0x1c4>
 8003138:	2b58      	cmp	r3, #88	; 0x58
 800313a:	d049      	beq.n	80031d0 <t_printf+0x144>
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 80c7 	beq.w	80032d0 <t_printf+0x244>
	p=va_arg(va, char*);
	break;
      case '%' :
	out('%');
      default:
	break;
 8003142:	e088      	b.n	8003256 <t_printf+0x1ca>
	}
      }
      bf=buf;
      p=bf;
      zs=0;
      switch (ch) {
 8003144:	2b73      	cmp	r3, #115	; 0x73
 8003146:	d07d      	beq.n	8003244 <t_printf+0x1b8>
 8003148:	2b73      	cmp	r3, #115	; 0x73
 800314a:	dc02      	bgt.n	8003152 <t_printf+0xc6>
 800314c:	2b64      	cmp	r3, #100	; 0x64
 800314e:	d005      	beq.n	800315c <t_printf+0xd0>
	p=va_arg(va, char*);
	break;
      case '%' :
	out('%');
      default:
	break;
 8003150:	e081      	b.n	8003256 <t_printf+0x1ca>
	}
      }
      bf=buf;
      p=bf;
      zs=0;
      switch (ch) {
 8003152:	2b75      	cmp	r3, #117	; 0x75
 8003154:	d002      	beq.n	800315c <t_printf+0xd0>
 8003156:	2b78      	cmp	r3, #120	; 0x78
 8003158:	d03a      	beq.n	80031d0 <t_printf+0x144>
	p=va_arg(va, char*);
	break;
      case '%' :
	out('%');
      default:
	break;
 800315a:	e07c      	b.n	8003256 <t_printf+0x1ca>
      switch (ch) {
      case 0:
	goto abort;
      case 'u':
      case 'd' :
	num=va_arg(va, unsigned int);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	1d1a      	adds	r2, r3, #4
 8003160:	603a      	str	r2, [r7, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	4b61      	ldr	r3, [pc, #388]	; (80032ec <t_printf+0x260>)
 8003166:	601a      	str	r2, [r3, #0]
	if (ch=='d' && (int)num<0) {
 8003168:	7bfb      	ldrb	r3, [r7, #15]
 800316a:	2b64      	cmp	r3, #100	; 0x64
 800316c:	d10c      	bne.n	8003188 <t_printf+0xfc>
 800316e:	4b5f      	ldr	r3, [pc, #380]	; (80032ec <t_printf+0x260>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	da08      	bge.n	8003188 <t_printf+0xfc>
	  num = -(int)num;
 8003176:	4b5d      	ldr	r3, [pc, #372]	; (80032ec <t_printf+0x260>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	425b      	negs	r3, r3
 800317c:	461a      	mov	r2, r3
 800317e:	4b5b      	ldr	r3, [pc, #364]	; (80032ec <t_printf+0x260>)
 8003180:	601a      	str	r2, [r3, #0]
	  out('-');
 8003182:	202d      	movs	r0, #45	; 0x2d
 8003184:	f7ff ff20 	bl	8002fc8 <out>
	}
	divOut(1000000000);
 8003188:	4859      	ldr	r0, [pc, #356]	; (80032f0 <t_printf+0x264>)
 800318a:	f7ff ff53 	bl	8003034 <divOut>
	divOut(100000000);
 800318e:	4859      	ldr	r0, [pc, #356]	; (80032f4 <t_printf+0x268>)
 8003190:	f7ff ff50 	bl	8003034 <divOut>
	divOut(10000000);
 8003194:	4858      	ldr	r0, [pc, #352]	; (80032f8 <t_printf+0x26c>)
 8003196:	f7ff ff4d 	bl	8003034 <divOut>
	divOut(1000000);
 800319a:	4858      	ldr	r0, [pc, #352]	; (80032fc <t_printf+0x270>)
 800319c:	f7ff ff4a 	bl	8003034 <divOut>
	divOut(100000);
 80031a0:	4857      	ldr	r0, [pc, #348]	; (8003300 <t_printf+0x274>)
 80031a2:	f7ff ff47 	bl	8003034 <divOut>
	divOut(10000);
 80031a6:	f242 7010 	movw	r0, #10000	; 0x2710
 80031aa:	f7ff ff43 	bl	8003034 <divOut>
	divOut(1000);
 80031ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031b2:	f7ff ff3f 	bl	8003034 <divOut>
	divOut(100);
 80031b6:	2064      	movs	r0, #100	; 0x64
 80031b8:	f7ff ff3c 	bl	8003034 <divOut>
	divOut(10);
 80031bc:	200a      	movs	r0, #10
 80031be:	f7ff ff39 	bl	8003034 <divOut>
	outDgt(num);
 80031c2:	4b4a      	ldr	r3, [pc, #296]	; (80032ec <t_printf+0x260>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff ff11 	bl	8002ff0 <outDgt>
	break;
 80031ce:	e043      	b.n	8003258 <t_printf+0x1cc>
      case 'x':
      case 'X' :
	uc= ch=='X';
 80031d0:	7bfb      	ldrb	r3, [r7, #15]
 80031d2:	2b58      	cmp	r3, #88	; 0x58
 80031d4:	bf14      	ite	ne
 80031d6:	2300      	movne	r3, #0
 80031d8:	2301      	moveq	r3, #1
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	461a      	mov	r2, r3
 80031de:	4b49      	ldr	r3, [pc, #292]	; (8003304 <t_printf+0x278>)
 80031e0:	701a      	strb	r2, [r3, #0]
	num=va_arg(va, unsigned int);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	1d1a      	adds	r2, r3, #4
 80031e6:	603a      	str	r2, [r7, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	4b40      	ldr	r3, [pc, #256]	; (80032ec <t_printf+0x260>)
 80031ec:	601a      	str	r2, [r3, #0]
	divOut(0x10000000);
 80031ee:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80031f2:	f7ff ff1f 	bl	8003034 <divOut>
	divOut(0x1000000);
 80031f6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80031fa:	f7ff ff1b 	bl	8003034 <divOut>
	divOut(0x100000);
 80031fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003202:	f7ff ff17 	bl	8003034 <divOut>
	divOut(0x10000);
 8003206:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800320a:	f7ff ff13 	bl	8003034 <divOut>
	divOut(0x1000);
 800320e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003212:	f7ff ff0f 	bl	8003034 <divOut>
	divOut(0x100);
 8003216:	f44f 7080 	mov.w	r0, #256	; 0x100
 800321a:	f7ff ff0b 	bl	8003034 <divOut>
	divOut(0x10);
 800321e:	2010      	movs	r0, #16
 8003220:	f7ff ff08 	bl	8003034 <divOut>
	outDgt(num);
 8003224:	4b31      	ldr	r3, [pc, #196]	; (80032ec <t_printf+0x260>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	b2db      	uxtb	r3, r3
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff fee0 	bl	8002ff0 <outDgt>
	break;
 8003230:	e012      	b.n	8003258 <t_printf+0x1cc>
      case 'c' :
	out((char)(va_arg(va, int)));
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	1d1a      	adds	r2, r3, #4
 8003236:	603a      	str	r2, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	b2db      	uxtb	r3, r3
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff fec3 	bl	8002fc8 <out>
	break;
 8003242:	e009      	b.n	8003258 <t_printf+0x1cc>
      case 's' :
	p=va_arg(va, char*);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	1d1a      	adds	r2, r3, #4
 8003248:	603a      	str	r2, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	60bb      	str	r3, [r7, #8]
	break;
 800324e:	e003      	b.n	8003258 <t_printf+0x1cc>
      case '%' :
	out('%');
 8003250:	2025      	movs	r0, #37	; 0x25
 8003252:	f7ff feb9 	bl	8002fc8 <out>
      default:
	break;
 8003256:	bf00      	nop
      }
      *bf=0;
 8003258:	4b21      	ldr	r3, [pc, #132]	; (80032e0 <t_printf+0x254>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2200      	movs	r2, #0
 800325e:	701a      	strb	r2, [r3, #0]
      bf=p;
 8003260:	4b1f      	ldr	r3, [pc, #124]	; (80032e0 <t_printf+0x254>)
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	601a      	str	r2, [r3, #0]
      while (*bf++ && w > 0)
 8003266:	e002      	b.n	800326e <t_printf+0x1e2>
	w--;
 8003268:	79bb      	ldrb	r3, [r7, #6]
 800326a:	3b01      	subs	r3, #1
 800326c:	71bb      	strb	r3, [r7, #6]
      default:
	break;
      }
      *bf=0;
      bf=p;
      while (*bf++ && w > 0)
 800326e:	4b1c      	ldr	r3, [pc, #112]	; (80032e0 <t_printf+0x254>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	1c59      	adds	r1, r3, #1
 8003274:	4a1a      	ldr	r2, [pc, #104]	; (80032e0 <t_printf+0x254>)
 8003276:	6011      	str	r1, [r2, #0]
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <t_printf+0x1f8>
 800327e:	79bb      	ldrb	r3, [r7, #6]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1f1      	bne.n	8003268 <t_printf+0x1dc>
	w--;
      while (w-- > 0)
 8003284:	e008      	b.n	8003298 <t_printf+0x20c>
	{
#ifdef ITM_TRACE
	  ITM_SendChar ((uint32_t) (lz ? '0' : ' '));
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <t_printf+0x204>
 800328c:	2330      	movs	r3, #48	; 0x30
 800328e:	e000      	b.n	8003292 <t_printf+0x206>
 8003290:	2320      	movs	r3, #32
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff fe6a 	bl	8002f6c <ITM_SendChar>
      }
      *bf=0;
      bf=p;
      while (*bf++ && w > 0)
	w--;
      while (w-- > 0)
 8003298:	79bb      	ldrb	r3, [r7, #6]
 800329a:	1e5a      	subs	r2, r3, #1
 800329c:	71ba      	strb	r2, [r7, #6]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f1      	bne.n	8003286 <t_printf+0x1fa>
#else
	  putchar(lz ? '0' : ' ');
#endif
	}

      while ((ch= *p++))
 80032a2:	e003      	b.n	80032ac <t_printf+0x220>
	{
#ifdef ITM_TRACE
	  ITM_SendChar ((uint32_t) ch);
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff fe60 	bl	8002f6c <ITM_SendChar>
#else
	  putchar(lz ? '0' : ' ');
#endif
	}

      while ((ch= *p++))
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	1c5a      	adds	r2, r3, #1
 80032b0:	60ba      	str	r2, [r7, #8]
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	73fb      	strb	r3, [r7, #15]
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1f3      	bne.n	80032a4 <t_printf+0x218>
  char ch;
  char* p;

  va_start(va,fmt);

  while ((ch=*(fmt++))) {
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	1c5a      	adds	r2, r3, #1
 80032c0:	61ba      	str	r2, [r7, #24]
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	73fb      	strb	r3, [r7, #15]
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f47f aee7 	bne.w	800309c <t_printf+0x10>
 80032ce:	e000      	b.n	80032d2 <t_printf+0x246>
      bf=buf;
      p=bf;
      zs=0;
      switch (ch) {
      case 0:
	goto abort;
 80032d0:	bf00      	nop
	}
    }
  }
 abort:;
  va_end(va);
}
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032da:	b004      	add	sp, #16
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	200005b8 	.word	0x200005b8
 80032e4:	200005bc 	.word	0x200005bc
 80032e8:	200005cd 	.word	0x200005cd
 80032ec:	200005c8 	.word	0x200005c8
 80032f0:	3b9aca00 	.word	0x3b9aca00
 80032f4:	05f5e100 	.word	0x05f5e100
 80032f8:	00989680 	.word	0x00989680
 80032fc:	000f4240 	.word	0x000f4240
 8003300:	000186a0 	.word	0x000186a0
 8003304:	200005cc 	.word	0x200005cc

08003308 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8003314:	f7fe f88a 	bl	800142c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003318:	4b3d      	ldr	r3, [pc, #244]	; (8003410 <pvPortMalloc+0x108>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003320:	f000 f8c8 	bl	80034b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the xBlockLink structure 
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003324:	4b3b      	ldr	r3, [pc, #236]	; (8003414 <pvPortMalloc+0x10c>)
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4013      	ands	r3, r2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d163      	bne.n	80033f8 <pvPortMalloc+0xf0>
		{
			/* The wanted size is increased so it can contain a xBlockLink
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00d      	beq.n	8003352 <pvPortMalloc+0x4a>
			{
				xWantedSize += heapSTRUCT_SIZE;
 8003336:	2308      	movs	r3, #8
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	4413      	add	r3, r2
 800333c:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number 
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	2b00      	cmp	r3, #0
 8003346:	d004      	beq.n	8003352 <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f023 0307 	bic.w	r3, r3, #7
 800334e:	3308      	adds	r3, #8
 8003350:	607b      	str	r3, [r7, #4]
				}
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d04f      	beq.n	80033f8 <pvPortMalloc+0xf0>
 8003358:	4b2f      	ldr	r3, [pc, #188]	; (8003418 <pvPortMalloc+0x110>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	429a      	cmp	r2, r3
 8003360:	d84a      	bhi.n	80033f8 <pvPortMalloc+0xf0>
			{
				/* Traverse the list from the start	(lowest address) block until 
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003362:	4b2e      	ldr	r3, [pc, #184]	; (800341c <pvPortMalloc+0x114>)
 8003364:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8003366:	4b2d      	ldr	r3, [pc, #180]	; (800341c <pvPortMalloc+0x114>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800336c:	e004      	b.n	8003378 <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until 
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	429a      	cmp	r2, r3
 8003380:	d203      	bcs.n	800338a <pvPortMalloc+0x82>
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f1      	bne.n	800336e <pvPortMalloc+0x66>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size 
				was	not found. */
				if( pxBlock != pxEnd )
 800338a:	4b21      	ldr	r3, [pc, #132]	; (8003410 <pvPortMalloc+0x108>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	429a      	cmp	r2, r3
 8003392:	d031      	beq.n	80033f8 <pvPortMalloc+0xf0>
				{
					/* Return the memory space pointed to - jumping over the 
					xBlockLink structure at its start. */
					pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	2308      	movs	r3, #8
 800339a:	4413      	add	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out 
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into 
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	1ad2      	subs	r2, r2, r3
 80033ae:	2308      	movs	r3, #8
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d90f      	bls.n	80033d6 <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new 
						block following the number of bytes requested. The void 
						cast is used to prevent byte alignment warnings from the 
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4413      	add	r3, r2
 80033bc:	60bb      	str	r3, [r7, #8]

						/* Calculate the sizes of two blocks split from the 
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	1ad2      	subs	r2, r2, r3
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 80033d0:	68b8      	ldr	r0, [r7, #8]
 80033d2:	f000 f8bd 	bl	8003550 <prvInsertBlockIntoFreeList>
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80033d6:	4b10      	ldr	r3, [pc, #64]	; (8003418 <pvPortMalloc+0x110>)
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	1ad2      	subs	r2, r2, r3
 80033e0:	4b0d      	ldr	r3, [pc, #52]	; (8003418 <pvPortMalloc+0x110>)
 80033e2:	601a      	str	r2, [r3, #0]

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <pvPortMalloc+0x10c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	431a      	orrs	r2, r3
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	xTaskResumeAll();
 80033f8:	f7fe f826 	bl	8001448 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <pvPortMalloc+0xfe>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8003402:	f7fd fd85 	bl	8000f10 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 8003406:	68fb      	ldr	r3, [r7, #12]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	200131d8 	.word	0x200131d8
 8003414:	200131dc 	.word	0x200131dc
 8003418:	2000001c 	.word	0x2000001c
 800341c:	200131d0 	.word	0x200131d0

08003420 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	60fb      	str	r3, [r7, #12]
xBlockLink *pxLink;

	if( pv != NULL )
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d038      	beq.n	80034a4 <vPortFree+0x84>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 8003432:	2308      	movs	r3, #8
 8003434:	425b      	negs	r3, r3
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4413      	add	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	4b19      	ldr	r3, [pc, #100]	; (80034ac <vPortFree+0x8c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4013      	ands	r3, r2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d102      	bne.n	8003454 <vPortFree+0x34>
 800344e:	f7ff fa7d 	bl	800294c <ulPortSetInterruptMask>
 8003452:	e7fe      	b.n	8003452 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d002      	beq.n	8003462 <vPortFree+0x42>
 800345c:	f7ff fa76 	bl	800294c <ulPortSetInterruptMask>
 8003460:	e7fe      	b.n	8003460 <vPortFree+0x40>
		
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	4b11      	ldr	r3, [pc, #68]	; (80034ac <vPortFree+0x8c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4013      	ands	r3, r2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d019      	beq.n	80034a4 <vPortFree+0x84>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d115      	bne.n	80034a4 <vPortFree+0x84>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <vPortFree+0x8c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	43db      	mvns	r3, r3
 8003482:	401a      	ands	r2, r3
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003488:	f7fd ffd0 	bl	800142c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	4b07      	ldr	r3, [pc, #28]	; (80034b0 <vPortFree+0x90>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	441a      	add	r2, r3
 8003496:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <vPortFree+0x90>)
 8003498:	601a      	str	r2, [r3, #0]
					prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
 800349a:	68b8      	ldr	r0, [r7, #8]
 800349c:	f000 f858 	bl	8003550 <prvInsertBlockIntoFreeList>
					traceFREE( pv, pxLink->xBlockSize );
				}
				xTaskResumeAll();
 80034a0:	f7fd ffd2 	bl	8001448 <xTaskResumeAll>
			}
		}
	}
}
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	200131dc 	.word	0x200131dc
 80034b0:	2000001c 	.word	0x2000001c

080034b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
xBlockLink *pxFirstFreeBlock;
unsigned char *pucHeapEnd, *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
 80034ba:	4b1f      	ldr	r3, [pc, #124]	; (8003538 <prvHeapInit+0x84>)
 80034bc:	f023 0307 	bic.w	r3, r3, #7
 80034c0:	60fb      	str	r3, [r7, #12]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80034c2:	4b1e      	ldr	r3, [pc, #120]	; (800353c <prvHeapInit+0x88>)
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80034c8:	4b1c      	ldr	r3, [pc, #112]	; (800353c <prvHeapInit+0x88>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = pucAlignedHeap + xTotalHeapSize;
 80034ce:	4b1c      	ldr	r3, [pc, #112]	; (8003540 <prvHeapInit+0x8c>)
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4413      	add	r3, r2
 80034d4:	60bb      	str	r3, [r7, #8]
	pucHeapEnd -= heapSTRUCT_SIZE;
 80034d6:	2308      	movs	r3, #8
 80034d8:	425b      	negs	r3, r3
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	4413      	add	r3, r2
 80034de:	60bb      	str	r3, [r7, #8]
	pxEnd = ( void * ) pucHeapEnd;
 80034e0:	4b18      	ldr	r3, [pc, #96]	; (8003544 <prvHeapInit+0x90>)
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	601a      	str	r2, [r3, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
 80034e6:	4b17      	ldr	r3, [pc, #92]	; (8003544 <prvHeapInit+0x90>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <prvHeapInit+0x44>
 80034f2:	f7ff fa2b 	bl	800294c <ulPortSetInterruptMask>
 80034f6:	e7fe      	b.n	80034f6 <prvHeapInit+0x42>
	pxEnd->xBlockSize = 0;
 80034f8:	4b12      	ldr	r3, [pc, #72]	; (8003544 <prvHeapInit+0x90>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2200      	movs	r2, #0
 80034fe:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003500:	4b10      	ldr	r3, [pc, #64]	; (8003544 <prvHeapInit+0x90>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	607b      	str	r3, [r7, #4]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
 800350c:	4a0c      	ldr	r2, [pc, #48]	; (8003540 <prvHeapInit+0x8c>)
 800350e:	2308      	movs	r3, #8
 8003510:	1ad2      	subs	r2, r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003516:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <prvHeapInit+0x90>)
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	601a      	str	r2, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
 800351e:	4b0a      	ldr	r3, [pc, #40]	; (8003548 <prvHeapInit+0x94>)
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	2308      	movs	r3, #8
 8003524:	1ad2      	subs	r2, r2, r3
 8003526:	4b08      	ldr	r3, [pc, #32]	; (8003548 <prvHeapInit+0x94>)
 8003528:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800352a:	4b08      	ldr	r3, [pc, #32]	; (800354c <prvHeapInit+0x98>)
 800352c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003530:	601a      	str	r2, [r3, #0]
}
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	200005d8 	.word	0x200005d8
 800353c:	200131d0 	.word	0x200131d0
 8003540:	00012bf8 	.word	0x00012bf8
 8003544:	200131d8 	.word	0x200131d8
 8003548:	2000001c 	.word	0x2000001c
 800354c:	200131dc 	.word	0x200131dc

08003550 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003558:	4b27      	ldr	r3, [pc, #156]	; (80035f8 <prvInsertBlockIntoFreeList+0xa8>)
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	e002      	b.n	8003564 <prvInsertBlockIntoFreeList+0x14>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	429a      	cmp	r2, r3
 800356c:	d3f7      	bcc.n	800355e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	441a      	add	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	429a      	cmp	r2, r3
 800357e:	d108      	bne.n	8003592 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	441a      	add	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	607b      	str	r3, [r7, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	441a      	add	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d118      	bne.n	80035d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	4b14      	ldr	r3, [pc, #80]	; (80035fc <prvInsertBlockIntoFreeList+0xac>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d00d      	beq.n	80035ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	441a      	add	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	e008      	b.n	80035e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80035ce:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <prvInsertBlockIntoFreeList+0xac>)
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	e003      	b.n	80035e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d002      	beq.n	80035ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	601a      	str	r2, [r3, #0]
	}
}
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	200131d0 	.word	0x200131d0
 80035fc:	200131d8 	.word	0x200131d8

08003600 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800360e:	d013      	beq.n	8003638 <NVIC_PriorityGroupConfig+0x38>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003616:	d00f      	beq.n	8003638 <NVIC_PriorityGroupConfig+0x38>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800361e:	d00b      	beq.n	8003638 <NVIC_PriorityGroupConfig+0x38>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003626:	d007      	beq.n	8003638 <NVIC_PriorityGroupConfig+0x38>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800362e:	d003      	beq.n	8003638 <NVIC_PriorityGroupConfig+0x38>
 8003630:	4806      	ldr	r0, [pc, #24]	; (800364c <NVIC_PriorityGroupConfig+0x4c>)
 8003632:	2173      	movs	r1, #115	; 0x73
 8003634:	f7fd fc80 	bl	8000f38 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8003638:	4a05      	ldr	r2, [pc, #20]	; (8003650 <NVIC_PriorityGroupConfig+0x50>)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003644:	60d3      	str	r3, [r2, #12]
}
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	08005dcc 	.word	0x08005dcc
 8003650:	e000ed00 	.word	0xe000ed00

08003654 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 800365c:	2300      	movs	r3, #0
 800365e:	73fb      	strb	r3, [r7, #15]
 8003660:	2300      	movs	r3, #0
 8003662:	73bb      	strb	r3, [r7, #14]
 8003664:	230f      	movs	r3, #15
 8003666:	737b      	strb	r3, [r7, #13]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	78db      	ldrb	r3, [r3, #3]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d007      	beq.n	8003680 <NVIC_Init+0x2c>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	78db      	ldrb	r3, [r3, #3]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d003      	beq.n	8003680 <NVIC_Init+0x2c>
 8003678:	4830      	ldr	r0, [pc, #192]	; (800373c <NVIC_Init+0xe8>)
 800367a:	2187      	movs	r1, #135	; 0x87
 800367c:	f7fd fc5c 	bl	8000f38 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	785b      	ldrb	r3, [r3, #1]
 8003684:	2b0f      	cmp	r3, #15
 8003686:	d903      	bls.n	8003690 <NVIC_Init+0x3c>
 8003688:	482c      	ldr	r0, [pc, #176]	; (800373c <NVIC_Init+0xe8>)
 800368a:	2188      	movs	r1, #136	; 0x88
 800368c:	f7fd fc54 	bl	8000f38 <assert_failed>
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	789b      	ldrb	r3, [r3, #2]
 8003694:	2b0f      	cmp	r3, #15
 8003696:	d903      	bls.n	80036a0 <NVIC_Init+0x4c>
 8003698:	4828      	ldr	r0, [pc, #160]	; (800373c <NVIC_Init+0xe8>)
 800369a:	2189      	movs	r1, #137	; 0x89
 800369c:	f7fd fc4c 	bl	8000f38 <assert_failed>
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	78db      	ldrb	r3, [r3, #3]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d037      	beq.n	8003718 <NVIC_Init+0xc4>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80036a8:	4b25      	ldr	r3, [pc, #148]	; (8003740 <NVIC_Init+0xec>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	43db      	mvns	r3, r3
 80036ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036b2:	0a1b      	lsrs	r3, r3, #8
 80036b4:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
 80036b8:	f1c3 0304 	rsb	r3, r3, #4
 80036bc:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80036be:	7b7a      	ldrb	r2, [r7, #13]
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
 80036c2:	fa42 f303 	asr.w	r3, r2, r3
 80036c6:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	785b      	ldrb	r3, [r3, #1]
 80036cc:	461a      	mov	r2, r3
 80036ce:	7bbb      	ldrb	r3, [r7, #14]
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	789a      	ldrb	r2, [r3, #2]
 80036da:	7b7b      	ldrb	r3, [r7, #13]
 80036dc:	4013      	ands	r3, r2
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
 80036e8:	011b      	lsls	r3, r3, #4
 80036ea:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80036ec:	4a15      	ldr	r2, [pc, #84]	; (8003744 <NVIC_Init+0xf0>)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	4413      	add	r3, r2
 80036f4:	7bfa      	ldrb	r2, [r7, #15]
 80036f6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80036fa:	4b12      	ldr	r3, [pc, #72]	; (8003744 <NVIC_Init+0xf0>)
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	7812      	ldrb	r2, [r2, #0]
 8003700:	0952      	lsrs	r2, r2, #5
 8003702:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	7809      	ldrb	r1, [r1, #0]
 8003708:	f001 011f 	and.w	r1, r1, #31
 800370c:	2001      	movs	r0, #1
 800370e:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003716:	e00e      	b.n	8003736 <NVIC_Init+0xe2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003718:	4b0a      	ldr	r3, [pc, #40]	; (8003744 <NVIC_Init+0xf0>)
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	7812      	ldrb	r2, [r2, #0]
 800371e:	0952      	lsrs	r2, r2, #5
 8003720:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	7809      	ldrb	r1, [r1, #0]
 8003726:	f001 011f 	and.w	r1, r1, #31
 800372a:	2001      	movs	r0, #1
 800372c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003730:	3220      	adds	r2, #32
 8003732:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	08005dcc 	.word	0x08005dcc
 8003740:	e000ed00 	.word	0xe000ed00
 8003744:	e000e100 	.word	0xe000e100

08003748 <CRC_ResetDR>:
  * @brief  Resets the CRC Data register (DR).
  * @param  None
  * @retval None
  */
void CRC_ResetDR(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  /* Reset CRC generator */
  CRC->CR = CRC_CR_RESET;
 800374c:	4b03      	ldr	r3, [pc, #12]	; (800375c <CRC_ResetDR+0x14>)
 800374e:	2201      	movs	r2, #1
 8003750:	609a      	str	r2, [r3, #8]
}
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	40023000 	.word	0x40023000

08003760 <CRC_CalcBlockCRC>:
  * @param  pBuffer: pointer to the buffer containing the data to be computed
  * @param  BufferLength: length of the buffer to be computed					
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t index = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	60fb      	str	r3, [r7, #12]
  
  for(index = 0; index < BufferLength; index++)
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	e009      	b.n	8003788 <CRC_CalcBlockCRC+0x28>
  {
    CRC->DR = pBuffer[index];
 8003774:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <CRC_CalcBlockCRC+0x40>)
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	0092      	lsls	r2, r2, #2
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	440a      	add	r2, r1
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	601a      	str	r2, [r3, #0]
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	3301      	adds	r3, #1
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d3f1      	bcc.n	8003774 <CRC_CalcBlockCRC+0x14>
  {
    CRC->DR = pBuffer[index];
  }
  return (CRC->DR);
 8003790:	4b03      	ldr	r3, [pc, #12]	; (80037a0 <CRC_CalcBlockCRC+0x40>)
 8003792:	681b      	ldr	r3, [r3, #0]
}
 8003794:	4618      	mov	r0, r3
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	40023000 	.word	0x40023000

080037a4 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	4b72      	ldr	r3, [pc, #456]	; (8003978 <DMA_DeInit+0x1d4>)
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d03f      	beq.n	8003834 <DMA_DeInit+0x90>
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	4b71      	ldr	r3, [pc, #452]	; (800397c <DMA_DeInit+0x1d8>)
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d03b      	beq.n	8003834 <DMA_DeInit+0x90>
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	4b70      	ldr	r3, [pc, #448]	; (8003980 <DMA_DeInit+0x1dc>)
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d037      	beq.n	8003834 <DMA_DeInit+0x90>
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	4b6f      	ldr	r3, [pc, #444]	; (8003984 <DMA_DeInit+0x1e0>)
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d033      	beq.n	8003834 <DMA_DeInit+0x90>
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	4b6e      	ldr	r3, [pc, #440]	; (8003988 <DMA_DeInit+0x1e4>)
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d02f      	beq.n	8003834 <DMA_DeInit+0x90>
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	4b6d      	ldr	r3, [pc, #436]	; (800398c <DMA_DeInit+0x1e8>)
 80037d8:	429a      	cmp	r2, r3
 80037da:	d02b      	beq.n	8003834 <DMA_DeInit+0x90>
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	4b6c      	ldr	r3, [pc, #432]	; (8003990 <DMA_DeInit+0x1ec>)
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d027      	beq.n	8003834 <DMA_DeInit+0x90>
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	4b6b      	ldr	r3, [pc, #428]	; (8003994 <DMA_DeInit+0x1f0>)
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d023      	beq.n	8003834 <DMA_DeInit+0x90>
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	4b6a      	ldr	r3, [pc, #424]	; (8003998 <DMA_DeInit+0x1f4>)
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d01f      	beq.n	8003834 <DMA_DeInit+0x90>
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	4b69      	ldr	r3, [pc, #420]	; (800399c <DMA_DeInit+0x1f8>)
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d01b      	beq.n	8003834 <DMA_DeInit+0x90>
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	4b68      	ldr	r3, [pc, #416]	; (80039a0 <DMA_DeInit+0x1fc>)
 8003800:	429a      	cmp	r2, r3
 8003802:	d017      	beq.n	8003834 <DMA_DeInit+0x90>
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	4b67      	ldr	r3, [pc, #412]	; (80039a4 <DMA_DeInit+0x200>)
 8003808:	429a      	cmp	r2, r3
 800380a:	d013      	beq.n	8003834 <DMA_DeInit+0x90>
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	4b66      	ldr	r3, [pc, #408]	; (80039a8 <DMA_DeInit+0x204>)
 8003810:	429a      	cmp	r2, r3
 8003812:	d00f      	beq.n	8003834 <DMA_DeInit+0x90>
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	4b65      	ldr	r3, [pc, #404]	; (80039ac <DMA_DeInit+0x208>)
 8003818:	429a      	cmp	r2, r3
 800381a:	d00b      	beq.n	8003834 <DMA_DeInit+0x90>
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	4b64      	ldr	r3, [pc, #400]	; (80039b0 <DMA_DeInit+0x20c>)
 8003820:	429a      	cmp	r2, r3
 8003822:	d007      	beq.n	8003834 <DMA_DeInit+0x90>
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	4b63      	ldr	r3, [pc, #396]	; (80039b4 <DMA_DeInit+0x210>)
 8003828:	429a      	cmp	r2, r3
 800382a:	d003      	beq.n	8003834 <DMA_DeInit+0x90>
 800382c:	4862      	ldr	r0, [pc, #392]	; (80039b8 <DMA_DeInit+0x214>)
 800382e:	21bf      	movs	r1, #191	; 0xbf
 8003830:	f7fd fb82 	bl	8000f38 <assert_failed>

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f023 0201 	bic.w	r2, r3, #1
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2221      	movs	r2, #33	; 0x21
 8003862:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	4b44      	ldr	r3, [pc, #272]	; (8003978 <DMA_DeInit+0x1d4>)
 8003868:	429a      	cmp	r2, r3
 800386a:	d103      	bne.n	8003874 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 800386c:	4b53      	ldr	r3, [pc, #332]	; (80039bc <DMA_DeInit+0x218>)
 800386e:	223d      	movs	r2, #61	; 0x3d
 8003870:	609a      	str	r2, [r3, #8]
 8003872:	e07e      	b.n	8003972 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	4b41      	ldr	r3, [pc, #260]	; (800397c <DMA_DeInit+0x1d8>)
 8003878:	429a      	cmp	r2, r3
 800387a:	d104      	bne.n	8003886 <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 800387c:	4b4f      	ldr	r3, [pc, #316]	; (80039bc <DMA_DeInit+0x218>)
 800387e:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8003882:	609a      	str	r2, [r3, #8]
 8003884:	e075      	b.n	8003972 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	4b3d      	ldr	r3, [pc, #244]	; (8003980 <DMA_DeInit+0x1dc>)
 800388a:	429a      	cmp	r2, r3
 800388c:	d104      	bne.n	8003898 <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 800388e:	4b4b      	ldr	r3, [pc, #300]	; (80039bc <DMA_DeInit+0x218>)
 8003890:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8003894:	609a      	str	r2, [r3, #8]
 8003896:	e06c      	b.n	8003972 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	4b3a      	ldr	r3, [pc, #232]	; (8003984 <DMA_DeInit+0x1e0>)
 800389c:	429a      	cmp	r2, r3
 800389e:	d104      	bne.n	80038aa <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 80038a0:	4b46      	ldr	r3, [pc, #280]	; (80039bc <DMA_DeInit+0x218>)
 80038a2:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80038a6:	609a      	str	r2, [r3, #8]
 80038a8:	e063      	b.n	8003972 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	4b36      	ldr	r3, [pc, #216]	; (8003988 <DMA_DeInit+0x1e4>)
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d103      	bne.n	80038ba <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 80038b2:	4b42      	ldr	r3, [pc, #264]	; (80039bc <DMA_DeInit+0x218>)
 80038b4:	4a42      	ldr	r2, [pc, #264]	; (80039c0 <DMA_DeInit+0x21c>)
 80038b6:	60da      	str	r2, [r3, #12]
 80038b8:	e05b      	b.n	8003972 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	4b33      	ldr	r3, [pc, #204]	; (800398c <DMA_DeInit+0x1e8>)
 80038be:	429a      	cmp	r2, r3
 80038c0:	d103      	bne.n	80038ca <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 80038c2:	4b3e      	ldr	r3, [pc, #248]	; (80039bc <DMA_DeInit+0x218>)
 80038c4:	4a3f      	ldr	r2, [pc, #252]	; (80039c4 <DMA_DeInit+0x220>)
 80038c6:	60da      	str	r2, [r3, #12]
 80038c8:	e053      	b.n	8003972 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	4b30      	ldr	r3, [pc, #192]	; (8003990 <DMA_DeInit+0x1ec>)
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d103      	bne.n	80038da <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 80038d2:	4b3a      	ldr	r3, [pc, #232]	; (80039bc <DMA_DeInit+0x218>)
 80038d4:	4a3c      	ldr	r2, [pc, #240]	; (80039c8 <DMA_DeInit+0x224>)
 80038d6:	60da      	str	r2, [r3, #12]
 80038d8:	e04b      	b.n	8003972 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	4b2d      	ldr	r3, [pc, #180]	; (8003994 <DMA_DeInit+0x1f0>)
 80038de:	429a      	cmp	r2, r3
 80038e0:	d104      	bne.n	80038ec <DMA_DeInit+0x148>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 80038e2:	4b36      	ldr	r3, [pc, #216]	; (80039bc <DMA_DeInit+0x218>)
 80038e4:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 80038e8:	60da      	str	r2, [r3, #12]
 80038ea:	e042      	b.n	8003972 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	4b2a      	ldr	r3, [pc, #168]	; (8003998 <DMA_DeInit+0x1f4>)
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d103      	bne.n	80038fc <DMA_DeInit+0x158>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 80038f4:	4b35      	ldr	r3, [pc, #212]	; (80039cc <DMA_DeInit+0x228>)
 80038f6:	223d      	movs	r2, #61	; 0x3d
 80038f8:	609a      	str	r2, [r3, #8]
 80038fa:	e03a      	b.n	8003972 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	4b27      	ldr	r3, [pc, #156]	; (800399c <DMA_DeInit+0x1f8>)
 8003900:	429a      	cmp	r2, r3
 8003902:	d104      	bne.n	800390e <DMA_DeInit+0x16a>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8003904:	4b31      	ldr	r3, [pc, #196]	; (80039cc <DMA_DeInit+0x228>)
 8003906:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800390a:	609a      	str	r2, [r3, #8]
 800390c:	e031      	b.n	8003972 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	4b23      	ldr	r3, [pc, #140]	; (80039a0 <DMA_DeInit+0x1fc>)
 8003912:	429a      	cmp	r2, r3
 8003914:	d104      	bne.n	8003920 <DMA_DeInit+0x17c>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8003916:	4b2d      	ldr	r3, [pc, #180]	; (80039cc <DMA_DeInit+0x228>)
 8003918:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 800391c:	609a      	str	r2, [r3, #8]
 800391e:	e028      	b.n	8003972 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	4b20      	ldr	r3, [pc, #128]	; (80039a4 <DMA_DeInit+0x200>)
 8003924:	429a      	cmp	r2, r3
 8003926:	d104      	bne.n	8003932 <DMA_DeInit+0x18e>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8003928:	4b28      	ldr	r3, [pc, #160]	; (80039cc <DMA_DeInit+0x228>)
 800392a:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800392e:	609a      	str	r2, [r3, #8]
 8003930:	e01f      	b.n	8003972 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	4b1c      	ldr	r3, [pc, #112]	; (80039a8 <DMA_DeInit+0x204>)
 8003936:	429a      	cmp	r2, r3
 8003938:	d103      	bne.n	8003942 <DMA_DeInit+0x19e>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 800393a:	4b24      	ldr	r3, [pc, #144]	; (80039cc <DMA_DeInit+0x228>)
 800393c:	4a20      	ldr	r2, [pc, #128]	; (80039c0 <DMA_DeInit+0x21c>)
 800393e:	60da      	str	r2, [r3, #12]
 8003940:	e017      	b.n	8003972 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	4b19      	ldr	r3, [pc, #100]	; (80039ac <DMA_DeInit+0x208>)
 8003946:	429a      	cmp	r2, r3
 8003948:	d103      	bne.n	8003952 <DMA_DeInit+0x1ae>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 800394a:	4b20      	ldr	r3, [pc, #128]	; (80039cc <DMA_DeInit+0x228>)
 800394c:	4a1d      	ldr	r2, [pc, #116]	; (80039c4 <DMA_DeInit+0x220>)
 800394e:	60da      	str	r2, [r3, #12]
 8003950:	e00f      	b.n	8003972 <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	4b16      	ldr	r3, [pc, #88]	; (80039b0 <DMA_DeInit+0x20c>)
 8003956:	429a      	cmp	r2, r3
 8003958:	d103      	bne.n	8003962 <DMA_DeInit+0x1be>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 800395a:	4b1c      	ldr	r3, [pc, #112]	; (80039cc <DMA_DeInit+0x228>)
 800395c:	4a1a      	ldr	r2, [pc, #104]	; (80039c8 <DMA_DeInit+0x224>)
 800395e:	60da      	str	r2, [r3, #12]
 8003960:	e007      	b.n	8003972 <DMA_DeInit+0x1ce>
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	4b13      	ldr	r3, [pc, #76]	; (80039b4 <DMA_DeInit+0x210>)
 8003966:	429a      	cmp	r2, r3
 8003968:	d103      	bne.n	8003972 <DMA_DeInit+0x1ce>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 800396a:	4b18      	ldr	r3, [pc, #96]	; (80039cc <DMA_DeInit+0x228>)
 800396c:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8003970:	60da      	str	r2, [r3, #12]
    }
  }
}
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40026010 	.word	0x40026010
 800397c:	40026028 	.word	0x40026028
 8003980:	40026040 	.word	0x40026040
 8003984:	40026058 	.word	0x40026058
 8003988:	40026070 	.word	0x40026070
 800398c:	40026088 	.word	0x40026088
 8003990:	400260a0 	.word	0x400260a0
 8003994:	400260b8 	.word	0x400260b8
 8003998:	40026410 	.word	0x40026410
 800399c:	40026428 	.word	0x40026428
 80039a0:	40026440 	.word	0x40026440
 80039a4:	40026458 	.word	0x40026458
 80039a8:	40026470 	.word	0x40026470
 80039ac:	40026488 	.word	0x40026488
 80039b0:	400264a0 	.word	0x400264a0
 80039b4:	400264b8 	.word	0x400264b8
 80039b8:	08005e14 	.word	0x08005e14
 80039bc:	40026000 	.word	0x40026000
 80039c0:	2000003d 	.word	0x2000003d
 80039c4:	20000f40 	.word	0x20000f40
 80039c8:	203d0000 	.word	0x203d0000
 80039cc:	40026400 	.word	0x40026400

080039d0 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	4b98      	ldr	r3, [pc, #608]	; (8003c44 <DMA_Init+0x274>)
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d040      	beq.n	8003a68 <DMA_Init+0x98>
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	4b97      	ldr	r3, [pc, #604]	; (8003c48 <DMA_Init+0x278>)
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d03c      	beq.n	8003a68 <DMA_Init+0x98>
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	4b96      	ldr	r3, [pc, #600]	; (8003c4c <DMA_Init+0x27c>)
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d038      	beq.n	8003a68 <DMA_Init+0x98>
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	4b95      	ldr	r3, [pc, #596]	; (8003c50 <DMA_Init+0x280>)
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d034      	beq.n	8003a68 <DMA_Init+0x98>
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	4b94      	ldr	r3, [pc, #592]	; (8003c54 <DMA_Init+0x284>)
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d030      	beq.n	8003a68 <DMA_Init+0x98>
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	4b93      	ldr	r3, [pc, #588]	; (8003c58 <DMA_Init+0x288>)
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d02c      	beq.n	8003a68 <DMA_Init+0x98>
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	4b92      	ldr	r3, [pc, #584]	; (8003c5c <DMA_Init+0x28c>)
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d028      	beq.n	8003a68 <DMA_Init+0x98>
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	4b91      	ldr	r3, [pc, #580]	; (8003c60 <DMA_Init+0x290>)
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d024      	beq.n	8003a68 <DMA_Init+0x98>
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	4b90      	ldr	r3, [pc, #576]	; (8003c64 <DMA_Init+0x294>)
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d020      	beq.n	8003a68 <DMA_Init+0x98>
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	4b8f      	ldr	r3, [pc, #572]	; (8003c68 <DMA_Init+0x298>)
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d01c      	beq.n	8003a68 <DMA_Init+0x98>
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	4b8e      	ldr	r3, [pc, #568]	; (8003c6c <DMA_Init+0x29c>)
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d018      	beq.n	8003a68 <DMA_Init+0x98>
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	4b8d      	ldr	r3, [pc, #564]	; (8003c70 <DMA_Init+0x2a0>)
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d014      	beq.n	8003a68 <DMA_Init+0x98>
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	4b8c      	ldr	r3, [pc, #560]	; (8003c74 <DMA_Init+0x2a4>)
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d010      	beq.n	8003a68 <DMA_Init+0x98>
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	4b8b      	ldr	r3, [pc, #556]	; (8003c78 <DMA_Init+0x2a8>)
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d00c      	beq.n	8003a68 <DMA_Init+0x98>
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	4b8a      	ldr	r3, [pc, #552]	; (8003c7c <DMA_Init+0x2ac>)
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d008      	beq.n	8003a68 <DMA_Init+0x98>
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	4b89      	ldr	r3, [pc, #548]	; (8003c80 <DMA_Init+0x2b0>)
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d004      	beq.n	8003a68 <DMA_Init+0x98>
 8003a5e:	4889      	ldr	r0, [pc, #548]	; (8003c84 <DMA_Init+0x2b4>)
 8003a60:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8003a64:	f7fd fa68 	bl	8000f38 <assert_failed>
  assert_param(IS_DMA_CHANNEL(DMA_InitStruct->DMA_Channel));
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d027      	beq.n	8003ac0 <DMA_Init+0xf0>
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a78:	d022      	beq.n	8003ac0 <DMA_Init+0xf0>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a82:	d01d      	beq.n	8003ac0 <DMA_Init+0xf0>
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003a8c:	d018      	beq.n	8003ac0 <DMA_Init+0xf0>
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a96:	d013      	beq.n	8003ac0 <DMA_Init+0xf0>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8003aa0:	d00e      	beq.n	8003ac0 <DMA_Init+0xf0>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003aaa:	d009      	beq.n	8003ac0 <DMA_Init+0xf0>
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8003ab4:	d004      	beq.n	8003ac0 <DMA_Init+0xf0>
 8003ab6:	4873      	ldr	r0, [pc, #460]	; (8003c84 <DMA_Init+0x2b4>)
 8003ab8:	f240 113d 	movw	r1, #317	; 0x13d
 8003abc:	f7fd fa3c 	bl	8000f38 <assert_failed>
  assert_param(IS_DMA_DIRECTION(DMA_InitStruct->DMA_DIR));
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00c      	beq.n	8003ae2 <DMA_Init+0x112>
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	2b40      	cmp	r3, #64	; 0x40
 8003ace:	d008      	beq.n	8003ae2 <DMA_Init+0x112>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	2b80      	cmp	r3, #128	; 0x80
 8003ad6:	d004      	beq.n	8003ae2 <DMA_Init+0x112>
 8003ad8:	486a      	ldr	r0, [pc, #424]	; (8003c84 <DMA_Init+0x2b4>)
 8003ada:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8003ade:	f7fd fa2b 	bl	8000f38 <assert_failed>
  assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d004      	beq.n	8003af4 <DMA_Init+0x124>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af2:	d304      	bcc.n	8003afe <DMA_Init+0x12e>
 8003af4:	4863      	ldr	r0, [pc, #396]	; (8003c84 <DMA_Init+0x2b4>)
 8003af6:	f240 113f 	movw	r1, #319	; 0x13f
 8003afa:	f7fd fa1d 	bl	8000f38 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b06:	d008      	beq.n	8003b1a <DMA_Init+0x14a>
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d004      	beq.n	8003b1a <DMA_Init+0x14a>
 8003b10:	485c      	ldr	r0, [pc, #368]	; (8003c84 <DMA_Init+0x2b4>)
 8003b12:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003b16:	f7fd fa0f 	bl	8000f38 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b22:	d008      	beq.n	8003b36 <DMA_Init+0x166>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d004      	beq.n	8003b36 <DMA_Init+0x166>
 8003b2c:	4855      	ldr	r0, [pc, #340]	; (8003c84 <DMA_Init+0x2b4>)
 8003b2e:	f240 1141 	movw	r1, #321	; 0x141
 8003b32:	f7fd fa01 	bl	8000f38 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00e      	beq.n	8003b5c <DMA_Init+0x18c>
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b46:	d009      	beq.n	8003b5c <DMA_Init+0x18c>
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b50:	d004      	beq.n	8003b5c <DMA_Init+0x18c>
 8003b52:	484c      	ldr	r0, [pc, #304]	; (8003c84 <DMA_Init+0x2b4>)
 8003b54:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8003b58:	f7fd f9ee 	bl	8000f38 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00e      	beq.n	8003b82 <DMA_Init+0x1b2>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b6c:	d009      	beq.n	8003b82 <DMA_Init+0x1b2>
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b76:	d004      	beq.n	8003b82 <DMA_Init+0x1b2>
 8003b78:	4842      	ldr	r0, [pc, #264]	; (8003c84 <DMA_Init+0x2b4>)
 8003b7a:	f240 1143 	movw	r1, #323	; 0x143
 8003b7e:	f7fd f9db 	bl	8000f38 <assert_failed>
  assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d009      	beq.n	8003b9e <DMA_Init+0x1ce>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b92:	d004      	beq.n	8003b9e <DMA_Init+0x1ce>
 8003b94:	483b      	ldr	r0, [pc, #236]	; (8003c84 <DMA_Init+0x2b4>)
 8003b96:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8003b9a:	f7fd f9cd 	bl	8000f38 <assert_failed>
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d013      	beq.n	8003bce <DMA_Init+0x1fe>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bae:	d00e      	beq.n	8003bce <DMA_Init+0x1fe>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bb8:	d009      	beq.n	8003bce <DMA_Init+0x1fe>
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bc2:	d004      	beq.n	8003bce <DMA_Init+0x1fe>
 8003bc4:	482f      	ldr	r0, [pc, #188]	; (8003c84 <DMA_Init+0x2b4>)
 8003bc6:	f240 1145 	movw	r1, #325	; 0x145
 8003bca:	f7fd f9b5 	bl	8000f38 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(DMA_InitStruct->DMA_FIFOMode));
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d008      	beq.n	8003be8 <DMA_Init+0x218>
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d004      	beq.n	8003be8 <DMA_Init+0x218>
 8003bde:	4829      	ldr	r0, [pc, #164]	; (8003c84 <DMA_Init+0x2b4>)
 8003be0:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8003be4:	f7fd f9a8 	bl	8000f38 <assert_failed>
  assert_param(IS_DMA_FIFO_THRESHOLD(DMA_InitStruct->DMA_FIFOThreshold));
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d010      	beq.n	8003c12 <DMA_Init+0x242>
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d00c      	beq.n	8003c12 <DMA_Init+0x242>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d008      	beq.n	8003c12 <DMA_Init+0x242>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c04:	2b03      	cmp	r3, #3
 8003c06:	d004      	beq.n	8003c12 <DMA_Init+0x242>
 8003c08:	481e      	ldr	r0, [pc, #120]	; (8003c84 <DMA_Init+0x2b4>)
 8003c0a:	f240 1147 	movw	r1, #327	; 0x147
 8003c0e:	f7fd f993 	bl	8000f38 <assert_failed>
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d036      	beq.n	8003c88 <DMA_Init+0x2b8>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c22:	d031      	beq.n	8003c88 <DMA_Init+0x2b8>
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c2c:	d02c      	beq.n	8003c88 <DMA_Init+0x2b8>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c36:	d027      	beq.n	8003c88 <DMA_Init+0x2b8>
 8003c38:	4812      	ldr	r0, [pc, #72]	; (8003c84 <DMA_Init+0x2b4>)
 8003c3a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003c3e:	f7fd f97b 	bl	8000f38 <assert_failed>
 8003c42:	e021      	b.n	8003c88 <DMA_Init+0x2b8>
 8003c44:	40026010 	.word	0x40026010
 8003c48:	40026028 	.word	0x40026028
 8003c4c:	40026040 	.word	0x40026040
 8003c50:	40026058 	.word	0x40026058
 8003c54:	40026070 	.word	0x40026070
 8003c58:	40026088 	.word	0x40026088
 8003c5c:	400260a0 	.word	0x400260a0
 8003c60:	400260b8 	.word	0x400260b8
 8003c64:	40026410 	.word	0x40026410
 8003c68:	40026428 	.word	0x40026428
 8003c6c:	40026440 	.word	0x40026440
 8003c70:	40026458 	.word	0x40026458
 8003c74:	40026470 	.word	0x40026470
 8003c78:	40026488 	.word	0x40026488
 8003c7c:	400264a0 	.word	0x400264a0
 8003c80:	400264b8 	.word	0x400264b8
 8003c84:	08005e14 	.word	0x08005e14
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d013      	beq.n	8003cb8 <DMA_Init+0x2e8>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c98:	d00e      	beq.n	8003cb8 <DMA_Init+0x2e8>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ca2:	d009      	beq.n	8003cb8 <DMA_Init+0x2e8>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003cac:	d004      	beq.n	8003cb8 <DMA_Init+0x2e8>
 8003cae:	4828      	ldr	r0, [pc, #160]	; (8003d50 <DMA_Init+0x380>)
 8003cb0:	f240 1149 	movw	r1, #329	; 0x149
 8003cb4:	f7fd f940 	bl	8000f38 <assert_failed>

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	4b24      	ldr	r3, [pc, #144]	; (8003d54 <DMA_Init+0x384>)
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8003cd4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003ce0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003cec:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8003cf8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfe:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f023 0307 	bic.w	r3, r3, #7
 8003d18:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	4313      	orrs	r3, r2
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	691a      	ldr	r2, [r3, #16]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	60da      	str	r2, [r3, #12]
}
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	08005e14 	.word	0x08005e14
 8003d54:	f01c803f 	.word	0xf01c803f

08003d58 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	4b31      	ldr	r3, [pc, #196]	; (8003e98 <DMA_Cmd+0xd4>)
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d040      	beq.n	8003e5a <DMA_Cmd+0x96>
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	4b30      	ldr	r3, [pc, #192]	; (8003e9c <DMA_Cmd+0xd8>)
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d03c      	beq.n	8003e5a <DMA_Cmd+0x96>
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	4b2f      	ldr	r3, [pc, #188]	; (8003ea0 <DMA_Cmd+0xdc>)
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d038      	beq.n	8003e5a <DMA_Cmd+0x96>
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	4b2e      	ldr	r3, [pc, #184]	; (8003ea4 <DMA_Cmd+0xe0>)
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d034      	beq.n	8003e5a <DMA_Cmd+0x96>
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	4b2d      	ldr	r3, [pc, #180]	; (8003ea8 <DMA_Cmd+0xe4>)
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d030      	beq.n	8003e5a <DMA_Cmd+0x96>
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	4b2c      	ldr	r3, [pc, #176]	; (8003eac <DMA_Cmd+0xe8>)
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d02c      	beq.n	8003e5a <DMA_Cmd+0x96>
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	4b2b      	ldr	r3, [pc, #172]	; (8003eb0 <DMA_Cmd+0xec>)
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d028      	beq.n	8003e5a <DMA_Cmd+0x96>
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	4b2a      	ldr	r3, [pc, #168]	; (8003eb4 <DMA_Cmd+0xf0>)
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d024      	beq.n	8003e5a <DMA_Cmd+0x96>
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	4b29      	ldr	r3, [pc, #164]	; (8003eb8 <DMA_Cmd+0xf4>)
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d020      	beq.n	8003e5a <DMA_Cmd+0x96>
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	4b28      	ldr	r3, [pc, #160]	; (8003ebc <DMA_Cmd+0xf8>)
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d01c      	beq.n	8003e5a <DMA_Cmd+0x96>
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	4b27      	ldr	r3, [pc, #156]	; (8003ec0 <DMA_Cmd+0xfc>)
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d018      	beq.n	8003e5a <DMA_Cmd+0x96>
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	4b26      	ldr	r3, [pc, #152]	; (8003ec4 <DMA_Cmd+0x100>)
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d014      	beq.n	8003e5a <DMA_Cmd+0x96>
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	4b25      	ldr	r3, [pc, #148]	; (8003ec8 <DMA_Cmd+0x104>)
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d010      	beq.n	8003e5a <DMA_Cmd+0x96>
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	4b24      	ldr	r3, [pc, #144]	; (8003ecc <DMA_Cmd+0x108>)
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d00c      	beq.n	8003e5a <DMA_Cmd+0x96>
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	4b23      	ldr	r3, [pc, #140]	; (8003ed0 <DMA_Cmd+0x10c>)
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d008      	beq.n	8003e5a <DMA_Cmd+0x96>
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	4b22      	ldr	r3, [pc, #136]	; (8003ed4 <DMA_Cmd+0x110>)
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d004      	beq.n	8003e5a <DMA_Cmd+0x96>
 8003e50:	4821      	ldr	r0, [pc, #132]	; (8003ed8 <DMA_Cmd+0x114>)
 8003e52:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003e56:	f7fd f86f 	bl	8000f38 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8003e5a:	78fb      	ldrb	r3, [r7, #3]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d007      	beq.n	8003e70 <DMA_Cmd+0xac>
 8003e60:	78fb      	ldrb	r3, [r7, #3]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d004      	beq.n	8003e70 <DMA_Cmd+0xac>
 8003e66:	481c      	ldr	r0, [pc, #112]	; (8003ed8 <DMA_Cmd+0x114>)
 8003e68:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8003e6c:	f7fd f864 	bl	8000f38 <assert_failed>

  if (NewState != DISABLE)
 8003e70:	78fb      	ldrb	r3, [r7, #3]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d006      	beq.n	8003e84 <DMA_Cmd+0xc0>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f043 0201 	orr.w	r2, r3, #1
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	e005      	b.n	8003e90 <DMA_Cmd+0xcc>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f023 0201 	bic.w	r2, r3, #1
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	601a      	str	r2, [r3, #0]
  }
}
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40026010 	.word	0x40026010
 8003e9c:	40026028 	.word	0x40026028
 8003ea0:	40026040 	.word	0x40026040
 8003ea4:	40026058 	.word	0x40026058
 8003ea8:	40026070 	.word	0x40026070
 8003eac:	40026088 	.word	0x40026088
 8003eb0:	400260a0 	.word	0x400260a0
 8003eb4:	400260b8 	.word	0x400260b8
 8003eb8:	40026410 	.word	0x40026410
 8003ebc:	40026428 	.word	0x40026428
 8003ec0:	40026440 	.word	0x40026440
 8003ec4:	40026458 	.word	0x40026458
 8003ec8:	40026470 	.word	0x40026470
 8003ecc:	40026488 	.word	0x40026488
 8003ed0:	400264a0 	.word	0x400264a0
 8003ed4:	400264b8 	.word	0x400264b8
 8003ed8:	08005e14 	.word	0x08005e14

08003edc <DMA_SetCurrDataCounter>:
  *         DMAy_SxPAR register is considered as Peripheral.
  *      
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	4b25      	ldr	r3, [pc, #148]	; (8003f80 <DMA_SetCurrDataCounter+0xa4>)
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d040      	beq.n	8003f72 <DMA_SetCurrDataCounter+0x96>
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	4b24      	ldr	r3, [pc, #144]	; (8003f84 <DMA_SetCurrDataCounter+0xa8>)
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d03c      	beq.n	8003f72 <DMA_SetCurrDataCounter+0x96>
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	4b23      	ldr	r3, [pc, #140]	; (8003f88 <DMA_SetCurrDataCounter+0xac>)
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d038      	beq.n	8003f72 <DMA_SetCurrDataCounter+0x96>
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	4b22      	ldr	r3, [pc, #136]	; (8003f8c <DMA_SetCurrDataCounter+0xb0>)
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d034      	beq.n	8003f72 <DMA_SetCurrDataCounter+0x96>
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	4b21      	ldr	r3, [pc, #132]	; (8003f90 <DMA_SetCurrDataCounter+0xb4>)
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d030      	beq.n	8003f72 <DMA_SetCurrDataCounter+0x96>
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	4b20      	ldr	r3, [pc, #128]	; (8003f94 <DMA_SetCurrDataCounter+0xb8>)
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d02c      	beq.n	8003f72 <DMA_SetCurrDataCounter+0x96>
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	4b1f      	ldr	r3, [pc, #124]	; (8003f98 <DMA_SetCurrDataCounter+0xbc>)
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d028      	beq.n	8003f72 <DMA_SetCurrDataCounter+0x96>
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	4b1e      	ldr	r3, [pc, #120]	; (8003f9c <DMA_SetCurrDataCounter+0xc0>)
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d024      	beq.n	8003f72 <DMA_SetCurrDataCounter+0x96>
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	4b1d      	ldr	r3, [pc, #116]	; (8003fa0 <DMA_SetCurrDataCounter+0xc4>)
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d020      	beq.n	8003f72 <DMA_SetCurrDataCounter+0x96>
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	4b1c      	ldr	r3, [pc, #112]	; (8003fa4 <DMA_SetCurrDataCounter+0xc8>)
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d01c      	beq.n	8003f72 <DMA_SetCurrDataCounter+0x96>
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	4b1b      	ldr	r3, [pc, #108]	; (8003fa8 <DMA_SetCurrDataCounter+0xcc>)
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d018      	beq.n	8003f72 <DMA_SetCurrDataCounter+0x96>
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	4b1a      	ldr	r3, [pc, #104]	; (8003fac <DMA_SetCurrDataCounter+0xd0>)
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d014      	beq.n	8003f72 <DMA_SetCurrDataCounter+0x96>
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	4b19      	ldr	r3, [pc, #100]	; (8003fb0 <DMA_SetCurrDataCounter+0xd4>)
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d010      	beq.n	8003f72 <DMA_SetCurrDataCounter+0x96>
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	4b18      	ldr	r3, [pc, #96]	; (8003fb4 <DMA_SetCurrDataCounter+0xd8>)
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d00c      	beq.n	8003f72 <DMA_SetCurrDataCounter+0x96>
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	4b17      	ldr	r3, [pc, #92]	; (8003fb8 <DMA_SetCurrDataCounter+0xdc>)
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d008      	beq.n	8003f72 <DMA_SetCurrDataCounter+0x96>
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	4b16      	ldr	r3, [pc, #88]	; (8003fbc <DMA_SetCurrDataCounter+0xe0>)
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d004      	beq.n	8003f72 <DMA_SetCurrDataCounter+0x96>
 8003f68:	4815      	ldr	r0, [pc, #84]	; (8003fc0 <DMA_SetCurrDataCounter+0xe4>)
 8003f6a:	f240 2175 	movw	r1, #629	; 0x275
 8003f6e:	f7fc ffe3 	bl	8000f38 <assert_failed>

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 8003f72:	887a      	ldrh	r2, [r7, #2]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	605a      	str	r2, [r3, #4]
}
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	40026010 	.word	0x40026010
 8003f84:	40026028 	.word	0x40026028
 8003f88:	40026040 	.word	0x40026040
 8003f8c:	40026058 	.word	0x40026058
 8003f90:	40026070 	.word	0x40026070
 8003f94:	40026088 	.word	0x40026088
 8003f98:	400260a0 	.word	0x400260a0
 8003f9c:	400260b8 	.word	0x400260b8
 8003fa0:	40026410 	.word	0x40026410
 8003fa4:	40026428 	.word	0x40026428
 8003fa8:	40026440 	.word	0x40026440
 8003fac:	40026458 	.word	0x40026458
 8003fb0:	40026470 	.word	0x40026470
 8003fb4:	40026488 	.word	0x40026488
 8003fb8:	400264a0 	.word	0x400264a0
 8003fbc:	400264b8 	.word	0x400264b8
 8003fc0:	08005e14 	.word	0x08005e14

08003fc4 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	4b2a      	ldr	r3, [pc, #168]	; (800407c <DMA_GetCmdStatus+0xb8>)
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d040      	beq.n	800405a <DMA_GetCmdStatus+0x96>
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	4b29      	ldr	r3, [pc, #164]	; (8004080 <DMA_GetCmdStatus+0xbc>)
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d03c      	beq.n	800405a <DMA_GetCmdStatus+0x96>
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	4b28      	ldr	r3, [pc, #160]	; (8004084 <DMA_GetCmdStatus+0xc0>)
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d038      	beq.n	800405a <DMA_GetCmdStatus+0x96>
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	4b27      	ldr	r3, [pc, #156]	; (8004088 <DMA_GetCmdStatus+0xc4>)
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d034      	beq.n	800405a <DMA_GetCmdStatus+0x96>
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	4b26      	ldr	r3, [pc, #152]	; (800408c <DMA_GetCmdStatus+0xc8>)
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d030      	beq.n	800405a <DMA_GetCmdStatus+0x96>
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	4b25      	ldr	r3, [pc, #148]	; (8004090 <DMA_GetCmdStatus+0xcc>)
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d02c      	beq.n	800405a <DMA_GetCmdStatus+0x96>
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	4b24      	ldr	r3, [pc, #144]	; (8004094 <DMA_GetCmdStatus+0xd0>)
 8004004:	429a      	cmp	r2, r3
 8004006:	d028      	beq.n	800405a <DMA_GetCmdStatus+0x96>
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	4b23      	ldr	r3, [pc, #140]	; (8004098 <DMA_GetCmdStatus+0xd4>)
 800400c:	429a      	cmp	r2, r3
 800400e:	d024      	beq.n	800405a <DMA_GetCmdStatus+0x96>
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	4b22      	ldr	r3, [pc, #136]	; (800409c <DMA_GetCmdStatus+0xd8>)
 8004014:	429a      	cmp	r2, r3
 8004016:	d020      	beq.n	800405a <DMA_GetCmdStatus+0x96>
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	4b21      	ldr	r3, [pc, #132]	; (80040a0 <DMA_GetCmdStatus+0xdc>)
 800401c:	429a      	cmp	r2, r3
 800401e:	d01c      	beq.n	800405a <DMA_GetCmdStatus+0x96>
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	4b20      	ldr	r3, [pc, #128]	; (80040a4 <DMA_GetCmdStatus+0xe0>)
 8004024:	429a      	cmp	r2, r3
 8004026:	d018      	beq.n	800405a <DMA_GetCmdStatus+0x96>
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	4b1f      	ldr	r3, [pc, #124]	; (80040a8 <DMA_GetCmdStatus+0xe4>)
 800402c:	429a      	cmp	r2, r3
 800402e:	d014      	beq.n	800405a <DMA_GetCmdStatus+0x96>
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	4b1e      	ldr	r3, [pc, #120]	; (80040ac <DMA_GetCmdStatus+0xe8>)
 8004034:	429a      	cmp	r2, r3
 8004036:	d010      	beq.n	800405a <DMA_GetCmdStatus+0x96>
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	4b1d      	ldr	r3, [pc, #116]	; (80040b0 <DMA_GetCmdStatus+0xec>)
 800403c:	429a      	cmp	r2, r3
 800403e:	d00c      	beq.n	800405a <DMA_GetCmdStatus+0x96>
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	4b1c      	ldr	r3, [pc, #112]	; (80040b4 <DMA_GetCmdStatus+0xf0>)
 8004044:	429a      	cmp	r2, r3
 8004046:	d008      	beq.n	800405a <DMA_GetCmdStatus+0x96>
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	4b1b      	ldr	r3, [pc, #108]	; (80040b8 <DMA_GetCmdStatus+0xf4>)
 800404c:	429a      	cmp	r2, r3
 800404e:	d004      	beq.n	800405a <DMA_GetCmdStatus+0x96>
 8004050:	481a      	ldr	r0, [pc, #104]	; (80040bc <DMA_GetCmdStatus+0xf8>)
 8004052:	f240 31a2 	movw	r1, #930	; 0x3a2
 8004056:	f7fc ff6f 	bl	8000f38 <assert_failed>

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <DMA_GetCmdStatus+0xa8>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8004066:	2301      	movs	r3, #1
 8004068:	73fb      	strb	r3, [r7, #15]
 800406a:	e001      	b.n	8004070 <DMA_GetCmdStatus+0xac>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800406c:	2300      	movs	r3, #0
 800406e:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8004070:	7bfb      	ldrb	r3, [r7, #15]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40026010 	.word	0x40026010
 8004080:	40026028 	.word	0x40026028
 8004084:	40026040 	.word	0x40026040
 8004088:	40026058 	.word	0x40026058
 800408c:	40026070 	.word	0x40026070
 8004090:	40026088 	.word	0x40026088
 8004094:	400260a0 	.word	0x400260a0
 8004098:	400260b8 	.word	0x400260b8
 800409c:	40026410 	.word	0x40026410
 80040a0:	40026428 	.word	0x40026428
 80040a4:	40026440 	.word	0x40026440
 80040a8:	40026458 	.word	0x40026458
 80040ac:	40026470 	.word	0x40026470
 80040b0:	40026488 	.word	0x40026488
 80040b4:	400264a0 	.word	0x400264a0
 80040b8:	400264b8 	.word	0x400264b8
 80040bc:	08005e14 	.word	0x08005e14

080040c0 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	4613      	mov	r3, r2
 80040cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	4b45      	ldr	r3, [pc, #276]	; (80041e8 <DMA_ITConfig+0x128>)
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d040      	beq.n	8004158 <DMA_ITConfig+0x98>
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	4b44      	ldr	r3, [pc, #272]	; (80041ec <DMA_ITConfig+0x12c>)
 80040da:	429a      	cmp	r2, r3
 80040dc:	d03c      	beq.n	8004158 <DMA_ITConfig+0x98>
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	4b43      	ldr	r3, [pc, #268]	; (80041f0 <DMA_ITConfig+0x130>)
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d038      	beq.n	8004158 <DMA_ITConfig+0x98>
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	4b42      	ldr	r3, [pc, #264]	; (80041f4 <DMA_ITConfig+0x134>)
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d034      	beq.n	8004158 <DMA_ITConfig+0x98>
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4b41      	ldr	r3, [pc, #260]	; (80041f8 <DMA_ITConfig+0x138>)
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d030      	beq.n	8004158 <DMA_ITConfig+0x98>
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	4b40      	ldr	r3, [pc, #256]	; (80041fc <DMA_ITConfig+0x13c>)
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d02c      	beq.n	8004158 <DMA_ITConfig+0x98>
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	4b3f      	ldr	r3, [pc, #252]	; (8004200 <DMA_ITConfig+0x140>)
 8004102:	429a      	cmp	r2, r3
 8004104:	d028      	beq.n	8004158 <DMA_ITConfig+0x98>
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	4b3e      	ldr	r3, [pc, #248]	; (8004204 <DMA_ITConfig+0x144>)
 800410a:	429a      	cmp	r2, r3
 800410c:	d024      	beq.n	8004158 <DMA_ITConfig+0x98>
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	4b3d      	ldr	r3, [pc, #244]	; (8004208 <DMA_ITConfig+0x148>)
 8004112:	429a      	cmp	r2, r3
 8004114:	d020      	beq.n	8004158 <DMA_ITConfig+0x98>
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4b3c      	ldr	r3, [pc, #240]	; (800420c <DMA_ITConfig+0x14c>)
 800411a:	429a      	cmp	r2, r3
 800411c:	d01c      	beq.n	8004158 <DMA_ITConfig+0x98>
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	4b3b      	ldr	r3, [pc, #236]	; (8004210 <DMA_ITConfig+0x150>)
 8004122:	429a      	cmp	r2, r3
 8004124:	d018      	beq.n	8004158 <DMA_ITConfig+0x98>
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	4b3a      	ldr	r3, [pc, #232]	; (8004214 <DMA_ITConfig+0x154>)
 800412a:	429a      	cmp	r2, r3
 800412c:	d014      	beq.n	8004158 <DMA_ITConfig+0x98>
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	4b39      	ldr	r3, [pc, #228]	; (8004218 <DMA_ITConfig+0x158>)
 8004132:	429a      	cmp	r2, r3
 8004134:	d010      	beq.n	8004158 <DMA_ITConfig+0x98>
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	4b38      	ldr	r3, [pc, #224]	; (800421c <DMA_ITConfig+0x15c>)
 800413a:	429a      	cmp	r2, r3
 800413c:	d00c      	beq.n	8004158 <DMA_ITConfig+0x98>
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	4b37      	ldr	r3, [pc, #220]	; (8004220 <DMA_ITConfig+0x160>)
 8004142:	429a      	cmp	r2, r3
 8004144:	d008      	beq.n	8004158 <DMA_ITConfig+0x98>
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	4b36      	ldr	r3, [pc, #216]	; (8004224 <DMA_ITConfig+0x164>)
 800414a:	429a      	cmp	r2, r3
 800414c:	d004      	beq.n	8004158 <DMA_ITConfig+0x98>
 800414e:	4836      	ldr	r0, [pc, #216]	; (8004228 <DMA_ITConfig+0x168>)
 8004150:	f240 414f 	movw	r1, #1103	; 0x44f
 8004154:	f7fc fef0 	bl	8000f38 <assert_failed>
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f023 039e 	bic.w	r3, r3, #158	; 0x9e
 800415e:	2b00      	cmp	r3, #0
 8004160:	d102      	bne.n	8004168 <DMA_ITConfig+0xa8>
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d104      	bne.n	8004172 <DMA_ITConfig+0xb2>
 8004168:	482f      	ldr	r0, [pc, #188]	; (8004228 <DMA_ITConfig+0x168>)
 800416a:	f44f 618a 	mov.w	r1, #1104	; 0x450
 800416e:	f7fc fee3 	bl	8000f38 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8004172:	79fb      	ldrb	r3, [r7, #7]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d007      	beq.n	8004188 <DMA_ITConfig+0xc8>
 8004178:	79fb      	ldrb	r3, [r7, #7]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d004      	beq.n	8004188 <DMA_ITConfig+0xc8>
 800417e:	482a      	ldr	r0, [pc, #168]	; (8004228 <DMA_ITConfig+0x168>)
 8004180:	f240 4151 	movw	r1, #1105	; 0x451
 8004184:	f7fc fed8 	bl	8000f38 <assert_failed>

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00f      	beq.n	80041b2 <DMA_ITConfig+0xf2>
  {
    if (NewState != DISABLE)
 8004192:	79fb      	ldrb	r3, [r7, #7]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d006      	beq.n	80041a6 <DMA_ITConfig+0xe6>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	615a      	str	r2, [r3, #20]
 80041a4:	e005      	b.n	80041b2 <DMA_ITConfig+0xf2>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2b80      	cmp	r3, #128	; 0x80
 80041b6:	d014      	beq.n	80041e2 <DMA_ITConfig+0x122>
  {
    if (NewState != DISABLE)
 80041b8:	79fb      	ldrb	r3, [r7, #7]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d008      	beq.n	80041d0 <DMA_ITConfig+0x110>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f003 031e 	and.w	r3, r3, #30
 80041c8:	431a      	orrs	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	e008      	b.n	80041e2 <DMA_ITConfig+0x122>
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f003 031e 	and.w	r3, r3, #30
 80041da:	43db      	mvns	r3, r3
 80041dc:	401a      	ands	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	601a      	str	r2, [r3, #0]
    }    
  }
}
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40026010 	.word	0x40026010
 80041ec:	40026028 	.word	0x40026028
 80041f0:	40026040 	.word	0x40026040
 80041f4:	40026058 	.word	0x40026058
 80041f8:	40026070 	.word	0x40026070
 80041fc:	40026088 	.word	0x40026088
 8004200:	400260a0 	.word	0x400260a0
 8004204:	400260b8 	.word	0x400260b8
 8004208:	40026410 	.word	0x40026410
 800420c:	40026428 	.word	0x40026428
 8004210:	40026440 	.word	0x40026440
 8004214:	40026458 	.word	0x40026458
 8004218:	40026470 	.word	0x40026470
 800421c:	40026488 	.word	0x40026488
 8004220:	400264a0 	.word	0x400264a0
 8004224:	400264b8 	.word	0x400264b8
 8004228:	08005e14 	.word	0x08005e14

0800422c <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8004236:	2300      	movs	r3, #0
 8004238:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 800423a:	2300      	movs	r3, #0
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	2300      	movs	r3, #0
 8004240:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	4b97      	ldr	r3, [pc, #604]	; (80044a4 <DMA_GetITStatus+0x278>)
 8004246:	429a      	cmp	r2, r3
 8004248:	d040      	beq.n	80042cc <DMA_GetITStatus+0xa0>
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	4b96      	ldr	r3, [pc, #600]	; (80044a8 <DMA_GetITStatus+0x27c>)
 800424e:	429a      	cmp	r2, r3
 8004250:	d03c      	beq.n	80042cc <DMA_GetITStatus+0xa0>
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	4b95      	ldr	r3, [pc, #596]	; (80044ac <DMA_GetITStatus+0x280>)
 8004256:	429a      	cmp	r2, r3
 8004258:	d038      	beq.n	80042cc <DMA_GetITStatus+0xa0>
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	4b94      	ldr	r3, [pc, #592]	; (80044b0 <DMA_GetITStatus+0x284>)
 800425e:	429a      	cmp	r2, r3
 8004260:	d034      	beq.n	80042cc <DMA_GetITStatus+0xa0>
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	4b93      	ldr	r3, [pc, #588]	; (80044b4 <DMA_GetITStatus+0x288>)
 8004266:	429a      	cmp	r2, r3
 8004268:	d030      	beq.n	80042cc <DMA_GetITStatus+0xa0>
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	4b92      	ldr	r3, [pc, #584]	; (80044b8 <DMA_GetITStatus+0x28c>)
 800426e:	429a      	cmp	r2, r3
 8004270:	d02c      	beq.n	80042cc <DMA_GetITStatus+0xa0>
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	4b91      	ldr	r3, [pc, #580]	; (80044bc <DMA_GetITStatus+0x290>)
 8004276:	429a      	cmp	r2, r3
 8004278:	d028      	beq.n	80042cc <DMA_GetITStatus+0xa0>
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	4b90      	ldr	r3, [pc, #576]	; (80044c0 <DMA_GetITStatus+0x294>)
 800427e:	429a      	cmp	r2, r3
 8004280:	d024      	beq.n	80042cc <DMA_GetITStatus+0xa0>
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	4b8f      	ldr	r3, [pc, #572]	; (80044c4 <DMA_GetITStatus+0x298>)
 8004286:	429a      	cmp	r2, r3
 8004288:	d020      	beq.n	80042cc <DMA_GetITStatus+0xa0>
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	4b8e      	ldr	r3, [pc, #568]	; (80044c8 <DMA_GetITStatus+0x29c>)
 800428e:	429a      	cmp	r2, r3
 8004290:	d01c      	beq.n	80042cc <DMA_GetITStatus+0xa0>
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	4b8d      	ldr	r3, [pc, #564]	; (80044cc <DMA_GetITStatus+0x2a0>)
 8004296:	429a      	cmp	r2, r3
 8004298:	d018      	beq.n	80042cc <DMA_GetITStatus+0xa0>
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	4b8c      	ldr	r3, [pc, #560]	; (80044d0 <DMA_GetITStatus+0x2a4>)
 800429e:	429a      	cmp	r2, r3
 80042a0:	d014      	beq.n	80042cc <DMA_GetITStatus+0xa0>
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	4b8b      	ldr	r3, [pc, #556]	; (80044d4 <DMA_GetITStatus+0x2a8>)
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d010      	beq.n	80042cc <DMA_GetITStatus+0xa0>
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	4b8a      	ldr	r3, [pc, #552]	; (80044d8 <DMA_GetITStatus+0x2ac>)
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d00c      	beq.n	80042cc <DMA_GetITStatus+0xa0>
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	4b89      	ldr	r3, [pc, #548]	; (80044dc <DMA_GetITStatus+0x2b0>)
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d008      	beq.n	80042cc <DMA_GetITStatus+0xa0>
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	4b88      	ldr	r3, [pc, #544]	; (80044e0 <DMA_GetITStatus+0x2b4>)
 80042be:	429a      	cmp	r2, r3
 80042c0:	d004      	beq.n	80042cc <DMA_GetITStatus+0xa0>
 80042c2:	4888      	ldr	r0, [pc, #544]	; (80044e4 <DMA_GetITStatus+0x2b8>)
 80042c4:	f240 4187 	movw	r1, #1159	; 0x487
 80042c8:	f7fc fe36 	bl	8000f38 <assert_failed>
  assert_param(IS_DMA_GET_IT(DMA_IT));
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	4b86      	ldr	r3, [pc, #536]	; (80044e8 <DMA_GetITStatus+0x2bc>)
 80042d0:	429a      	cmp	r2, r3
 80042d2:	f000 80a9 	beq.w	8004428 <DMA_GetITStatus+0x1fc>
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	4b84      	ldr	r3, [pc, #528]	; (80044ec <DMA_GetITStatus+0x2c0>)
 80042da:	429a      	cmp	r2, r3
 80042dc:	f000 80a4 	beq.w	8004428 <DMA_GetITStatus+0x1fc>
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	4b83      	ldr	r3, [pc, #524]	; (80044f0 <DMA_GetITStatus+0x2c4>)
 80042e4:	429a      	cmp	r2, r3
 80042e6:	f000 809f 	beq.w	8004428 <DMA_GetITStatus+0x1fc>
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	4b81      	ldr	r3, [pc, #516]	; (80044f4 <DMA_GetITStatus+0x2c8>)
 80042ee:	429a      	cmp	r2, r3
 80042f0:	f000 809a 	beq.w	8004428 <DMA_GetITStatus+0x1fc>
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	4b80      	ldr	r3, [pc, #512]	; (80044f8 <DMA_GetITStatus+0x2cc>)
 80042f8:	429a      	cmp	r2, r3
 80042fa:	f000 8095 	beq.w	8004428 <DMA_GetITStatus+0x1fc>
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	4b7e      	ldr	r3, [pc, #504]	; (80044fc <DMA_GetITStatus+0x2d0>)
 8004302:	429a      	cmp	r2, r3
 8004304:	f000 8090 	beq.w	8004428 <DMA_GetITStatus+0x1fc>
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	4b7d      	ldr	r3, [pc, #500]	; (8004500 <DMA_GetITStatus+0x2d4>)
 800430c:	429a      	cmp	r2, r3
 800430e:	f000 808b 	beq.w	8004428 <DMA_GetITStatus+0x1fc>
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	4b7b      	ldr	r3, [pc, #492]	; (8004504 <DMA_GetITStatus+0x2d8>)
 8004316:	429a      	cmp	r2, r3
 8004318:	f000 8086 	beq.w	8004428 <DMA_GetITStatus+0x1fc>
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	4b7a      	ldr	r3, [pc, #488]	; (8004508 <DMA_GetITStatus+0x2dc>)
 8004320:	429a      	cmp	r2, r3
 8004322:	f000 8081 	beq.w	8004428 <DMA_GetITStatus+0x1fc>
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	4b78      	ldr	r3, [pc, #480]	; (800450c <DMA_GetITStatus+0x2e0>)
 800432a:	429a      	cmp	r2, r3
 800432c:	d07c      	beq.n	8004428 <DMA_GetITStatus+0x1fc>
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	4b77      	ldr	r3, [pc, #476]	; (8004510 <DMA_GetITStatus+0x2e4>)
 8004332:	429a      	cmp	r2, r3
 8004334:	d078      	beq.n	8004428 <DMA_GetITStatus+0x1fc>
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	4b76      	ldr	r3, [pc, #472]	; (8004514 <DMA_GetITStatus+0x2e8>)
 800433a:	429a      	cmp	r2, r3
 800433c:	d074      	beq.n	8004428 <DMA_GetITStatus+0x1fc>
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	4b75      	ldr	r3, [pc, #468]	; (8004518 <DMA_GetITStatus+0x2ec>)
 8004342:	429a      	cmp	r2, r3
 8004344:	d070      	beq.n	8004428 <DMA_GetITStatus+0x1fc>
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	4b74      	ldr	r3, [pc, #464]	; (800451c <DMA_GetITStatus+0x2f0>)
 800434a:	429a      	cmp	r2, r3
 800434c:	d06c      	beq.n	8004428 <DMA_GetITStatus+0x1fc>
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	4b73      	ldr	r3, [pc, #460]	; (8004520 <DMA_GetITStatus+0x2f4>)
 8004352:	429a      	cmp	r2, r3
 8004354:	d068      	beq.n	8004428 <DMA_GetITStatus+0x1fc>
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	4b72      	ldr	r3, [pc, #456]	; (8004524 <DMA_GetITStatus+0x2f8>)
 800435a:	429a      	cmp	r2, r3
 800435c:	d064      	beq.n	8004428 <DMA_GetITStatus+0x1fc>
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	4b71      	ldr	r3, [pc, #452]	; (8004528 <DMA_GetITStatus+0x2fc>)
 8004362:	429a      	cmp	r2, r3
 8004364:	d060      	beq.n	8004428 <DMA_GetITStatus+0x1fc>
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	4b70      	ldr	r3, [pc, #448]	; (800452c <DMA_GetITStatus+0x300>)
 800436a:	429a      	cmp	r2, r3
 800436c:	d05c      	beq.n	8004428 <DMA_GetITStatus+0x1fc>
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	4b6f      	ldr	r3, [pc, #444]	; (8004530 <DMA_GetITStatus+0x304>)
 8004372:	429a      	cmp	r2, r3
 8004374:	d058      	beq.n	8004428 <DMA_GetITStatus+0x1fc>
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	4b6e      	ldr	r3, [pc, #440]	; (8004534 <DMA_GetITStatus+0x308>)
 800437a:	429a      	cmp	r2, r3
 800437c:	d054      	beq.n	8004428 <DMA_GetITStatus+0x1fc>
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	4b6d      	ldr	r3, [pc, #436]	; (8004538 <DMA_GetITStatus+0x30c>)
 8004382:	429a      	cmp	r2, r3
 8004384:	d050      	beq.n	8004428 <DMA_GetITStatus+0x1fc>
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	4b6c      	ldr	r3, [pc, #432]	; (800453c <DMA_GetITStatus+0x310>)
 800438a:	429a      	cmp	r2, r3
 800438c:	d04c      	beq.n	8004428 <DMA_GetITStatus+0x1fc>
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	4b6b      	ldr	r3, [pc, #428]	; (8004540 <DMA_GetITStatus+0x314>)
 8004392:	429a      	cmp	r2, r3
 8004394:	d048      	beq.n	8004428 <DMA_GetITStatus+0x1fc>
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	4b6a      	ldr	r3, [pc, #424]	; (8004544 <DMA_GetITStatus+0x318>)
 800439a:	429a      	cmp	r2, r3
 800439c:	d044      	beq.n	8004428 <DMA_GetITStatus+0x1fc>
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	4b69      	ldr	r3, [pc, #420]	; (8004548 <DMA_GetITStatus+0x31c>)
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d040      	beq.n	8004428 <DMA_GetITStatus+0x1fc>
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	4b68      	ldr	r3, [pc, #416]	; (800454c <DMA_GetITStatus+0x320>)
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d03c      	beq.n	8004428 <DMA_GetITStatus+0x1fc>
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	4b67      	ldr	r3, [pc, #412]	; (8004550 <DMA_GetITStatus+0x324>)
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d038      	beq.n	8004428 <DMA_GetITStatus+0x1fc>
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	4b66      	ldr	r3, [pc, #408]	; (8004554 <DMA_GetITStatus+0x328>)
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d034      	beq.n	8004428 <DMA_GetITStatus+0x1fc>
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	4b65      	ldr	r3, [pc, #404]	; (8004558 <DMA_GetITStatus+0x32c>)
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d030      	beq.n	8004428 <DMA_GetITStatus+0x1fc>
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	4b64      	ldr	r3, [pc, #400]	; (800455c <DMA_GetITStatus+0x330>)
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d02c      	beq.n	8004428 <DMA_GetITStatus+0x1fc>
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	4b63      	ldr	r3, [pc, #396]	; (8004560 <DMA_GetITStatus+0x334>)
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d028      	beq.n	8004428 <DMA_GetITStatus+0x1fc>
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	4b62      	ldr	r3, [pc, #392]	; (8004564 <DMA_GetITStatus+0x338>)
 80043da:	429a      	cmp	r2, r3
 80043dc:	d024      	beq.n	8004428 <DMA_GetITStatus+0x1fc>
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	4b61      	ldr	r3, [pc, #388]	; (8004568 <DMA_GetITStatus+0x33c>)
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d020      	beq.n	8004428 <DMA_GetITStatus+0x1fc>
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	4b60      	ldr	r3, [pc, #384]	; (800456c <DMA_GetITStatus+0x340>)
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d01c      	beq.n	8004428 <DMA_GetITStatus+0x1fc>
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	4b5f      	ldr	r3, [pc, #380]	; (8004570 <DMA_GetITStatus+0x344>)
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d018      	beq.n	8004428 <DMA_GetITStatus+0x1fc>
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	4b5e      	ldr	r3, [pc, #376]	; (8004574 <DMA_GetITStatus+0x348>)
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d014      	beq.n	8004428 <DMA_GetITStatus+0x1fc>
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	4b5d      	ldr	r3, [pc, #372]	; (8004578 <DMA_GetITStatus+0x34c>)
 8004402:	429a      	cmp	r2, r3
 8004404:	d010      	beq.n	8004428 <DMA_GetITStatus+0x1fc>
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	4b5c      	ldr	r3, [pc, #368]	; (800457c <DMA_GetITStatus+0x350>)
 800440a:	429a      	cmp	r2, r3
 800440c:	d00c      	beq.n	8004428 <DMA_GetITStatus+0x1fc>
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	4b5b      	ldr	r3, [pc, #364]	; (8004580 <DMA_GetITStatus+0x354>)
 8004412:	429a      	cmp	r2, r3
 8004414:	d008      	beq.n	8004428 <DMA_GetITStatus+0x1fc>
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	4b5a      	ldr	r3, [pc, #360]	; (8004584 <DMA_GetITStatus+0x358>)
 800441a:	429a      	cmp	r2, r3
 800441c:	d004      	beq.n	8004428 <DMA_GetITStatus+0x1fc>
 800441e:	4831      	ldr	r0, [pc, #196]	; (80044e4 <DMA_GetITStatus+0x2b8>)
 8004420:	f44f 6191 	mov.w	r1, #1160	; 0x488
 8004424:	f7fc fd88 	bl	8000f38 <assert_failed>
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	4b57      	ldr	r3, [pc, #348]	; (8004588 <DMA_GetITStatus+0x35c>)
 800442c:	429a      	cmp	r2, r3
 800442e:	d802      	bhi.n	8004436 <DMA_GetITStatus+0x20a>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8004430:	4b56      	ldr	r3, [pc, #344]	; (800458c <DMA_GetITStatus+0x360>)
 8004432:	613b      	str	r3, [r7, #16]
 8004434:	e001      	b.n	800443a <DMA_GetITStatus+0x20e>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8004436:	4b56      	ldr	r3, [pc, #344]	; (8004590 <DMA_GetITStatus+0x364>)
 8004438:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8004440:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00a      	beq.n	800445e <DMA_GetITStatus+0x232>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	0adb      	lsrs	r3, r3, #11
 800444c:	f003 031e 	and.w	r3, r3, #30
 8004450:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	4013      	ands	r3, r2
 800445a:	60bb      	str	r3, [r7, #8]
 800445c:	e004      	b.n	8004468 <DMA_GetITStatus+0x23c>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004466:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <DMA_GetITStatus+0x24e>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	e002      	b.n	8004480 <DMA_GetITStatus+0x254>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8004486:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800448a:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	4013      	ands	r3, r2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d07e      	beq.n	8004594 <DMA_GetITStatus+0x368>
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d07b      	beq.n	8004594 <DMA_GetITStatus+0x368>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 800449c:	2301      	movs	r3, #1
 800449e:	75fb      	strb	r3, [r7, #23]
 80044a0:	e07a      	b.n	8004598 <DMA_GetITStatus+0x36c>
 80044a2:	bf00      	nop
 80044a4:	40026010 	.word	0x40026010
 80044a8:	40026028 	.word	0x40026028
 80044ac:	40026040 	.word	0x40026040
 80044b0:	40026058 	.word	0x40026058
 80044b4:	40026070 	.word	0x40026070
 80044b8:	40026088 	.word	0x40026088
 80044bc:	400260a0 	.word	0x400260a0
 80044c0:	400260b8 	.word	0x400260b8
 80044c4:	40026410 	.word	0x40026410
 80044c8:	40026428 	.word	0x40026428
 80044cc:	40026440 	.word	0x40026440
 80044d0:	40026458 	.word	0x40026458
 80044d4:	40026470 	.word	0x40026470
 80044d8:	40026488 	.word	0x40026488
 80044dc:	400264a0 	.word	0x400264a0
 80044e0:	400264b8 	.word	0x400264b8
 80044e4:	08005e14 	.word	0x08005e14
 80044e8:	10008020 	.word	0x10008020
 80044ec:	10004010 	.word	0x10004010
 80044f0:	10002008 	.word	0x10002008
 80044f4:	10001004 	.word	0x10001004
 80044f8:	90000001 	.word	0x90000001
 80044fc:	10008800 	.word	0x10008800
 8004500:	10004400 	.word	0x10004400
 8004504:	10002200 	.word	0x10002200
 8004508:	10001100 	.word	0x10001100
 800450c:	90000040 	.word	0x90000040
 8004510:	10208000 	.word	0x10208000
 8004514:	10104000 	.word	0x10104000
 8004518:	10082000 	.word	0x10082000
 800451c:	10041000 	.word	0x10041000
 8004520:	90010000 	.word	0x90010000
 8004524:	18008000 	.word	0x18008000
 8004528:	14004000 	.word	0x14004000
 800452c:	12002000 	.word	0x12002000
 8004530:	11001000 	.word	0x11001000
 8004534:	90400000 	.word	0x90400000
 8004538:	20008020 	.word	0x20008020
 800453c:	20004010 	.word	0x20004010
 8004540:	20002008 	.word	0x20002008
 8004544:	20001004 	.word	0x20001004
 8004548:	a0000001 	.word	0xa0000001
 800454c:	20008800 	.word	0x20008800
 8004550:	20004400 	.word	0x20004400
 8004554:	20002200 	.word	0x20002200
 8004558:	20001100 	.word	0x20001100
 800455c:	a0000040 	.word	0xa0000040
 8004560:	20208000 	.word	0x20208000
 8004564:	20104000 	.word	0x20104000
 8004568:	20082000 	.word	0x20082000
 800456c:	20041000 	.word	0x20041000
 8004570:	a0010000 	.word	0xa0010000
 8004574:	28008000 	.word	0x28008000
 8004578:	24004000 	.word	0x24004000
 800457c:	22002000 	.word	0x22002000
 8004580:	21001000 	.word	0x21001000
 8004584:	a0400000 	.word	0xa0400000
 8004588:	4002640f 	.word	0x4002640f
 800458c:	40026000 	.word	0x40026000
 8004590:	40026400 	.word	0x40026400
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8004594:	2300      	movs	r3, #0
 8004596:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8004598:	7dfb      	ldrb	r3, [r7, #23]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop

080045a4 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  DMA_TypeDef* DMAy;

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	4b3d      	ldr	r3, [pc, #244]	; (80046a8 <DMA_ClearITPendingBit+0x104>)
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d040      	beq.n	8004638 <DMA_ClearITPendingBit+0x94>
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	4b3c      	ldr	r3, [pc, #240]	; (80046ac <DMA_ClearITPendingBit+0x108>)
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d03c      	beq.n	8004638 <DMA_ClearITPendingBit+0x94>
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	4b3b      	ldr	r3, [pc, #236]	; (80046b0 <DMA_ClearITPendingBit+0x10c>)
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d038      	beq.n	8004638 <DMA_ClearITPendingBit+0x94>
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	4b3a      	ldr	r3, [pc, #232]	; (80046b4 <DMA_ClearITPendingBit+0x110>)
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d034      	beq.n	8004638 <DMA_ClearITPendingBit+0x94>
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	4b39      	ldr	r3, [pc, #228]	; (80046b8 <DMA_ClearITPendingBit+0x114>)
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d030      	beq.n	8004638 <DMA_ClearITPendingBit+0x94>
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	4b38      	ldr	r3, [pc, #224]	; (80046bc <DMA_ClearITPendingBit+0x118>)
 80045da:	429a      	cmp	r2, r3
 80045dc:	d02c      	beq.n	8004638 <DMA_ClearITPendingBit+0x94>
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	4b37      	ldr	r3, [pc, #220]	; (80046c0 <DMA_ClearITPendingBit+0x11c>)
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d028      	beq.n	8004638 <DMA_ClearITPendingBit+0x94>
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	4b36      	ldr	r3, [pc, #216]	; (80046c4 <DMA_ClearITPendingBit+0x120>)
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d024      	beq.n	8004638 <DMA_ClearITPendingBit+0x94>
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	4b35      	ldr	r3, [pc, #212]	; (80046c8 <DMA_ClearITPendingBit+0x124>)
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d020      	beq.n	8004638 <DMA_ClearITPendingBit+0x94>
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	4b34      	ldr	r3, [pc, #208]	; (80046cc <DMA_ClearITPendingBit+0x128>)
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d01c      	beq.n	8004638 <DMA_ClearITPendingBit+0x94>
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	4b33      	ldr	r3, [pc, #204]	; (80046d0 <DMA_ClearITPendingBit+0x12c>)
 8004602:	429a      	cmp	r2, r3
 8004604:	d018      	beq.n	8004638 <DMA_ClearITPendingBit+0x94>
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	4b32      	ldr	r3, [pc, #200]	; (80046d4 <DMA_ClearITPendingBit+0x130>)
 800460a:	429a      	cmp	r2, r3
 800460c:	d014      	beq.n	8004638 <DMA_ClearITPendingBit+0x94>
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	4b31      	ldr	r3, [pc, #196]	; (80046d8 <DMA_ClearITPendingBit+0x134>)
 8004612:	429a      	cmp	r2, r3
 8004614:	d010      	beq.n	8004638 <DMA_ClearITPendingBit+0x94>
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	4b30      	ldr	r3, [pc, #192]	; (80046dc <DMA_ClearITPendingBit+0x138>)
 800461a:	429a      	cmp	r2, r3
 800461c:	d00c      	beq.n	8004638 <DMA_ClearITPendingBit+0x94>
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	4b2f      	ldr	r3, [pc, #188]	; (80046e0 <DMA_ClearITPendingBit+0x13c>)
 8004622:	429a      	cmp	r2, r3
 8004624:	d008      	beq.n	8004638 <DMA_ClearITPendingBit+0x94>
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	4b2e      	ldr	r3, [pc, #184]	; (80046e4 <DMA_ClearITPendingBit+0x140>)
 800462a:	429a      	cmp	r2, r3
 800462c:	d004      	beq.n	8004638 <DMA_ClearITPendingBit+0x94>
 800462e:	482e      	ldr	r0, [pc, #184]	; (80046e8 <DMA_ClearITPendingBit+0x144>)
 8004630:	f240 41d7 	movw	r1, #1239	; 0x4d7
 8004634:	f7fc fc80 	bl	8000f38 <assert_failed>
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800463e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004642:	d00c      	beq.n	800465e <DMA_ClearITPendingBit+0xba>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d007      	beq.n	800465e <DMA_ClearITPendingBit+0xba>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d004      	beq.n	800465e <DMA_ClearITPendingBit+0xba>
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	4b25      	ldr	r3, [pc, #148]	; (80046ec <DMA_ClearITPendingBit+0x148>)
 8004658:	4013      	ands	r3, r2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d004      	beq.n	8004668 <DMA_ClearITPendingBit+0xc4>
 800465e:	4822      	ldr	r0, [pc, #136]	; (80046e8 <DMA_ClearITPendingBit+0x144>)
 8004660:	f44f 619b 	mov.w	r1, #1240	; 0x4d8
 8004664:	f7fc fc68 	bl	8000f38 <assert_failed>

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	4b21      	ldr	r3, [pc, #132]	; (80046f0 <DMA_ClearITPendingBit+0x14c>)
 800466c:	429a      	cmp	r2, r3
 800466e:	d802      	bhi.n	8004676 <DMA_ClearITPendingBit+0xd2>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8004670:	4b20      	ldr	r3, [pc, #128]	; (80046f4 <DMA_ClearITPendingBit+0x150>)
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	e001      	b.n	800467a <DMA_ClearITPendingBit+0xd6>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8004676:	4b20      	ldr	r3, [pc, #128]	; (80046f8 <DMA_ClearITPendingBit+0x154>)
 8004678:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d007      	beq.n	8004694 <DMA_ClearITPendingBit+0xf0>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800468a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	60d3      	str	r3, [r2, #12]
 8004692:	e006      	b.n	80046a2 <DMA_ClearITPendingBit+0xfe>
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800469a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	6093      	str	r3, [r2, #8]
  }   
}
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	40026010 	.word	0x40026010
 80046ac:	40026028 	.word	0x40026028
 80046b0:	40026040 	.word	0x40026040
 80046b4:	40026058 	.word	0x40026058
 80046b8:	40026070 	.word	0x40026070
 80046bc:	40026088 	.word	0x40026088
 80046c0:	400260a0 	.word	0x400260a0
 80046c4:	400260b8 	.word	0x400260b8
 80046c8:	40026410 	.word	0x40026410
 80046cc:	40026428 	.word	0x40026428
 80046d0:	40026440 	.word	0x40026440
 80046d4:	40026458 	.word	0x40026458
 80046d8:	40026470 	.word	0x40026470
 80046dc:	40026488 	.word	0x40026488
 80046e0:	400264a0 	.word	0x400264a0
 80046e4:	400264b8 	.word	0x400264b8
 80046e8:	08005e14 	.word	0x08005e14
 80046ec:	40820082 	.word	0x40820082
 80046f0:	4002640f 	.word	0x4002640f
 80046f4:	40026000 	.word	0x40026000
 80046f8:	40026400 	.word	0x40026400

080046fc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8004704:	2300      	movs	r3, #0
 8004706:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	791b      	ldrb	r3, [r3, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d007      	beq.n	8004720 <EXTI_Init+0x24>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	791b      	ldrb	r3, [r3, #4]
 8004714:	2b04      	cmp	r3, #4
 8004716:	d003      	beq.n	8004720 <EXTI_Init+0x24>
 8004718:	4848      	ldr	r0, [pc, #288]	; (800483c <EXTI_Init+0x140>)
 800471a:	217c      	movs	r1, #124	; 0x7c
 800471c:	f7fc fc0c 	bl	8000f38 <assert_failed>
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	795b      	ldrb	r3, [r3, #5]
 8004724:	2b08      	cmp	r3, #8
 8004726:	d00b      	beq.n	8004740 <EXTI_Init+0x44>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	795b      	ldrb	r3, [r3, #5]
 800472c:	2b0c      	cmp	r3, #12
 800472e:	d007      	beq.n	8004740 <EXTI_Init+0x44>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	795b      	ldrb	r3, [r3, #5]
 8004734:	2b10      	cmp	r3, #16
 8004736:	d003      	beq.n	8004740 <EXTI_Init+0x44>
 8004738:	4840      	ldr	r0, [pc, #256]	; (800483c <EXTI_Init+0x140>)
 800473a:	217d      	movs	r1, #125	; 0x7d
 800473c:	f7fc fbfc 	bl	8000f38 <assert_failed>
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	0ddb      	lsrs	r3, r3, #23
 8004746:	05db      	lsls	r3, r3, #23
 8004748:	2b00      	cmp	r3, #0
 800474a:	d103      	bne.n	8004754 <EXTI_Init+0x58>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d103      	bne.n	800475c <EXTI_Init+0x60>
 8004754:	4839      	ldr	r0, [pc, #228]	; (800483c <EXTI_Init+0x140>)
 8004756:	217e      	movs	r1, #126	; 0x7e
 8004758:	f7fc fbee 	bl	8000f38 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	799b      	ldrb	r3, [r3, #6]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d007      	beq.n	8004774 <EXTI_Init+0x78>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	799b      	ldrb	r3, [r3, #6]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d003      	beq.n	8004774 <EXTI_Init+0x78>
 800476c:	4833      	ldr	r0, [pc, #204]	; (800483c <EXTI_Init+0x140>)
 800476e:	217f      	movs	r1, #127	; 0x7f
 8004770:	f7fc fbe2 	bl	8000f38 <assert_failed>

  tmp = (uint32_t)EXTI_BASE;
 8004774:	4b32      	ldr	r3, [pc, #200]	; (8004840 <EXTI_Init+0x144>)
 8004776:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	799b      	ldrb	r3, [r3, #6]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d04d      	beq.n	800481c <EXTI_Init+0x120>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8004780:	4b2f      	ldr	r3, [pc, #188]	; (8004840 <EXTI_Init+0x144>)
 8004782:	4a2f      	ldr	r2, [pc, #188]	; (8004840 <EXTI_Init+0x144>)
 8004784:	6811      	ldr	r1, [r2, #0]
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6812      	ldr	r2, [r2, #0]
 800478a:	43d2      	mvns	r2, r2
 800478c:	400a      	ands	r2, r1
 800478e:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8004790:	4b2b      	ldr	r3, [pc, #172]	; (8004840 <EXTI_Init+0x144>)
 8004792:	4a2b      	ldr	r2, [pc, #172]	; (8004840 <EXTI_Init+0x144>)
 8004794:	6851      	ldr	r1, [r2, #4]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6812      	ldr	r2, [r2, #0]
 800479a:	43d2      	mvns	r2, r2
 800479c:	400a      	ands	r2, r1
 800479e:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	791b      	ldrb	r3, [r3, #4]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	4413      	add	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	6811      	ldr	r1, [r2, #0]
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6812      	ldr	r2, [r2, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80047b8:	4b21      	ldr	r3, [pc, #132]	; (8004840 <EXTI_Init+0x144>)
 80047ba:	4a21      	ldr	r2, [pc, #132]	; (8004840 <EXTI_Init+0x144>)
 80047bc:	6891      	ldr	r1, [r2, #8]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	6812      	ldr	r2, [r2, #0]
 80047c2:	43d2      	mvns	r2, r2
 80047c4:	400a      	ands	r2, r1
 80047c6:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80047c8:	4b1d      	ldr	r3, [pc, #116]	; (8004840 <EXTI_Init+0x144>)
 80047ca:	4a1d      	ldr	r2, [pc, #116]	; (8004840 <EXTI_Init+0x144>)
 80047cc:	68d1      	ldr	r1, [r2, #12]
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	6812      	ldr	r2, [r2, #0]
 80047d2:	43d2      	mvns	r2, r2
 80047d4:	400a      	ands	r2, r1
 80047d6:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	795b      	ldrb	r3, [r3, #5]
 80047dc:	2b10      	cmp	r3, #16
 80047de:	d10e      	bne.n	80047fe <EXTI_Init+0x102>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80047e0:	4b17      	ldr	r3, [pc, #92]	; (8004840 <EXTI_Init+0x144>)
 80047e2:	4a17      	ldr	r2, [pc, #92]	; (8004840 <EXTI_Init+0x144>)
 80047e4:	6891      	ldr	r1, [r2, #8]
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6812      	ldr	r2, [r2, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80047ee:	4b14      	ldr	r3, [pc, #80]	; (8004840 <EXTI_Init+0x144>)
 80047f0:	4a13      	ldr	r2, [pc, #76]	; (8004840 <EXTI_Init+0x144>)
 80047f2:	68d1      	ldr	r1, [r2, #12]
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6812      	ldr	r2, [r2, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	60da      	str	r2, [r3, #12]
 80047fc:	e01b      	b.n	8004836 <EXTI_Init+0x13a>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 80047fe:	4b10      	ldr	r3, [pc, #64]	; (8004840 <EXTI_Init+0x144>)
 8004800:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	795b      	ldrb	r3, [r3, #5]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	4413      	add	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	6811      	ldr	r1, [r2, #0]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6812      	ldr	r2, [r2, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	e00c      	b.n	8004836 <EXTI_Init+0x13a>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	791b      	ldrb	r3, [r3, #4]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	4413      	add	r3, r2
 8004824:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	6811      	ldr	r1, [r2, #0]
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6812      	ldr	r2, [r2, #0]
 8004830:	43d2      	mvns	r2, r2
 8004832:	400a      	ands	r2, r1
 8004834:	601a      	str	r2, [r3, #0]
  }
}
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	08005e64 	.word	0x08005e64
 8004840:	40013c00 	.word	0x40013c00

08004844 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800484e:	2300      	movs	r3, #0
 8004850:	617b      	str	r3, [r7, #20]
 8004852:	2300      	movs	r3, #0
 8004854:	613b      	str	r3, [r7, #16]
 8004856:	2300      	movs	r3, #0
 8004858:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	4b7a      	ldr	r3, [pc, #488]	; (8004a48 <GPIO_Init+0x204>)
 800485e:	429a      	cmp	r2, r3
 8004860:	d023      	beq.n	80048aa <GPIO_Init+0x66>
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	4b79      	ldr	r3, [pc, #484]	; (8004a4c <GPIO_Init+0x208>)
 8004866:	429a      	cmp	r2, r3
 8004868:	d01f      	beq.n	80048aa <GPIO_Init+0x66>
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	4b78      	ldr	r3, [pc, #480]	; (8004a50 <GPIO_Init+0x20c>)
 800486e:	429a      	cmp	r2, r3
 8004870:	d01b      	beq.n	80048aa <GPIO_Init+0x66>
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	4b77      	ldr	r3, [pc, #476]	; (8004a54 <GPIO_Init+0x210>)
 8004876:	429a      	cmp	r2, r3
 8004878:	d017      	beq.n	80048aa <GPIO_Init+0x66>
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	4b76      	ldr	r3, [pc, #472]	; (8004a58 <GPIO_Init+0x214>)
 800487e:	429a      	cmp	r2, r3
 8004880:	d013      	beq.n	80048aa <GPIO_Init+0x66>
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	4b75      	ldr	r3, [pc, #468]	; (8004a5c <GPIO_Init+0x218>)
 8004886:	429a      	cmp	r2, r3
 8004888:	d00f      	beq.n	80048aa <GPIO_Init+0x66>
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	4b74      	ldr	r3, [pc, #464]	; (8004a60 <GPIO_Init+0x21c>)
 800488e:	429a      	cmp	r2, r3
 8004890:	d00b      	beq.n	80048aa <GPIO_Init+0x66>
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	4b73      	ldr	r3, [pc, #460]	; (8004a64 <GPIO_Init+0x220>)
 8004896:	429a      	cmp	r2, r3
 8004898:	d007      	beq.n	80048aa <GPIO_Init+0x66>
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	4b72      	ldr	r3, [pc, #456]	; (8004a68 <GPIO_Init+0x224>)
 800489e:	429a      	cmp	r2, r3
 80048a0:	d003      	beq.n	80048aa <GPIO_Init+0x66>
 80048a2:	4872      	ldr	r0, [pc, #456]	; (8004a6c <GPIO_Init+0x228>)
 80048a4:	21bb      	movs	r1, #187	; 0xbb
 80048a6:	f7fc fb47 	bl	8000f38 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d103      	bne.n	80048ba <GPIO_Init+0x76>
 80048b2:	486e      	ldr	r0, [pc, #440]	; (8004a6c <GPIO_Init+0x228>)
 80048b4:	21bc      	movs	r1, #188	; 0xbc
 80048b6:	f7fc fb3f 	bl	8000f38 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	791b      	ldrb	r3, [r3, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00f      	beq.n	80048e2 <GPIO_Init+0x9e>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	791b      	ldrb	r3, [r3, #4]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d00b      	beq.n	80048e2 <GPIO_Init+0x9e>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	791b      	ldrb	r3, [r3, #4]
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d007      	beq.n	80048e2 <GPIO_Init+0x9e>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	791b      	ldrb	r3, [r3, #4]
 80048d6:	2b03      	cmp	r3, #3
 80048d8:	d003      	beq.n	80048e2 <GPIO_Init+0x9e>
 80048da:	4864      	ldr	r0, [pc, #400]	; (8004a6c <GPIO_Init+0x228>)
 80048dc:	21bd      	movs	r1, #189	; 0xbd
 80048de:	f7fc fb2b 	bl	8000f38 <assert_failed>
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	79db      	ldrb	r3, [r3, #7]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00b      	beq.n	8004902 <GPIO_Init+0xbe>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	79db      	ldrb	r3, [r3, #7]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d007      	beq.n	8004902 <GPIO_Init+0xbe>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	79db      	ldrb	r3, [r3, #7]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d003      	beq.n	8004902 <GPIO_Init+0xbe>
 80048fa:	485c      	ldr	r0, [pc, #368]	; (8004a6c <GPIO_Init+0x228>)
 80048fc:	21be      	movs	r1, #190	; 0xbe
 80048fe:	f7fc fb1b 	bl	8000f38 <assert_failed>

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8004902:	2300      	movs	r3, #0
 8004904:	617b      	str	r3, [r7, #20]
 8004906:	e097      	b.n	8004a38 <GPIO_Init+0x1f4>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	2201      	movs	r2, #1
 800490c:	fa02 f303 	lsl.w	r3, r2, r3
 8004910:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	4013      	ands	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	429a      	cmp	r2, r3
 8004922:	f040 8086 	bne.w	8004a32 <GPIO_Init+0x1ee>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	2103      	movs	r1, #3
 8004930:	fa01 f303 	lsl.w	r3, r1, r3
 8004934:	43db      	mvns	r3, r3
 8004936:	401a      	ands	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	791b      	ldrb	r3, [r3, #4]
 8004944:	4619      	mov	r1, r3
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	fa01 f303 	lsl.w	r3, r1, r3
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	791b      	ldrb	r3, [r3, #4]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d003      	beq.n	8004964 <GPIO_Init+0x120>
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	791b      	ldrb	r3, [r3, #4]
 8004960:	2b02      	cmp	r3, #2
 8004962:	d14e      	bne.n	8004a02 <GPIO_Init+0x1be>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	795b      	ldrb	r3, [r3, #5]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00f      	beq.n	800498c <GPIO_Init+0x148>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	795b      	ldrb	r3, [r3, #5]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d00b      	beq.n	800498c <GPIO_Init+0x148>
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	795b      	ldrb	r3, [r3, #5]
 8004978:	2b02      	cmp	r3, #2
 800497a:	d007      	beq.n	800498c <GPIO_Init+0x148>
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	795b      	ldrb	r3, [r3, #5]
 8004980:	2b03      	cmp	r3, #3
 8004982:	d003      	beq.n	800498c <GPIO_Init+0x148>
 8004984:	4839      	ldr	r0, [pc, #228]	; (8004a6c <GPIO_Init+0x228>)
 8004986:	21d0      	movs	r1, #208	; 0xd0
 8004988:	f7fc fad6 	bl	8000f38 <assert_failed>

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	2103      	movs	r1, #3
 8004996:	fa01 f303 	lsl.w	r3, r1, r3
 800499a:	43db      	mvns	r3, r3
 800499c:	401a      	ands	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689a      	ldr	r2, [r3, #8]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	795b      	ldrb	r3, [r3, #5]
 80049aa:	4619      	mov	r1, r3
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	fa01 f303 	lsl.w	r3, r1, r3
 80049b4:	431a      	orrs	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	799b      	ldrb	r3, [r3, #6]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d007      	beq.n	80049d2 <GPIO_Init+0x18e>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	799b      	ldrb	r3, [r3, #6]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d003      	beq.n	80049d2 <GPIO_Init+0x18e>
 80049ca:	4828      	ldr	r0, [pc, #160]	; (8004a6c <GPIO_Init+0x228>)
 80049cc:	21d7      	movs	r1, #215	; 0xd7
 80049ce:	f7fc fab3 	bl	8000f38 <assert_failed>

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	b29b      	uxth	r3, r3
 80049da:	2101      	movs	r1, #1
 80049dc:	fa01 f303 	lsl.w	r3, r1, r3
 80049e0:	43db      	mvns	r3, r3
 80049e2:	401a      	ands	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	799b      	ldrb	r3, [r3, #6]
 80049f0:	4619      	mov	r1, r3
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	fa01 f303 	lsl.w	r3, r1, r3
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	431a      	orrs	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68da      	ldr	r2, [r3, #12]
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	2103      	movs	r1, #3
 8004a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a12:	43db      	mvns	r3, r3
 8004a14:	401a      	ands	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68da      	ldr	r2, [r3, #12]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	79db      	ldrb	r3, [r3, #7]
 8004a22:	4619      	mov	r1, r3
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	fa01 f303 	lsl.w	r3, r1, r3
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	3301      	adds	r3, #1
 8004a36:	617b      	str	r3, [r7, #20]
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	2b0f      	cmp	r3, #15
 8004a3c:	f67f af64 	bls.w	8004908 <GPIO_Init+0xc4>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8004a40:	3718      	adds	r7, #24
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	40020000 	.word	0x40020000
 8004a4c:	40020400 	.word	0x40020400
 8004a50:	40020800 	.word	0x40020800
 8004a54:	40020c00 	.word	0x40020c00
 8004a58:	40021000 	.word	0x40021000
 8004a5c:	40021400 	.word	0x40021400
 8004a60:	40021800 	.word	0x40021800
 8004a64:	40021c00 	.word	0x40021c00
 8004a68:	40022000 	.word	0x40022000
 8004a6c:	08005eb4 	.word	0x08005eb4

08004a70 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	460a      	mov	r2, r1
 8004a7c:	807a      	strh	r2, [r7, #2]
 8004a7e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8004a80:	2300      	movs	r3, #0
 8004a82:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8004a84:	2300      	movs	r3, #0
 8004a86:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	4b83      	ldr	r3, [pc, #524]	; (8004c98 <GPIO_PinAFConfig+0x228>)
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d024      	beq.n	8004ada <GPIO_PinAFConfig+0x6a>
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	4b82      	ldr	r3, [pc, #520]	; (8004c9c <GPIO_PinAFConfig+0x22c>)
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d020      	beq.n	8004ada <GPIO_PinAFConfig+0x6a>
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	4b81      	ldr	r3, [pc, #516]	; (8004ca0 <GPIO_PinAFConfig+0x230>)
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d01c      	beq.n	8004ada <GPIO_PinAFConfig+0x6a>
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	4b80      	ldr	r3, [pc, #512]	; (8004ca4 <GPIO_PinAFConfig+0x234>)
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d018      	beq.n	8004ada <GPIO_PinAFConfig+0x6a>
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	4b7f      	ldr	r3, [pc, #508]	; (8004ca8 <GPIO_PinAFConfig+0x238>)
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d014      	beq.n	8004ada <GPIO_PinAFConfig+0x6a>
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	4b7e      	ldr	r3, [pc, #504]	; (8004cac <GPIO_PinAFConfig+0x23c>)
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d010      	beq.n	8004ada <GPIO_PinAFConfig+0x6a>
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	4b7d      	ldr	r3, [pc, #500]	; (8004cb0 <GPIO_PinAFConfig+0x240>)
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d00c      	beq.n	8004ada <GPIO_PinAFConfig+0x6a>
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	4b7c      	ldr	r3, [pc, #496]	; (8004cb4 <GPIO_PinAFConfig+0x244>)
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d008      	beq.n	8004ada <GPIO_PinAFConfig+0x6a>
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	4b7b      	ldr	r3, [pc, #492]	; (8004cb8 <GPIO_PinAFConfig+0x248>)
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d004      	beq.n	8004ada <GPIO_PinAFConfig+0x6a>
 8004ad0:	487a      	ldr	r0, [pc, #488]	; (8004cbc <GPIO_PinAFConfig+0x24c>)
 8004ad2:	f240 2117 	movw	r1, #535	; 0x217
 8004ad6:	f7fc fa2f 	bl	8000f38 <assert_failed>
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
 8004ada:	887b      	ldrh	r3, [r7, #2]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d031      	beq.n	8004b44 <GPIO_PinAFConfig+0xd4>
 8004ae0:	887b      	ldrh	r3, [r7, #2]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d02e      	beq.n	8004b44 <GPIO_PinAFConfig+0xd4>
 8004ae6:	887b      	ldrh	r3, [r7, #2]
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d02b      	beq.n	8004b44 <GPIO_PinAFConfig+0xd4>
 8004aec:	887b      	ldrh	r3, [r7, #2]
 8004aee:	2b03      	cmp	r3, #3
 8004af0:	d028      	beq.n	8004b44 <GPIO_PinAFConfig+0xd4>
 8004af2:	887b      	ldrh	r3, [r7, #2]
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d025      	beq.n	8004b44 <GPIO_PinAFConfig+0xd4>
 8004af8:	887b      	ldrh	r3, [r7, #2]
 8004afa:	2b05      	cmp	r3, #5
 8004afc:	d022      	beq.n	8004b44 <GPIO_PinAFConfig+0xd4>
 8004afe:	887b      	ldrh	r3, [r7, #2]
 8004b00:	2b06      	cmp	r3, #6
 8004b02:	d01f      	beq.n	8004b44 <GPIO_PinAFConfig+0xd4>
 8004b04:	887b      	ldrh	r3, [r7, #2]
 8004b06:	2b07      	cmp	r3, #7
 8004b08:	d01c      	beq.n	8004b44 <GPIO_PinAFConfig+0xd4>
 8004b0a:	887b      	ldrh	r3, [r7, #2]
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d019      	beq.n	8004b44 <GPIO_PinAFConfig+0xd4>
 8004b10:	887b      	ldrh	r3, [r7, #2]
 8004b12:	2b09      	cmp	r3, #9
 8004b14:	d016      	beq.n	8004b44 <GPIO_PinAFConfig+0xd4>
 8004b16:	887b      	ldrh	r3, [r7, #2]
 8004b18:	2b0a      	cmp	r3, #10
 8004b1a:	d013      	beq.n	8004b44 <GPIO_PinAFConfig+0xd4>
 8004b1c:	887b      	ldrh	r3, [r7, #2]
 8004b1e:	2b0b      	cmp	r3, #11
 8004b20:	d010      	beq.n	8004b44 <GPIO_PinAFConfig+0xd4>
 8004b22:	887b      	ldrh	r3, [r7, #2]
 8004b24:	2b0c      	cmp	r3, #12
 8004b26:	d00d      	beq.n	8004b44 <GPIO_PinAFConfig+0xd4>
 8004b28:	887b      	ldrh	r3, [r7, #2]
 8004b2a:	2b0d      	cmp	r3, #13
 8004b2c:	d00a      	beq.n	8004b44 <GPIO_PinAFConfig+0xd4>
 8004b2e:	887b      	ldrh	r3, [r7, #2]
 8004b30:	2b0e      	cmp	r3, #14
 8004b32:	d007      	beq.n	8004b44 <GPIO_PinAFConfig+0xd4>
 8004b34:	887b      	ldrh	r3, [r7, #2]
 8004b36:	2b0f      	cmp	r3, #15
 8004b38:	d004      	beq.n	8004b44 <GPIO_PinAFConfig+0xd4>
 8004b3a:	4860      	ldr	r0, [pc, #384]	; (8004cbc <GPIO_PinAFConfig+0x24c>)
 8004b3c:	f44f 7106 	mov.w	r1, #536	; 0x218
 8004b40:	f7fc f9fa 	bl	8000f38 <assert_failed>
  assert_param(IS_GPIO_AF(GPIO_AF));
 8004b44:	787b      	ldrb	r3, [r7, #1]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d06d      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004b4a:	787b      	ldrb	r3, [r7, #1]
 8004b4c:	2b09      	cmp	r3, #9
 8004b4e:	d06a      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004b50:	787b      	ldrb	r3, [r7, #1]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d067      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004b56:	787b      	ldrb	r3, [r7, #1]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d064      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004b5c:	787b      	ldrb	r3, [r7, #1]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d061      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004b62:	787b      	ldrb	r3, [r7, #1]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d05e      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004b68:	787b      	ldrb	r3, [r7, #1]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d05b      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004b6e:	787b      	ldrb	r3, [r7, #1]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d058      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004b74:	787b      	ldrb	r3, [r7, #1]
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d055      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004b7a:	787b      	ldrb	r3, [r7, #1]
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d052      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004b80:	787b      	ldrb	r3, [r7, #1]
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d04f      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004b86:	787b      	ldrb	r3, [r7, #1]
 8004b88:	2b03      	cmp	r3, #3
 8004b8a:	d04c      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004b8c:	787b      	ldrb	r3, [r7, #1]
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d049      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004b92:	787b      	ldrb	r3, [r7, #1]
 8004b94:	2b04      	cmp	r3, #4
 8004b96:	d046      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004b98:	787b      	ldrb	r3, [r7, #1]
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d043      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004b9e:	787b      	ldrb	r3, [r7, #1]
 8004ba0:	2b05      	cmp	r3, #5
 8004ba2:	d040      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004ba4:	787b      	ldrb	r3, [r7, #1]
 8004ba6:	2b05      	cmp	r3, #5
 8004ba8:	d03d      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004baa:	787b      	ldrb	r3, [r7, #1]
 8004bac:	2b09      	cmp	r3, #9
 8004bae:	d03a      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004bb0:	787b      	ldrb	r3, [r7, #1]
 8004bb2:	2b06      	cmp	r3, #6
 8004bb4:	d037      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004bb6:	787b      	ldrb	r3, [r7, #1]
 8004bb8:	2b09      	cmp	r3, #9
 8004bba:	d034      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004bbc:	787b      	ldrb	r3, [r7, #1]
 8004bbe:	2b07      	cmp	r3, #7
 8004bc0:	d031      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004bc2:	787b      	ldrb	r3, [r7, #1]
 8004bc4:	2b07      	cmp	r3, #7
 8004bc6:	d02e      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004bc8:	787b      	ldrb	r3, [r7, #1]
 8004bca:	2b07      	cmp	r3, #7
 8004bcc:	d02b      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004bce:	787b      	ldrb	r3, [r7, #1]
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d028      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004bd4:	787b      	ldrb	r3, [r7, #1]
 8004bd6:	2b08      	cmp	r3, #8
 8004bd8:	d025      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004bda:	787b      	ldrb	r3, [r7, #1]
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d022      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004be0:	787b      	ldrb	r3, [r7, #1]
 8004be2:	2b09      	cmp	r3, #9
 8004be4:	d01f      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004be6:	787b      	ldrb	r3, [r7, #1]
 8004be8:	2b09      	cmp	r3, #9
 8004bea:	d01c      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004bec:	787b      	ldrb	r3, [r7, #1]
 8004bee:	2b0a      	cmp	r3, #10
 8004bf0:	d019      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004bf2:	787b      	ldrb	r3, [r7, #1]
 8004bf4:	2b0a      	cmp	r3, #10
 8004bf6:	d016      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004bf8:	787b      	ldrb	r3, [r7, #1]
 8004bfa:	2b0b      	cmp	r3, #11
 8004bfc:	d013      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004bfe:	787b      	ldrb	r3, [r7, #1]
 8004c00:	2b0c      	cmp	r3, #12
 8004c02:	d010      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004c04:	787b      	ldrb	r3, [r7, #1]
 8004c06:	2b0c      	cmp	r3, #12
 8004c08:	d00d      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004c0a:	787b      	ldrb	r3, [r7, #1]
 8004c0c:	2b0c      	cmp	r3, #12
 8004c0e:	d00a      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004c10:	787b      	ldrb	r3, [r7, #1]
 8004c12:	2b0d      	cmp	r3, #13
 8004c14:	d007      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004c16:	787b      	ldrb	r3, [r7, #1]
 8004c18:	2b0f      	cmp	r3, #15
 8004c1a:	d004      	beq.n	8004c26 <GPIO_PinAFConfig+0x1b6>
 8004c1c:	4827      	ldr	r0, [pc, #156]	; (8004cbc <GPIO_PinAFConfig+0x24c>)
 8004c1e:	f240 2119 	movw	r1, #537	; 0x219
 8004c22:	f7fc f989 	bl	8000f38 <assert_failed>
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8004c26:	787a      	ldrb	r2, [r7, #1]
 8004c28:	887b      	ldrh	r3, [r7, #2]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8004c36:	887b      	ldrh	r3, [r7, #2]
 8004c38:	08db      	lsrs	r3, r3, #3
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	887b      	ldrh	r3, [r7, #2]
 8004c40:	08db      	lsrs	r3, r3, #3
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	4619      	mov	r1, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	3108      	adds	r1, #8
 8004c4a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8004c4e:	887b      	ldrh	r3, [r7, #2]
 8004c50:	f003 0307 	and.w	r3, r3, #7
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	200f      	movs	r0, #15
 8004c58:	fa00 f303 	lsl.w	r3, r0, r3
 8004c5c:	43db      	mvns	r3, r3
 8004c5e:	4019      	ands	r1, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	3208      	adds	r2, #8
 8004c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8004c68:	887b      	ldrh	r3, [r7, #2]
 8004c6a:	08db      	lsrs	r3, r3, #3
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	461a      	mov	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3208      	adds	r2, #8
 8004c74:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8004c7e:	887b      	ldrh	r3, [r7, #2]
 8004c80:	08db      	lsrs	r3, r3, #3
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	461a      	mov	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	3208      	adds	r2, #8
 8004c8a:	68b9      	ldr	r1, [r7, #8]
 8004c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	40020000 	.word	0x40020000
 8004c9c:	40020400 	.word	0x40020400
 8004ca0:	40020800 	.word	0x40020800
 8004ca4:	40020c00 	.word	0x40020c00
 8004ca8:	40021000 	.word	0x40021000
 8004cac:	40021400 	.word	0x40021400
 8004cb0:	40021800 	.word	0x40021800
 8004cb4:	40021c00 	.word	0x40021c00
 8004cb8:	40022000 	.word	0x40022000
 8004cbc:	08005eb4 	.word	0x08005eb4

08004cc0 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b089      	sub	sp, #36	; 0x24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	61bb      	str	r3, [r7, #24]
 8004ccc:	2300      	movs	r3, #0
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	61fb      	str	r3, [r7, #28]
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	613b      	str	r3, [r7, #16]
 8004cd8:	2300      	movs	r3, #0
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	2302      	movs	r3, #2
 8004cde:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004ce0:	4b48      	ldr	r3, [pc, #288]	; (8004e04 <RCC_GetClocksFreq+0x144>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f003 030c 	and.w	r3, r3, #12
 8004ce8:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	2b04      	cmp	r3, #4
 8004cee:	d007      	beq.n	8004d00 <RCC_GetClocksFreq+0x40>
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d009      	beq.n	8004d08 <RCC_GetClocksFreq+0x48>
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d13f      	bne.n	8004d78 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a43      	ldr	r2, [pc, #268]	; (8004e08 <RCC_GetClocksFreq+0x148>)
 8004cfc:	601a      	str	r2, [r3, #0]
      break;
 8004cfe:	e03f      	b.n	8004d80 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a42      	ldr	r2, [pc, #264]	; (8004e0c <RCC_GetClocksFreq+0x14c>)
 8004d04:	601a      	str	r2, [r3, #0]
      break;
 8004d06:	e03b      	b.n	8004d80 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8004d08:	4b3e      	ldr	r3, [pc, #248]	; (8004e04 <RCC_GetClocksFreq+0x144>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d10:	0d9b      	lsrs	r3, r3, #22
 8004d12:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d14:	4b3b      	ldr	r3, [pc, #236]	; (8004e04 <RCC_GetClocksFreq+0x144>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d1c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00d      	beq.n	8004d40 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004d24:	4a39      	ldr	r2, [pc, #228]	; (8004e0c <RCC_GetClocksFreq+0x14c>)
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d2c:	4b35      	ldr	r3, [pc, #212]	; (8004e04 <RCC_GetClocksFreq+0x144>)
 8004d2e:	6859      	ldr	r1, [r3, #4]
 8004d30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d34:	400b      	ands	r3, r1
 8004d36:	099b      	lsrs	r3, r3, #6
 8004d38:	fb03 f302 	mul.w	r3, r3, r2
 8004d3c:	61fb      	str	r3, [r7, #28]
 8004d3e:	e00c      	b.n	8004d5a <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8004d40:	4a31      	ldr	r2, [pc, #196]	; (8004e08 <RCC_GetClocksFreq+0x148>)
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d48:	4b2e      	ldr	r3, [pc, #184]	; (8004e04 <RCC_GetClocksFreq+0x144>)
 8004d4a:	6859      	ldr	r1, [r3, #4]
 8004d4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d50:	400b      	ands	r3, r1
 8004d52:	099b      	lsrs	r3, r3, #6
 8004d54:	fb03 f302 	mul.w	r3, r3, r2
 8004d58:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8004d5a:	4b2a      	ldr	r3, [pc, #168]	; (8004e04 <RCC_GetClocksFreq+0x144>)
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d62:	0c1b      	lsrs	r3, r3, #16
 8004d64:	3301      	adds	r3, #1
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8004d6a:	69fa      	ldr	r2, [r7, #28]
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	601a      	str	r2, [r3, #0]
      break;
 8004d76:	e003      	b.n	8004d80 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a23      	ldr	r2, [pc, #140]	; (8004e08 <RCC_GetClocksFreq+0x148>)
 8004d7c:	601a      	str	r2, [r3, #0]
      break;
 8004d7e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8004d80:	4b20      	ldr	r3, [pc, #128]	; (8004e04 <RCC_GetClocksFreq+0x144>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d88:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	091b      	lsrs	r3, r3, #4
 8004d8e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8004d90:	4a1f      	ldr	r2, [pc, #124]	; (8004e10 <RCC_GetClocksFreq+0x150>)
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	4413      	add	r3, r2
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	40da      	lsrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8004da8:	4b16      	ldr	r3, [pc, #88]	; (8004e04 <RCC_GetClocksFreq+0x144>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004db0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	0a9b      	lsrs	r3, r3, #10
 8004db6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8004db8:	4a15      	ldr	r2, [pc, #84]	; (8004e10 <RCC_GetClocksFreq+0x150>)
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	40da      	lsrs	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8004dd0:	4b0c      	ldr	r3, [pc, #48]	; (8004e04 <RCC_GetClocksFreq+0x144>)
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004dd8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	0b5b      	lsrs	r3, r3, #13
 8004dde:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8004de0:	4a0b      	ldr	r2, [pc, #44]	; (8004e10 <RCC_GetClocksFreq+0x150>)
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	4413      	add	r3, r2
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	40da      	lsrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	60da      	str	r2, [r3, #12]
}
 8004df8:	3724      	adds	r7, #36	; 0x24
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	40023800 	.word	0x40023800
 8004e08:	00f42400 	.word	0x00f42400
 8004e0c:	017d7840 	.word	0x017d7840
 8004e10:	20000020 	.word	0x20000020

08004e14 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	4b15      	ldr	r3, [pc, #84]	; (8004e78 <RCC_AHB1PeriphClockCmd+0x64>)
 8004e24:	4013      	ands	r3, r2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d102      	bne.n	8004e30 <RCC_AHB1PeriphClockCmd+0x1c>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d104      	bne.n	8004e3a <RCC_AHB1PeriphClockCmd+0x26>
 8004e30:	4812      	ldr	r0, [pc, #72]	; (8004e7c <RCC_AHB1PeriphClockCmd+0x68>)
 8004e32:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8004e36:	f7fc f87f 	bl	8000f38 <assert_failed>

  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8004e3a:	78fb      	ldrb	r3, [r7, #3]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d007      	beq.n	8004e50 <RCC_AHB1PeriphClockCmd+0x3c>
 8004e40:	78fb      	ldrb	r3, [r7, #3]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d004      	beq.n	8004e50 <RCC_AHB1PeriphClockCmd+0x3c>
 8004e46:	480d      	ldr	r0, [pc, #52]	; (8004e7c <RCC_AHB1PeriphClockCmd+0x68>)
 8004e48:	f240 4142 	movw	r1, #1090	; 0x442
 8004e4c:	f7fc f874 	bl	8000f38 <assert_failed>
  if (NewState != DISABLE)
 8004e50:	78fb      	ldrb	r3, [r7, #3]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d006      	beq.n	8004e64 <RCC_AHB1PeriphClockCmd+0x50>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8004e56:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <RCC_AHB1PeriphClockCmd+0x6c>)
 8004e58:	4a09      	ldr	r2, [pc, #36]	; (8004e80 <RCC_AHB1PeriphClockCmd+0x6c>)
 8004e5a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	631a      	str	r2, [r3, #48]	; 0x30
 8004e62:	e006      	b.n	8004e72 <RCC_AHB1PeriphClockCmd+0x5e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8004e64:	4b06      	ldr	r3, [pc, #24]	; (8004e80 <RCC_AHB1PeriphClockCmd+0x6c>)
 8004e66:	4a06      	ldr	r2, [pc, #24]	; (8004e80 <RCC_AHB1PeriphClockCmd+0x6c>)
 8004e68:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	43d2      	mvns	r2, r2
 8004e6e:	400a      	ands	r2, r1
 8004e70:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	818bee00 	.word	0x818bee00
 8004e7c:	08005f04 	.word	0x08005f04
 8004e80:	40023800 	.word	0x40023800

08004e84 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	4b15      	ldr	r3, [pc, #84]	; (8004ee8 <RCC_APB2PeriphClockCmd+0x64>)
 8004e94:	4013      	ands	r3, r2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d102      	bne.n	8004ea0 <RCC_APB2PeriphClockCmd+0x1c>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d104      	bne.n	8004eaa <RCC_APB2PeriphClockCmd+0x26>
 8004ea0:	4812      	ldr	r0, [pc, #72]	; (8004eec <RCC_APB2PeriphClockCmd+0x68>)
 8004ea2:	f240 41d5 	movw	r1, #1237	; 0x4d5
 8004ea6:	f7fc f847 	bl	8000f38 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8004eaa:	78fb      	ldrb	r3, [r7, #3]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d007      	beq.n	8004ec0 <RCC_APB2PeriphClockCmd+0x3c>
 8004eb0:	78fb      	ldrb	r3, [r7, #3]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d004      	beq.n	8004ec0 <RCC_APB2PeriphClockCmd+0x3c>
 8004eb6:	480d      	ldr	r0, [pc, #52]	; (8004eec <RCC_APB2PeriphClockCmd+0x68>)
 8004eb8:	f240 41d6 	movw	r1, #1238	; 0x4d6
 8004ebc:	f7fc f83c 	bl	8000f38 <assert_failed>

  if (NewState != DISABLE)
 8004ec0:	78fb      	ldrb	r3, [r7, #3]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d006      	beq.n	8004ed4 <RCC_APB2PeriphClockCmd+0x50>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8004ec6:	4b0a      	ldr	r3, [pc, #40]	; (8004ef0 <RCC_APB2PeriphClockCmd+0x6c>)
 8004ec8:	4a09      	ldr	r2, [pc, #36]	; (8004ef0 <RCC_APB2PeriphClockCmd+0x6c>)
 8004eca:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	645a      	str	r2, [r3, #68]	; 0x44
 8004ed2:	e006      	b.n	8004ee2 <RCC_APB2PeriphClockCmd+0x5e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8004ed4:	4b06      	ldr	r3, [pc, #24]	; (8004ef0 <RCC_APB2PeriphClockCmd+0x6c>)
 8004ed6:	4a06      	ldr	r2, [pc, #24]	; (8004ef0 <RCC_APB2PeriphClockCmd+0x6c>)
 8004ed8:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	43d2      	mvns	r2, r2
 8004ede:	400a      	ands	r2, r1
 8004ee0:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	fff8a0cc 	.word	0xfff8a0cc
 8004eec:	08005f04 	.word	0x08005f04
 8004ef0:	40023800 	.word	0x40023800

08004ef4 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004efe:	2300      	movs	r3, #0
 8004f00:	81fb      	strh	r3, [r7, #14]
  
  /* check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	4b70      	ldr	r3, [pc, #448]	; (80050c8 <SPI_Init+0x1d4>)
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d00c      	beq.n	8004f24 <SPI_Init+0x30>
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	4b6f      	ldr	r3, [pc, #444]	; (80050cc <SPI_Init+0x1d8>)
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d008      	beq.n	8004f24 <SPI_Init+0x30>
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	4b6e      	ldr	r3, [pc, #440]	; (80050d0 <SPI_Init+0x1dc>)
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d004      	beq.n	8004f24 <SPI_Init+0x30>
 8004f1a:	486e      	ldr	r0, [pc, #440]	; (80050d4 <SPI_Init+0x1e0>)
 8004f1c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004f20:	f7fc f80a 	bl	8000f38 <assert_failed>
  
  /* Check the SPI parameters */
  assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d013      	beq.n	8004f54 <SPI_Init+0x60>
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f34:	d00e      	beq.n	8004f54 <SPI_Init+0x60>
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f3e:	d009      	beq.n	8004f54 <SPI_Init+0x60>
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	881b      	ldrh	r3, [r3, #0]
 8004f44:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f48:	d004      	beq.n	8004f54 <SPI_Init+0x60>
 8004f4a:	4862      	ldr	r0, [pc, #392]	; (80050d4 <SPI_Init+0x1e0>)
 8004f4c:	f240 1109 	movw	r1, #265	; 0x109
 8004f50:	f7fb fff2 	bl	8000f38 <assert_failed>
  assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	885b      	ldrh	r3, [r3, #2]
 8004f58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f5c:	d008      	beq.n	8004f70 <SPI_Init+0x7c>
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	885b      	ldrh	r3, [r3, #2]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d004      	beq.n	8004f70 <SPI_Init+0x7c>
 8004f66:	485b      	ldr	r0, [pc, #364]	; (80050d4 <SPI_Init+0x1e0>)
 8004f68:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8004f6c:	f7fb ffe4 	bl	8000f38 <assert_failed>
  assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	889b      	ldrh	r3, [r3, #4]
 8004f74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f78:	d008      	beq.n	8004f8c <SPI_Init+0x98>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	889b      	ldrh	r3, [r3, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d004      	beq.n	8004f8c <SPI_Init+0x98>
 8004f82:	4854      	ldr	r0, [pc, #336]	; (80050d4 <SPI_Init+0x1e0>)
 8004f84:	f240 110b 	movw	r1, #267	; 0x10b
 8004f88:	f7fb ffd6 	bl	8000f38 <assert_failed>
  assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	88db      	ldrh	r3, [r3, #6]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d008      	beq.n	8004fa6 <SPI_Init+0xb2>
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	88db      	ldrh	r3, [r3, #6]
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d004      	beq.n	8004fa6 <SPI_Init+0xb2>
 8004f9c:	484d      	ldr	r0, [pc, #308]	; (80050d4 <SPI_Init+0x1e0>)
 8004f9e:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8004fa2:	f7fb ffc9 	bl	8000f38 <assert_failed>
  assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	891b      	ldrh	r3, [r3, #8]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d008      	beq.n	8004fc0 <SPI_Init+0xcc>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	891b      	ldrh	r3, [r3, #8]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d004      	beq.n	8004fc0 <SPI_Init+0xcc>
 8004fb6:	4847      	ldr	r0, [pc, #284]	; (80050d4 <SPI_Init+0x1e0>)
 8004fb8:	f240 110d 	movw	r1, #269	; 0x10d
 8004fbc:	f7fb ffbc 	bl	8000f38 <assert_failed>
  assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	895b      	ldrh	r3, [r3, #10]
 8004fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fc8:	d008      	beq.n	8004fdc <SPI_Init+0xe8>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	895b      	ldrh	r3, [r3, #10]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d004      	beq.n	8004fdc <SPI_Init+0xe8>
 8004fd2:	4840      	ldr	r0, [pc, #256]	; (80050d4 <SPI_Init+0x1e0>)
 8004fd4:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8004fd8:	f7fb ffae 	bl	8000f38 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	899b      	ldrh	r3, [r3, #12]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d020      	beq.n	8005026 <SPI_Init+0x132>
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	899b      	ldrh	r3, [r3, #12]
 8004fe8:	2b08      	cmp	r3, #8
 8004fea:	d01c      	beq.n	8005026 <SPI_Init+0x132>
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	899b      	ldrh	r3, [r3, #12]
 8004ff0:	2b10      	cmp	r3, #16
 8004ff2:	d018      	beq.n	8005026 <SPI_Init+0x132>
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	899b      	ldrh	r3, [r3, #12]
 8004ff8:	2b18      	cmp	r3, #24
 8004ffa:	d014      	beq.n	8005026 <SPI_Init+0x132>
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	899b      	ldrh	r3, [r3, #12]
 8005000:	2b20      	cmp	r3, #32
 8005002:	d010      	beq.n	8005026 <SPI_Init+0x132>
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	899b      	ldrh	r3, [r3, #12]
 8005008:	2b28      	cmp	r3, #40	; 0x28
 800500a:	d00c      	beq.n	8005026 <SPI_Init+0x132>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	899b      	ldrh	r3, [r3, #12]
 8005010:	2b30      	cmp	r3, #48	; 0x30
 8005012:	d008      	beq.n	8005026 <SPI_Init+0x132>
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	899b      	ldrh	r3, [r3, #12]
 8005018:	2b38      	cmp	r3, #56	; 0x38
 800501a:	d004      	beq.n	8005026 <SPI_Init+0x132>
 800501c:	482d      	ldr	r0, [pc, #180]	; (80050d4 <SPI_Init+0x1e0>)
 800501e:	f240 110f 	movw	r1, #271	; 0x10f
 8005022:	f7fb ff89 	bl	8000f38 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	89db      	ldrh	r3, [r3, #14]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d008      	beq.n	8005040 <SPI_Init+0x14c>
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	89db      	ldrh	r3, [r3, #14]
 8005032:	2b80      	cmp	r3, #128	; 0x80
 8005034:	d004      	beq.n	8005040 <SPI_Init+0x14c>
 8005036:	4827      	ldr	r0, [pc, #156]	; (80050d4 <SPI_Init+0x1e0>)
 8005038:	f44f 7188 	mov.w	r1, #272	; 0x110
 800503c:	f7fb ff7c 	bl	8000f38 <assert_failed>
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	8a1b      	ldrh	r3, [r3, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d104      	bne.n	8005052 <SPI_Init+0x15e>
 8005048:	4822      	ldr	r0, [pc, #136]	; (80050d4 <SPI_Init+0x1e0>)
 800504a:	f240 1111 	movw	r1, #273	; 0x111
 800504e:	f7fb ff73 	bl	8000f38 <assert_failed>

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8005058:	89fb      	ldrh	r3, [r7, #14]
 800505a:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800505e:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	881a      	ldrh	r2, [r3, #0]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	885b      	ldrh	r3, [r3, #2]
 8005068:	4313      	orrs	r3, r2
 800506a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005070:	4313      	orrs	r3, r2
 8005072:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005078:	4313      	orrs	r3, r2
 800507a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005080:	4313      	orrs	r3, r2
 8005082:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005088:	4313      	orrs	r3, r2
 800508a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005090:	4313      	orrs	r3, r2
 8005092:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005098:	4313      	orrs	r3, r2
 800509a:	b29a      	uxth	r2, r3
 800509c:	89fb      	ldrh	r3, [r7, #14]
 800509e:	4313      	orrs	r3, r2
 80050a0:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	89fa      	ldrh	r2, [r7, #14]
 80050a6:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	8b9b      	ldrh	r3, [r3, #28]
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	8a1a      	ldrh	r2, [r3, #16]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	821a      	strh	r2, [r3, #16]
}
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	40013000 	.word	0x40013000
 80050cc:	40003800 	.word	0x40003800
 80050d0:	40003c00 	.word	0x40003c00
 80050d4:	08005f54 	.word	0x08005f54

080050d8 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	460b      	mov	r3, r1
 80050e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	4b19      	ldr	r3, [pc, #100]	; (800514c <SPI_Cmd+0x74>)
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d00c      	beq.n	8005106 <SPI_Cmd+0x2e>
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	4b18      	ldr	r3, [pc, #96]	; (8005150 <SPI_Cmd+0x78>)
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d008      	beq.n	8005106 <SPI_Cmd+0x2e>
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	4b17      	ldr	r3, [pc, #92]	; (8005154 <SPI_Cmd+0x7c>)
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d004      	beq.n	8005106 <SPI_Cmd+0x2e>
 80050fc:	4816      	ldr	r0, [pc, #88]	; (8005158 <SPI_Cmd+0x80>)
 80050fe:	f240 2101 	movw	r1, #513	; 0x201
 8005102:	f7fb ff19 	bl	8000f38 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8005106:	78fb      	ldrb	r3, [r7, #3]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d007      	beq.n	800511c <SPI_Cmd+0x44>
 800510c:	78fb      	ldrb	r3, [r7, #3]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d004      	beq.n	800511c <SPI_Cmd+0x44>
 8005112:	4811      	ldr	r0, [pc, #68]	; (8005158 <SPI_Cmd+0x80>)
 8005114:	f240 2102 	movw	r1, #514	; 0x202
 8005118:	f7fb ff0e 	bl	8000f38 <assert_failed>
  if (NewState != DISABLE)
 800511c:	78fb      	ldrb	r3, [r7, #3]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d008      	beq.n	8005134 <SPI_Cmd+0x5c>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	881b      	ldrh	r3, [r3, #0]
 8005126:	b29b      	uxth	r3, r3
 8005128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800512c:	b29a      	uxth	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	801a      	strh	r2, [r3, #0]
 8005132:	e007      	b.n	8005144 <SPI_Cmd+0x6c>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	881b      	ldrh	r3, [r3, #0]
 8005138:	b29b      	uxth	r3, r3
 800513a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800513e:	b29a      	uxth	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	801a      	strh	r2, [r3, #0]
  }
}
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	40013000 	.word	0x40013000
 8005150:	40003800 	.word	0x40003800
 8005154:	40003c00 	.word	0x40003c00
 8005158:	08005f54 	.word	0x08005f54

0800515c <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	4613      	mov	r3, r2
 8005166:	460a      	mov	r2, r1
 8005168:	807a      	strh	r2, [r7, #2]
 800516a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	4b25      	ldr	r3, [pc, #148]	; (8005204 <SPI_I2S_DMACmd+0xa8>)
 8005170:	429a      	cmp	r2, r3
 8005172:	d014      	beq.n	800519e <SPI_I2S_DMACmd+0x42>
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	4b24      	ldr	r3, [pc, #144]	; (8005208 <SPI_I2S_DMACmd+0xac>)
 8005178:	429a      	cmp	r2, r3
 800517a:	d010      	beq.n	800519e <SPI_I2S_DMACmd+0x42>
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	4b23      	ldr	r3, [pc, #140]	; (800520c <SPI_I2S_DMACmd+0xb0>)
 8005180:	429a      	cmp	r2, r3
 8005182:	d00c      	beq.n	800519e <SPI_I2S_DMACmd+0x42>
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	4b22      	ldr	r3, [pc, #136]	; (8005210 <SPI_I2S_DMACmd+0xb4>)
 8005188:	429a      	cmp	r2, r3
 800518a:	d008      	beq.n	800519e <SPI_I2S_DMACmd+0x42>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8005192:	d004      	beq.n	800519e <SPI_I2S_DMACmd+0x42>
 8005194:	481f      	ldr	r0, [pc, #124]	; (8005214 <SPI_I2S_DMACmd+0xb8>)
 8005196:	f240 31d9 	movw	r1, #985	; 0x3d9
 800519a:	f7fb fecd 	bl	8000f38 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 800519e:	787b      	ldrb	r3, [r7, #1]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d007      	beq.n	80051b4 <SPI_I2S_DMACmd+0x58>
 80051a4:	787b      	ldrb	r3, [r7, #1]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d004      	beq.n	80051b4 <SPI_I2S_DMACmd+0x58>
 80051aa:	481a      	ldr	r0, [pc, #104]	; (8005214 <SPI_I2S_DMACmd+0xb8>)
 80051ac:	f240 31da 	movw	r1, #986	; 0x3da
 80051b0:	f7fb fec2 	bl	8000f38 <assert_failed>
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
 80051b4:	887a      	ldrh	r2, [r7, #2]
 80051b6:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80051ba:	4013      	ands	r3, r2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d102      	bne.n	80051c6 <SPI_I2S_DMACmd+0x6a>
 80051c0:	887b      	ldrh	r3, [r7, #2]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d104      	bne.n	80051d0 <SPI_I2S_DMACmd+0x74>
 80051c6:	4813      	ldr	r0, [pc, #76]	; (8005214 <SPI_I2S_DMACmd+0xb8>)
 80051c8:	f240 31db 	movw	r1, #987	; 0x3db
 80051cc:	f7fb feb4 	bl	8000f38 <assert_failed>

  if (NewState != DISABLE)
 80051d0:	787b      	ldrb	r3, [r7, #1]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d008      	beq.n	80051e8 <SPI_I2S_DMACmd+0x8c>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	889b      	ldrh	r3, [r3, #4]
 80051da:	b29a      	uxth	r2, r3
 80051dc:	887b      	ldrh	r3, [r7, #2]
 80051de:	4313      	orrs	r3, r2
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	809a      	strh	r2, [r3, #4]
 80051e6:	e009      	b.n	80051fc <SPI_I2S_DMACmd+0xa0>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	889b      	ldrh	r3, [r3, #4]
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	887b      	ldrh	r3, [r7, #2]
 80051f0:	43db      	mvns	r3, r3
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	4013      	ands	r3, r2
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	809a      	strh	r2, [r3, #4]
  }
}
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	40013000 	.word	0x40013000
 8005208:	40003800 	.word	0x40003800
 800520c:	40003c00 	.word	0x40003c00
 8005210:	40003400 	.word	0x40003400
 8005214:	08005f54 	.word	0x08005f54

08005218 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	460b      	mov	r3, r1
 8005222:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8005224:	2300      	movs	r3, #0
 8005226:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	4b25      	ldr	r3, [pc, #148]	; (80052c0 <SPI_I2S_GetFlagStatus+0xa8>)
 800522c:	429a      	cmp	r2, r3
 800522e:	d014      	beq.n	800525a <SPI_I2S_GetFlagStatus+0x42>
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	4b24      	ldr	r3, [pc, #144]	; (80052c4 <SPI_I2S_GetFlagStatus+0xac>)
 8005234:	429a      	cmp	r2, r3
 8005236:	d010      	beq.n	800525a <SPI_I2S_GetFlagStatus+0x42>
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	4b23      	ldr	r3, [pc, #140]	; (80052c8 <SPI_I2S_GetFlagStatus+0xb0>)
 800523c:	429a      	cmp	r2, r3
 800523e:	d00c      	beq.n	800525a <SPI_I2S_GetFlagStatus+0x42>
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	4b22      	ldr	r3, [pc, #136]	; (80052cc <SPI_I2S_GetFlagStatus+0xb4>)
 8005244:	429a      	cmp	r2, r3
 8005246:	d008      	beq.n	800525a <SPI_I2S_GetFlagStatus+0x42>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 800524e:	d004      	beq.n	800525a <SPI_I2S_GetFlagStatus+0x42>
 8005250:	481f      	ldr	r0, [pc, #124]	; (80052d0 <SPI_I2S_GetFlagStatus+0xb8>)
 8005252:	f240 4173 	movw	r1, #1139	; 0x473
 8005256:	f7fb fe6f 	bl	8000f38 <assert_failed>
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
 800525a:	887b      	ldrh	r3, [r7, #2]
 800525c:	2b80      	cmp	r3, #128	; 0x80
 800525e:	d01d      	beq.n	800529c <SPI_I2S_GetFlagStatus+0x84>
 8005260:	887b      	ldrh	r3, [r7, #2]
 8005262:	2b40      	cmp	r3, #64	; 0x40
 8005264:	d01a      	beq.n	800529c <SPI_I2S_GetFlagStatus+0x84>
 8005266:	887b      	ldrh	r3, [r7, #2]
 8005268:	2b20      	cmp	r3, #32
 800526a:	d017      	beq.n	800529c <SPI_I2S_GetFlagStatus+0x84>
 800526c:	887b      	ldrh	r3, [r7, #2]
 800526e:	2b10      	cmp	r3, #16
 8005270:	d014      	beq.n	800529c <SPI_I2S_GetFlagStatus+0x84>
 8005272:	887b      	ldrh	r3, [r7, #2]
 8005274:	2b08      	cmp	r3, #8
 8005276:	d011      	beq.n	800529c <SPI_I2S_GetFlagStatus+0x84>
 8005278:	887b      	ldrh	r3, [r7, #2]
 800527a:	2b04      	cmp	r3, #4
 800527c:	d00e      	beq.n	800529c <SPI_I2S_GetFlagStatus+0x84>
 800527e:	887b      	ldrh	r3, [r7, #2]
 8005280:	2b02      	cmp	r3, #2
 8005282:	d00b      	beq.n	800529c <SPI_I2S_GetFlagStatus+0x84>
 8005284:	887b      	ldrh	r3, [r7, #2]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d008      	beq.n	800529c <SPI_I2S_GetFlagStatus+0x84>
 800528a:	887b      	ldrh	r3, [r7, #2]
 800528c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005290:	d004      	beq.n	800529c <SPI_I2S_GetFlagStatus+0x84>
 8005292:	480f      	ldr	r0, [pc, #60]	; (80052d0 <SPI_I2S_GetFlagStatus+0xb8>)
 8005294:	f240 4174 	movw	r1, #1140	; 0x474
 8005298:	f7fb fe4e 	bl	8000f38 <assert_failed>
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	891b      	ldrh	r3, [r3, #8]
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	887b      	ldrh	r3, [r7, #2]
 80052a4:	4013      	ands	r3, r2
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d002      	beq.n	80052b2 <SPI_I2S_GetFlagStatus+0x9a>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80052ac:	2301      	movs	r3, #1
 80052ae:	73fb      	strb	r3, [r7, #15]
 80052b0:	e001      	b.n	80052b6 <SPI_I2S_GetFlagStatus+0x9e>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80052b2:	2300      	movs	r3, #0
 80052b4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80052b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	40013000 	.word	0x40013000
 80052c4:	40003800 	.word	0x40003800
 80052c8:	40003c00 	.word	0x40003c00
 80052cc:	40003400 	.word	0x40003400
 80052d0:	08005f54 	.word	0x08005f54

080052d4 <SPI_I2S_ClearFlag>:
  *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  *  
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	460b      	mov	r3, r1
 80052de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	4b14      	ldr	r3, [pc, #80]	; (8005334 <SPI_I2S_ClearFlag+0x60>)
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d014      	beq.n	8005312 <SPI_I2S_ClearFlag+0x3e>
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	4b13      	ldr	r3, [pc, #76]	; (8005338 <SPI_I2S_ClearFlag+0x64>)
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d010      	beq.n	8005312 <SPI_I2S_ClearFlag+0x3e>
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	4b12      	ldr	r3, [pc, #72]	; (800533c <SPI_I2S_ClearFlag+0x68>)
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d00c      	beq.n	8005312 <SPI_I2S_ClearFlag+0x3e>
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	4b11      	ldr	r3, [pc, #68]	; (8005340 <SPI_I2S_ClearFlag+0x6c>)
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d008      	beq.n	8005312 <SPI_I2S_ClearFlag+0x3e>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8005306:	d004      	beq.n	8005312 <SPI_I2S_ClearFlag+0x3e>
 8005308:	480e      	ldr	r0, [pc, #56]	; (8005344 <SPI_I2S_ClearFlag+0x70>)
 800530a:	f240 419b 	movw	r1, #1179	; 0x49b
 800530e:	f7fb fe13 	bl	8000f38 <assert_failed>
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
 8005312:	887b      	ldrh	r3, [r7, #2]
 8005314:	2b10      	cmp	r3, #16
 8005316:	d004      	beq.n	8005322 <SPI_I2S_ClearFlag+0x4e>
 8005318:	480a      	ldr	r0, [pc, #40]	; (8005344 <SPI_I2S_ClearFlag+0x70>)
 800531a:	f240 419c 	movw	r1, #1180	; 0x49c
 800531e:	f7fb fe0b 	bl	8000f38 <assert_failed>
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8005322:	887b      	ldrh	r3, [r7, #2]
 8005324:	43db      	mvns	r3, r3
 8005326:	b29a      	uxth	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	811a      	strh	r2, [r3, #8]
}
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	40013000 	.word	0x40013000
 8005338:	40003800 	.word	0x40003800
 800533c:	40003c00 	.word	0x40003c00
 8005340:	40003400 	.word	0x40003400
 8005344:	08005f54 	.word	0x08005f54

08005348 <SYSCFG_EXTILineConfig>:
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8005348:	b590      	push	{r4, r7, lr}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	4602      	mov	r2, r0
 8005350:	460b      	mov	r3, r1
 8005352:	71fa      	strb	r2, [r7, #7]
 8005354:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8005356:	2300      	movs	r3, #0
 8005358:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
 800535a:	79fb      	ldrb	r3, [r7, #7]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d01b      	beq.n	8005398 <SYSCFG_EXTILineConfig+0x50>
 8005360:	79fb      	ldrb	r3, [r7, #7]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d018      	beq.n	8005398 <SYSCFG_EXTILineConfig+0x50>
 8005366:	79fb      	ldrb	r3, [r7, #7]
 8005368:	2b02      	cmp	r3, #2
 800536a:	d015      	beq.n	8005398 <SYSCFG_EXTILineConfig+0x50>
 800536c:	79fb      	ldrb	r3, [r7, #7]
 800536e:	2b03      	cmp	r3, #3
 8005370:	d012      	beq.n	8005398 <SYSCFG_EXTILineConfig+0x50>
 8005372:	79fb      	ldrb	r3, [r7, #7]
 8005374:	2b04      	cmp	r3, #4
 8005376:	d00f      	beq.n	8005398 <SYSCFG_EXTILineConfig+0x50>
 8005378:	79fb      	ldrb	r3, [r7, #7]
 800537a:	2b05      	cmp	r3, #5
 800537c:	d00c      	beq.n	8005398 <SYSCFG_EXTILineConfig+0x50>
 800537e:	79fb      	ldrb	r3, [r7, #7]
 8005380:	2b06      	cmp	r3, #6
 8005382:	d009      	beq.n	8005398 <SYSCFG_EXTILineConfig+0x50>
 8005384:	79fb      	ldrb	r3, [r7, #7]
 8005386:	2b07      	cmp	r3, #7
 8005388:	d006      	beq.n	8005398 <SYSCFG_EXTILineConfig+0x50>
 800538a:	79fb      	ldrb	r3, [r7, #7]
 800538c:	2b08      	cmp	r3, #8
 800538e:	d003      	beq.n	8005398 <SYSCFG_EXTILineConfig+0x50>
 8005390:	4834      	ldr	r0, [pc, #208]	; (8005464 <SYSCFG_EXTILineConfig+0x11c>)
 8005392:	217c      	movs	r1, #124	; 0x7c
 8005394:	f7fb fdd0 	bl	8000f38 <assert_failed>
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
 8005398:	79bb      	ldrb	r3, [r7, #6]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d030      	beq.n	8005400 <SYSCFG_EXTILineConfig+0xb8>
 800539e:	79bb      	ldrb	r3, [r7, #6]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d02d      	beq.n	8005400 <SYSCFG_EXTILineConfig+0xb8>
 80053a4:	79bb      	ldrb	r3, [r7, #6]
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d02a      	beq.n	8005400 <SYSCFG_EXTILineConfig+0xb8>
 80053aa:	79bb      	ldrb	r3, [r7, #6]
 80053ac:	2b03      	cmp	r3, #3
 80053ae:	d027      	beq.n	8005400 <SYSCFG_EXTILineConfig+0xb8>
 80053b0:	79bb      	ldrb	r3, [r7, #6]
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	d024      	beq.n	8005400 <SYSCFG_EXTILineConfig+0xb8>
 80053b6:	79bb      	ldrb	r3, [r7, #6]
 80053b8:	2b05      	cmp	r3, #5
 80053ba:	d021      	beq.n	8005400 <SYSCFG_EXTILineConfig+0xb8>
 80053bc:	79bb      	ldrb	r3, [r7, #6]
 80053be:	2b06      	cmp	r3, #6
 80053c0:	d01e      	beq.n	8005400 <SYSCFG_EXTILineConfig+0xb8>
 80053c2:	79bb      	ldrb	r3, [r7, #6]
 80053c4:	2b07      	cmp	r3, #7
 80053c6:	d01b      	beq.n	8005400 <SYSCFG_EXTILineConfig+0xb8>
 80053c8:	79bb      	ldrb	r3, [r7, #6]
 80053ca:	2b08      	cmp	r3, #8
 80053cc:	d018      	beq.n	8005400 <SYSCFG_EXTILineConfig+0xb8>
 80053ce:	79bb      	ldrb	r3, [r7, #6]
 80053d0:	2b09      	cmp	r3, #9
 80053d2:	d015      	beq.n	8005400 <SYSCFG_EXTILineConfig+0xb8>
 80053d4:	79bb      	ldrb	r3, [r7, #6]
 80053d6:	2b0a      	cmp	r3, #10
 80053d8:	d012      	beq.n	8005400 <SYSCFG_EXTILineConfig+0xb8>
 80053da:	79bb      	ldrb	r3, [r7, #6]
 80053dc:	2b0b      	cmp	r3, #11
 80053de:	d00f      	beq.n	8005400 <SYSCFG_EXTILineConfig+0xb8>
 80053e0:	79bb      	ldrb	r3, [r7, #6]
 80053e2:	2b0c      	cmp	r3, #12
 80053e4:	d00c      	beq.n	8005400 <SYSCFG_EXTILineConfig+0xb8>
 80053e6:	79bb      	ldrb	r3, [r7, #6]
 80053e8:	2b0d      	cmp	r3, #13
 80053ea:	d009      	beq.n	8005400 <SYSCFG_EXTILineConfig+0xb8>
 80053ec:	79bb      	ldrb	r3, [r7, #6]
 80053ee:	2b0e      	cmp	r3, #14
 80053f0:	d006      	beq.n	8005400 <SYSCFG_EXTILineConfig+0xb8>
 80053f2:	79bb      	ldrb	r3, [r7, #6]
 80053f4:	2b0f      	cmp	r3, #15
 80053f6:	d003      	beq.n	8005400 <SYSCFG_EXTILineConfig+0xb8>
 80053f8:	481a      	ldr	r0, [pc, #104]	; (8005464 <SYSCFG_EXTILineConfig+0x11c>)
 80053fa:	217d      	movs	r1, #125	; 0x7d
 80053fc:	f7fb fd9c 	bl	8000f38 <assert_failed>

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8005400:	79bb      	ldrb	r3, [r7, #6]
 8005402:	f003 0303 	and.w	r3, r3, #3
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	220f      	movs	r2, #15
 800540a:	fa02 f303 	lsl.w	r3, r2, r3
 800540e:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8005410:	4b15      	ldr	r3, [pc, #84]	; (8005468 <SYSCFG_EXTILineConfig+0x120>)
 8005412:	79ba      	ldrb	r2, [r7, #6]
 8005414:	0892      	lsrs	r2, r2, #2
 8005416:	b2d2      	uxtb	r2, r2
 8005418:	4913      	ldr	r1, [pc, #76]	; (8005468 <SYSCFG_EXTILineConfig+0x120>)
 800541a:	79b8      	ldrb	r0, [r7, #6]
 800541c:	0880      	lsrs	r0, r0, #2
 800541e:	b2c0      	uxtb	r0, r0
 8005420:	3002      	adds	r0, #2
 8005422:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8005426:	68f9      	ldr	r1, [r7, #12]
 8005428:	43c9      	mvns	r1, r1
 800542a:	4001      	ands	r1, r0
 800542c:	3202      	adds	r2, #2
 800542e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8005432:	4b0d      	ldr	r3, [pc, #52]	; (8005468 <SYSCFG_EXTILineConfig+0x120>)
 8005434:	79ba      	ldrb	r2, [r7, #6]
 8005436:	0892      	lsrs	r2, r2, #2
 8005438:	b2d2      	uxtb	r2, r2
 800543a:	490b      	ldr	r1, [pc, #44]	; (8005468 <SYSCFG_EXTILineConfig+0x120>)
 800543c:	79b8      	ldrb	r0, [r7, #6]
 800543e:	0880      	lsrs	r0, r0, #2
 8005440:	b2c0      	uxtb	r0, r0
 8005442:	3002      	adds	r0, #2
 8005444:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8005448:	79fc      	ldrb	r4, [r7, #7]
 800544a:	79b9      	ldrb	r1, [r7, #6]
 800544c:	f001 0103 	and.w	r1, r1, #3
 8005450:	0089      	lsls	r1, r1, #2
 8005452:	fa04 f101 	lsl.w	r1, r4, r1
 8005456:	4301      	orrs	r1, r0
 8005458:	3202      	adds	r2, #2
 800545a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	bd90      	pop	{r4, r7, pc}
 8005464:	08005fa4 	.word	0x08005fa4
 8005468:	40013800 	.word	0x40013800

0800546c <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b08a      	sub	sp, #40	; 0x28
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8005476:	2300      	movs	r3, #0
 8005478:	627b      	str	r3, [r7, #36]	; 0x24
 800547a:	2300      	movs	r3, #0
 800547c:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800547e:	2300      	movs	r3, #0
 8005480:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8005482:	2300      	movs	r3, #0
 8005484:	61bb      	str	r3, [r7, #24]
  RCC_ClocksTypeDef RCC_ClocksStatus;

  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	4b97      	ldr	r3, [pc, #604]	; (80056e8 <USART_Init+0x27c>)
 800548a:	429a      	cmp	r2, r3
 800548c:	d017      	beq.n	80054be <USART_Init+0x52>
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	4b96      	ldr	r3, [pc, #600]	; (80056ec <USART_Init+0x280>)
 8005492:	429a      	cmp	r2, r3
 8005494:	d013      	beq.n	80054be <USART_Init+0x52>
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	4b95      	ldr	r3, [pc, #596]	; (80056f0 <USART_Init+0x284>)
 800549a:	429a      	cmp	r2, r3
 800549c:	d00f      	beq.n	80054be <USART_Init+0x52>
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	4b94      	ldr	r3, [pc, #592]	; (80056f4 <USART_Init+0x288>)
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d00b      	beq.n	80054be <USART_Init+0x52>
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	4b93      	ldr	r3, [pc, #588]	; (80056f8 <USART_Init+0x28c>)
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d007      	beq.n	80054be <USART_Init+0x52>
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	4b92      	ldr	r3, [pc, #584]	; (80056fc <USART_Init+0x290>)
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d003      	beq.n	80054be <USART_Init+0x52>
 80054b6:	4892      	ldr	r0, [pc, #584]	; (8005700 <USART_Init+0x294>)
 80054b8:	21eb      	movs	r1, #235	; 0xeb
 80054ba:	f7fb fd3d 	bl	8000f38 <assert_failed>
  assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d004      	beq.n	80054d0 <USART_Init+0x64>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	4b8e      	ldr	r3, [pc, #568]	; (8005704 <USART_Init+0x298>)
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d903      	bls.n	80054d8 <USART_Init+0x6c>
 80054d0:	488b      	ldr	r0, [pc, #556]	; (8005700 <USART_Init+0x294>)
 80054d2:	21ec      	movs	r1, #236	; 0xec
 80054d4:	f7fb fd30 	bl	8000f38 <assert_failed>
  assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	889b      	ldrh	r3, [r3, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d008      	beq.n	80054f2 <USART_Init+0x86>
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	889b      	ldrh	r3, [r3, #4]
 80054e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e8:	d003      	beq.n	80054f2 <USART_Init+0x86>
 80054ea:	4885      	ldr	r0, [pc, #532]	; (8005700 <USART_Init+0x294>)
 80054ec:	21ed      	movs	r1, #237	; 0xed
 80054ee:	f7fb fd23 	bl	8000f38 <assert_failed>
  assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	88db      	ldrh	r3, [r3, #6]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d012      	beq.n	8005520 <USART_Init+0xb4>
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	88db      	ldrh	r3, [r3, #6]
 80054fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005502:	d00d      	beq.n	8005520 <USART_Init+0xb4>
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	88db      	ldrh	r3, [r3, #6]
 8005508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800550c:	d008      	beq.n	8005520 <USART_Init+0xb4>
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	88db      	ldrh	r3, [r3, #6]
 8005512:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005516:	d003      	beq.n	8005520 <USART_Init+0xb4>
 8005518:	4879      	ldr	r0, [pc, #484]	; (8005700 <USART_Init+0x294>)
 800551a:	21ee      	movs	r1, #238	; 0xee
 800551c:	f7fb fd0c 	bl	8000f38 <assert_failed>
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	891b      	ldrh	r3, [r3, #8]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00d      	beq.n	8005544 <USART_Init+0xd8>
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	891b      	ldrh	r3, [r3, #8]
 800552c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005530:	d008      	beq.n	8005544 <USART_Init+0xd8>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	891b      	ldrh	r3, [r3, #8]
 8005536:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800553a:	d003      	beq.n	8005544 <USART_Init+0xd8>
 800553c:	4870      	ldr	r0, [pc, #448]	; (8005700 <USART_Init+0x294>)
 800553e:	21ef      	movs	r1, #239	; 0xef
 8005540:	f7fb fcfa 	bl	8000f38 <assert_failed>
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	895b      	ldrh	r3, [r3, #10]
 8005548:	461a      	mov	r2, r3
 800554a:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800554e:	4013      	ands	r3, r2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d103      	bne.n	800555c <USART_Init+0xf0>
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	895b      	ldrh	r3, [r3, #10]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d103      	bne.n	8005564 <USART_Init+0xf8>
 800555c:	4868      	ldr	r0, [pc, #416]	; (8005700 <USART_Init+0x294>)
 800555e:	21f0      	movs	r1, #240	; 0xf0
 8005560:	f7fb fcea 	bl	8000f38 <assert_failed>
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	899b      	ldrh	r3, [r3, #12]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d012      	beq.n	8005592 <USART_Init+0x126>
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	899b      	ldrh	r3, [r3, #12]
 8005570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005574:	d00d      	beq.n	8005592 <USART_Init+0x126>
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	899b      	ldrh	r3, [r3, #12]
 800557a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800557e:	d008      	beq.n	8005592 <USART_Init+0x126>
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	899b      	ldrh	r3, [r3, #12]
 8005584:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005588:	d003      	beq.n	8005592 <USART_Init+0x126>
 800558a:	485d      	ldr	r0, [pc, #372]	; (8005700 <USART_Init+0x294>)
 800558c:	21f1      	movs	r1, #241	; 0xf1
 800558e:	f7fb fcd3 	bl	8000f38 <assert_failed>

  /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	899b      	ldrh	r3, [r3, #12]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d013      	beq.n	80055c2 <USART_Init+0x156>
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	4b52      	ldr	r3, [pc, #328]	; (80056e8 <USART_Init+0x27c>)
 800559e:	429a      	cmp	r2, r3
 80055a0:	d00f      	beq.n	80055c2 <USART_Init+0x156>
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	4b51      	ldr	r3, [pc, #324]	; (80056ec <USART_Init+0x280>)
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d00b      	beq.n	80055c2 <USART_Init+0x156>
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	4b50      	ldr	r3, [pc, #320]	; (80056f0 <USART_Init+0x284>)
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d007      	beq.n	80055c2 <USART_Init+0x156>
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	4b51      	ldr	r3, [pc, #324]	; (80056fc <USART_Init+0x290>)
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d003      	beq.n	80055c2 <USART_Init+0x156>
 80055ba:	4851      	ldr	r0, [pc, #324]	; (8005700 <USART_Init+0x294>)
 80055bc:	21f6      	movs	r1, #246	; 0xf6
 80055be:	f7fb fcbb 	bl	8000f38 <assert_failed>
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	8a1b      	ldrh	r3, [r3, #16]
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80055d0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	88db      	ldrh	r3, [r3, #6]
 80055d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055d8:	4313      	orrs	r3, r2
 80055da:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	b29a      	uxth	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	899b      	ldrh	r3, [r3, #12]
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80055ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80055f2:	f023 030c 	bic.w	r3, r3, #12
 80055f6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	889a      	ldrh	r2, [r3, #4]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	891b      	ldrh	r3, [r3, #8]
 8005600:	4313      	orrs	r3, r2
 8005602:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8005608:	4313      	orrs	r3, r2
 800560a:	b29b      	uxth	r3, r3
 800560c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800560e:	4313      	orrs	r3, r2
 8005610:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	b29a      	uxth	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	8a9b      	ldrh	r3, [r3, #20]
 800561e:	b29b      	uxth	r3, r3
 8005620:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005628:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	899b      	ldrh	r3, [r3, #12]
 800562e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005630:	4313      	orrs	r3, r2
 8005632:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	b29a      	uxth	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800563c:	f107 0308 	add.w	r3, r7, #8
 8005640:	4618      	mov	r0, r3
 8005642:	f7ff fb3d 	bl	8004cc0 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	4b27      	ldr	r3, [pc, #156]	; (80056e8 <USART_Init+0x27c>)
 800564a:	429a      	cmp	r2, r3
 800564c:	d003      	beq.n	8005656 <USART_Init+0x1ea>
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	4b2a      	ldr	r3, [pc, #168]	; (80056fc <USART_Init+0x290>)
 8005652:	429a      	cmp	r2, r3
 8005654:	d102      	bne.n	800565c <USART_Init+0x1f0>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	623b      	str	r3, [r7, #32]
 800565a:	e001      	b.n	8005660 <USART_Init+0x1f4>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	899b      	ldrh	r3, [r3, #12]
 8005664:	b29b      	uxth	r3, r3
 8005666:	b29b      	uxth	r3, r3
 8005668:	b21b      	sxth	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	da0c      	bge.n	8005688 <USART_Init+0x21c>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800566e:	6a3a      	ldr	r2, [r7, #32]
 8005670:	4613      	mov	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	009a      	lsls	r2, r3, #2
 8005678:	441a      	add	r2, r3
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	fbb2 f3f3 	udiv	r3, r2, r3
 8005684:	61fb      	str	r3, [r7, #28]
 8005686:	e00b      	b.n	80056a0 <USART_Init+0x234>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8005688:	6a3a      	ldr	r2, [r7, #32]
 800568a:	4613      	mov	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	009a      	lsls	r2, r3, #2
 8005692:	441a      	add	r2, r3
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	fbb2 f3f3 	udiv	r3, r2, r3
 800569e:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80056a0:	69fa      	ldr	r2, [r7, #28]
 80056a2:	4b19      	ldr	r3, [pc, #100]	; (8005708 <USART_Init+0x29c>)
 80056a4:	fba3 1302 	umull	r1, r3, r3, r2
 80056a8:	095b      	lsrs	r3, r3, #5
 80056aa:	011b      	lsls	r3, r3, #4
 80056ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b0:	091b      	lsrs	r3, r3, #4
 80056b2:	2264      	movs	r2, #100	; 0x64
 80056b4:	fb02 f303 	mul.w	r3, r2, r3
 80056b8:	69fa      	ldr	r2, [r7, #28]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	899b      	ldrh	r3, [r3, #12]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	b21b      	sxth	r3, r3
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	da1f      	bge.n	800570c <USART_Init+0x2a0>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80056d4:	4b0c      	ldr	r3, [pc, #48]	; (8005708 <USART_Init+0x29c>)
 80056d6:	fba3 1302 	umull	r1, r3, r3, r2
 80056da:	095b      	lsrs	r3, r3, #5
 80056dc:	f003 0307 	and.w	r3, r3, #7
 80056e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056e2:	4313      	orrs	r3, r2
 80056e4:	627b      	str	r3, [r7, #36]	; 0x24
 80056e6:	e01e      	b.n	8005726 <USART_Init+0x2ba>
 80056e8:	40011000 	.word	0x40011000
 80056ec:	40004400 	.word	0x40004400
 80056f0:	40004800 	.word	0x40004800
 80056f4:	40004c00 	.word	0x40004c00
 80056f8:	40005000 	.word	0x40005000
 80056fc:	40011400 	.word	0x40011400
 8005700:	08005ff8 	.word	0x08005ff8
 8005704:	007270e0 	.word	0x007270e0
 8005708:	51eb851f 	.word	0x51eb851f
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	011b      	lsls	r3, r3, #4
 8005710:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005714:	4b07      	ldr	r3, [pc, #28]	; (8005734 <USART_Init+0x2c8>)
 8005716:	fba3 1302 	umull	r1, r3, r3, r2
 800571a:	095b      	lsrs	r3, r3, #5
 800571c:	f003 030f 	and.w	r3, r3, #15
 8005720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005722:	4313      	orrs	r3, r2
 8005724:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	b29a      	uxth	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	811a      	strh	r2, [r3, #8]
}
 800572e:	3728      	adds	r7, #40	; 0x28
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	51eb851f 	.word	0x51eb851f

08005738 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	460b      	mov	r3, r1
 8005742:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	4b1f      	ldr	r3, [pc, #124]	; (80057c4 <USART_Cmd+0x8c>)
 8005748:	429a      	cmp	r2, r3
 800574a:	d018      	beq.n	800577e <USART_Cmd+0x46>
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	4b1e      	ldr	r3, [pc, #120]	; (80057c8 <USART_Cmd+0x90>)
 8005750:	429a      	cmp	r2, r3
 8005752:	d014      	beq.n	800577e <USART_Cmd+0x46>
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	4b1d      	ldr	r3, [pc, #116]	; (80057cc <USART_Cmd+0x94>)
 8005758:	429a      	cmp	r2, r3
 800575a:	d010      	beq.n	800577e <USART_Cmd+0x46>
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	4b1c      	ldr	r3, [pc, #112]	; (80057d0 <USART_Cmd+0x98>)
 8005760:	429a      	cmp	r2, r3
 8005762:	d00c      	beq.n	800577e <USART_Cmd+0x46>
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	4b1b      	ldr	r3, [pc, #108]	; (80057d4 <USART_Cmd+0x9c>)
 8005768:	429a      	cmp	r2, r3
 800576a:	d008      	beq.n	800577e <USART_Cmd+0x46>
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	4b1a      	ldr	r3, [pc, #104]	; (80057d8 <USART_Cmd+0xa0>)
 8005770:	429a      	cmp	r2, r3
 8005772:	d004      	beq.n	800577e <USART_Cmd+0x46>
 8005774:	4819      	ldr	r0, [pc, #100]	; (80057dc <USART_Cmd+0xa4>)
 8005776:	f240 119b 	movw	r1, #411	; 0x19b
 800577a:	f7fb fbdd 	bl	8000f38 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 800577e:	78fb      	ldrb	r3, [r7, #3]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d007      	beq.n	8005794 <USART_Cmd+0x5c>
 8005784:	78fb      	ldrb	r3, [r7, #3]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d004      	beq.n	8005794 <USART_Cmd+0x5c>
 800578a:	4814      	ldr	r0, [pc, #80]	; (80057dc <USART_Cmd+0xa4>)
 800578c:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8005790:	f7fb fbd2 	bl	8000f38 <assert_failed>
  
  if (NewState != DISABLE)
 8005794:	78fb      	ldrb	r3, [r7, #3]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d008      	beq.n	80057ac <USART_Cmd+0x74>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	899b      	ldrh	r3, [r3, #12]
 800579e:	b29b      	uxth	r3, r3
 80057a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	819a      	strh	r2, [r3, #12]
 80057aa:	e007      	b.n	80057bc <USART_Cmd+0x84>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	899b      	ldrh	r3, [r3, #12]
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	819a      	strh	r2, [r3, #12]
  }
}
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	40011000 	.word	0x40011000
 80057c8:	40004400 	.word	0x40004400
 80057cc:	40004800 	.word	0x40004800
 80057d0:	40004c00 	.word	0x40004c00
 80057d4:	40005000 	.word	0x40005000
 80057d8:	40011400 	.word	0x40011400
 80057dc:	08005ff8 	.word	0x08005ff8

080057e0 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	4613      	mov	r3, r2
 80057ea:	460a      	mov	r2, r1
 80057ec:	807a      	strh	r2, [r7, #2]
 80057ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	4b27      	ldr	r3, [pc, #156]	; (8005890 <USART_DMACmd+0xb0>)
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d018      	beq.n	800582a <USART_DMACmd+0x4a>
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	4b26      	ldr	r3, [pc, #152]	; (8005894 <USART_DMACmd+0xb4>)
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d014      	beq.n	800582a <USART_DMACmd+0x4a>
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	4b25      	ldr	r3, [pc, #148]	; (8005898 <USART_DMACmd+0xb8>)
 8005804:	429a      	cmp	r2, r3
 8005806:	d010      	beq.n	800582a <USART_DMACmd+0x4a>
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	4b24      	ldr	r3, [pc, #144]	; (800589c <USART_DMACmd+0xbc>)
 800580c:	429a      	cmp	r2, r3
 800580e:	d00c      	beq.n	800582a <USART_DMACmd+0x4a>
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	4b23      	ldr	r3, [pc, #140]	; (80058a0 <USART_DMACmd+0xc0>)
 8005814:	429a      	cmp	r2, r3
 8005816:	d008      	beq.n	800582a <USART_DMACmd+0x4a>
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	4b22      	ldr	r3, [pc, #136]	; (80058a4 <USART_DMACmd+0xc4>)
 800581c:	429a      	cmp	r2, r3
 800581e:	d004      	beq.n	800582a <USART_DMACmd+0x4a>
 8005820:	4821      	ldr	r0, [pc, #132]	; (80058a8 <USART_DMACmd+0xc8>)
 8005822:	f240 413b 	movw	r1, #1083	; 0x43b
 8005826:	f7fb fb87 	bl	8000f38 <assert_failed>
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
 800582a:	887a      	ldrh	r2, [r7, #2]
 800582c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8005830:	4013      	ands	r3, r2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d102      	bne.n	800583c <USART_DMACmd+0x5c>
 8005836:	887b      	ldrh	r3, [r7, #2]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d104      	bne.n	8005846 <USART_DMACmd+0x66>
 800583c:	481a      	ldr	r0, [pc, #104]	; (80058a8 <USART_DMACmd+0xc8>)
 800583e:	f240 413c 	movw	r1, #1084	; 0x43c
 8005842:	f7fb fb79 	bl	8000f38 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 8005846:	787b      	ldrb	r3, [r7, #1]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d007      	beq.n	800585c <USART_DMACmd+0x7c>
 800584c:	787b      	ldrb	r3, [r7, #1]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d004      	beq.n	800585c <USART_DMACmd+0x7c>
 8005852:	4815      	ldr	r0, [pc, #84]	; (80058a8 <USART_DMACmd+0xc8>)
 8005854:	f240 413d 	movw	r1, #1085	; 0x43d
 8005858:	f7fb fb6e 	bl	8000f38 <assert_failed>

  if (NewState != DISABLE)
 800585c:	787b      	ldrb	r3, [r7, #1]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d008      	beq.n	8005874 <USART_DMACmd+0x94>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	8a9b      	ldrh	r3, [r3, #20]
 8005866:	b29a      	uxth	r2, r3
 8005868:	887b      	ldrh	r3, [r7, #2]
 800586a:	4313      	orrs	r3, r2
 800586c:	b29a      	uxth	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	829a      	strh	r2, [r3, #20]
 8005872:	e009      	b.n	8005888 <USART_DMACmd+0xa8>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	8a9b      	ldrh	r3, [r3, #20]
 8005878:	b29a      	uxth	r2, r3
 800587a:	887b      	ldrh	r3, [r7, #2]
 800587c:	43db      	mvns	r3, r3
 800587e:	b29b      	uxth	r3, r3
 8005880:	4013      	ands	r3, r2
 8005882:	b29a      	uxth	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	829a      	strh	r2, [r3, #20]
  }
}
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	40011000 	.word	0x40011000
 8005894:	40004400 	.word	0x40004400
 8005898:	40004800 	.word	0x40004800
 800589c:	40004c00 	.word	0x40004c00
 80058a0:	40005000 	.word	0x40005000
 80058a4:	40011400 	.word	0x40011400
 80058a8:	08005ff8 	.word	0x08005ff8

080058ac <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	4613      	mov	r3, r2
 80058b6:	460a      	mov	r2, r1
 80058b8:	807a      	strh	r2, [r7, #2]
 80058ba:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 80058bc:	2300      	movs	r3, #0
 80058be:	613b      	str	r3, [r7, #16]
 80058c0:	2300      	movs	r3, #0
 80058c2:	60fb      	str	r3, [r7, #12]
 80058c4:	2300      	movs	r3, #0
 80058c6:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 80058c8:	2300      	movs	r3, #0
 80058ca:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	4b4f      	ldr	r3, [pc, #316]	; (8005a0c <USART_ITConfig+0x160>)
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d018      	beq.n	8005906 <USART_ITConfig+0x5a>
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	4b4e      	ldr	r3, [pc, #312]	; (8005a10 <USART_ITConfig+0x164>)
 80058d8:	429a      	cmp	r2, r3
 80058da:	d014      	beq.n	8005906 <USART_ITConfig+0x5a>
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	4b4d      	ldr	r3, [pc, #308]	; (8005a14 <USART_ITConfig+0x168>)
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d010      	beq.n	8005906 <USART_ITConfig+0x5a>
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	4b4c      	ldr	r3, [pc, #304]	; (8005a18 <USART_ITConfig+0x16c>)
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d00c      	beq.n	8005906 <USART_ITConfig+0x5a>
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	4b4b      	ldr	r3, [pc, #300]	; (8005a1c <USART_ITConfig+0x170>)
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d008      	beq.n	8005906 <USART_ITConfig+0x5a>
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	4b4a      	ldr	r3, [pc, #296]	; (8005a20 <USART_ITConfig+0x174>)
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d004      	beq.n	8005906 <USART_ITConfig+0x5a>
 80058fc:	4849      	ldr	r0, [pc, #292]	; (8005a24 <USART_ITConfig+0x178>)
 80058fe:	f240 41bd 	movw	r1, #1213	; 0x4bd
 8005902:	f7fb fb19 	bl	8000f38 <assert_failed>
  assert_param(IS_USART_CONFIG_IT(USART_IT));
 8005906:	887b      	ldrh	r3, [r7, #2]
 8005908:	2b28      	cmp	r3, #40	; 0x28
 800590a:	d025      	beq.n	8005958 <USART_ITConfig+0xac>
 800590c:	887a      	ldrh	r2, [r7, #2]
 800590e:	f240 7327 	movw	r3, #1831	; 0x727
 8005912:	429a      	cmp	r2, r3
 8005914:	d020      	beq.n	8005958 <USART_ITConfig+0xac>
 8005916:	887a      	ldrh	r2, [r7, #2]
 8005918:	f240 6326 	movw	r3, #1574	; 0x626
 800591c:	429a      	cmp	r2, r3
 800591e:	d01b      	beq.n	8005958 <USART_ITConfig+0xac>
 8005920:	887a      	ldrh	r2, [r7, #2]
 8005922:	f240 5325 	movw	r3, #1317	; 0x525
 8005926:	429a      	cmp	r2, r3
 8005928:	d016      	beq.n	8005958 <USART_ITConfig+0xac>
 800592a:	887a      	ldrh	r2, [r7, #2]
 800592c:	f240 4324 	movw	r3, #1060	; 0x424
 8005930:	429a      	cmp	r2, r3
 8005932:	d011      	beq.n	8005958 <USART_ITConfig+0xac>
 8005934:	887a      	ldrh	r2, [r7, #2]
 8005936:	f640 0346 	movw	r3, #2118	; 0x846
 800593a:	429a      	cmp	r2, r3
 800593c:	d00c      	beq.n	8005958 <USART_ITConfig+0xac>
 800593e:	887a      	ldrh	r2, [r7, #2]
 8005940:	f640 136a 	movw	r3, #2410	; 0x96a
 8005944:	429a      	cmp	r2, r3
 8005946:	d007      	beq.n	8005958 <USART_ITConfig+0xac>
 8005948:	887b      	ldrh	r3, [r7, #2]
 800594a:	2b60      	cmp	r3, #96	; 0x60
 800594c:	d004      	beq.n	8005958 <USART_ITConfig+0xac>
 800594e:	4835      	ldr	r0, [pc, #212]	; (8005a24 <USART_ITConfig+0x178>)
 8005950:	f240 41be 	movw	r1, #1214	; 0x4be
 8005954:	f7fb faf0 	bl	8000f38 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8005958:	787b      	ldrb	r3, [r7, #1]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d007      	beq.n	800596e <USART_ITConfig+0xc2>
 800595e:	787b      	ldrb	r3, [r7, #1]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d004      	beq.n	800596e <USART_ITConfig+0xc2>
 8005964:	482f      	ldr	r0, [pc, #188]	; (8005a24 <USART_ITConfig+0x178>)
 8005966:	f240 41bf 	movw	r1, #1215	; 0x4bf
 800596a:	f7fb fae5 	bl	8000f38 <assert_failed>

  /* The CTS interrupt is not available for UART4 and UART5 */
  if (USART_IT == USART_IT_CTS)
 800596e:	887a      	ldrh	r2, [r7, #2]
 8005970:	f640 136a 	movw	r3, #2410	; 0x96a
 8005974:	429a      	cmp	r2, r3
 8005976:	d114      	bne.n	80059a2 <USART_ITConfig+0xf6>
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	4b24      	ldr	r3, [pc, #144]	; (8005a0c <USART_ITConfig+0x160>)
 800597c:	429a      	cmp	r2, r3
 800597e:	d010      	beq.n	80059a2 <USART_ITConfig+0xf6>
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	4b23      	ldr	r3, [pc, #140]	; (8005a10 <USART_ITConfig+0x164>)
 8005984:	429a      	cmp	r2, r3
 8005986:	d00c      	beq.n	80059a2 <USART_ITConfig+0xf6>
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	4b22      	ldr	r3, [pc, #136]	; (8005a14 <USART_ITConfig+0x168>)
 800598c:	429a      	cmp	r2, r3
 800598e:	d008      	beq.n	80059a2 <USART_ITConfig+0xf6>
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	4b23      	ldr	r3, [pc, #140]	; (8005a20 <USART_ITConfig+0x174>)
 8005994:	429a      	cmp	r2, r3
 8005996:	d004      	beq.n	80059a2 <USART_ITConfig+0xf6>
 8005998:	4822      	ldr	r0, [pc, #136]	; (8005a24 <USART_ITConfig+0x178>)
 800599a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800599e:	f7fb facb 	bl	8000f38 <assert_failed>
  } 
    
  usartxbase = (uint32_t)USARTx;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80059a6:	887b      	ldrh	r3, [r7, #2]
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	095b      	lsrs	r3, r3, #5
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80059b0:	887b      	ldrh	r3, [r7, #2]
 80059b2:	f003 031f 	and.w	r3, r3, #31
 80059b6:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2201      	movs	r2, #1
 80059bc:	fa02 f303 	lsl.w	r3, r2, r3
 80059c0:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d103      	bne.n	80059d0 <USART_ITConfig+0x124>
  {
    usartxbase += 0x0C;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	330c      	adds	r3, #12
 80059cc:	617b      	str	r3, [r7, #20]
 80059ce:	e009      	b.n	80059e4 <USART_ITConfig+0x138>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d103      	bne.n	80059de <USART_ITConfig+0x132>
  {
    usartxbase += 0x10;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	3310      	adds	r3, #16
 80059da:	617b      	str	r3, [r7, #20]
 80059dc:	e002      	b.n	80059e4 <USART_ITConfig+0x138>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	3314      	adds	r3, #20
 80059e2:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 80059e4:	787b      	ldrb	r3, [r7, #1]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d006      	beq.n	80059f8 <USART_ITConfig+0x14c>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	6811      	ldr	r1, [r2, #0]
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	601a      	str	r2, [r3, #0]
 80059f6:	e006      	b.n	8005a06 <USART_ITConfig+0x15a>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	6811      	ldr	r1, [r2, #0]
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	43d2      	mvns	r2, r2
 8005a02:	400a      	ands	r2, r1
 8005a04:	601a      	str	r2, [r3, #0]
  }
}
 8005a06:	3718      	adds	r7, #24
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	40011000 	.word	0x40011000
 8005a10:	40004400 	.word	0x40004400
 8005a14:	40004800 	.word	0x40004800
 8005a18:	40004c00 	.word	0x40004c00
 8005a1c:	40005000 	.word	0x40005000
 8005a20:	40011400 	.word	0x40011400
 8005a24:	08005ff8 	.word	0x08005ff8

08005a28 <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	460b      	mov	r3, r1
 8005a32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	4b26      	ldr	r3, [pc, #152]	; (8005ad0 <USART_ClearFlag+0xa8>)
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d018      	beq.n	8005a6e <USART_ClearFlag+0x46>
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	4b25      	ldr	r3, [pc, #148]	; (8005ad4 <USART_ClearFlag+0xac>)
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d014      	beq.n	8005a6e <USART_ClearFlag+0x46>
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	4b24      	ldr	r3, [pc, #144]	; (8005ad8 <USART_ClearFlag+0xb0>)
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d010      	beq.n	8005a6e <USART_ClearFlag+0x46>
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	4b23      	ldr	r3, [pc, #140]	; (8005adc <USART_ClearFlag+0xb4>)
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d00c      	beq.n	8005a6e <USART_ClearFlag+0x46>
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	4b22      	ldr	r3, [pc, #136]	; (8005ae0 <USART_ClearFlag+0xb8>)
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d008      	beq.n	8005a6e <USART_ClearFlag+0x46>
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	4b21      	ldr	r3, [pc, #132]	; (8005ae4 <USART_ClearFlag+0xbc>)
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d004      	beq.n	8005a6e <USART_ClearFlag+0x46>
 8005a64:	4820      	ldr	r0, [pc, #128]	; (8005ae8 <USART_ClearFlag+0xc0>)
 8005a66:	f240 512c 	movw	r1, #1324	; 0x52c
 8005a6a:	f7fb fa65 	bl	8000f38 <assert_failed>
  assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
 8005a6e:	887a      	ldrh	r2, [r7, #2]
 8005a70:	f64f 439f 	movw	r3, #64671	; 0xfc9f
 8005a74:	4013      	ands	r3, r2
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d102      	bne.n	8005a80 <USART_ClearFlag+0x58>
 8005a7a:	887b      	ldrh	r3, [r7, #2]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d104      	bne.n	8005a8a <USART_ClearFlag+0x62>
 8005a80:	4819      	ldr	r0, [pc, #100]	; (8005ae8 <USART_ClearFlag+0xc0>)
 8005a82:	f240 512d 	movw	r1, #1325	; 0x52d
 8005a86:	f7fb fa57 	bl	8000f38 <assert_failed>

  /* The CTS flag is not available for UART4 and UART5 */
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
 8005a8a:	887b      	ldrh	r3, [r7, #2]
 8005a8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d014      	beq.n	8005abe <USART_ClearFlag+0x96>
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	4b0e      	ldr	r3, [pc, #56]	; (8005ad0 <USART_ClearFlag+0xa8>)
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d010      	beq.n	8005abe <USART_ClearFlag+0x96>
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	4b0d      	ldr	r3, [pc, #52]	; (8005ad4 <USART_ClearFlag+0xac>)
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d00c      	beq.n	8005abe <USART_ClearFlag+0x96>
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	4b0c      	ldr	r3, [pc, #48]	; (8005ad8 <USART_ClearFlag+0xb0>)
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d008      	beq.n	8005abe <USART_ClearFlag+0x96>
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	4b0d      	ldr	r3, [pc, #52]	; (8005ae4 <USART_ClearFlag+0xbc>)
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d004      	beq.n	8005abe <USART_ClearFlag+0x96>
 8005ab4:	480c      	ldr	r0, [pc, #48]	; (8005ae8 <USART_ClearFlag+0xc0>)
 8005ab6:	f240 5132 	movw	r1, #1330	; 0x532
 8005aba:	f7fb fa3d 	bl	8000f38 <assert_failed>
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8005abe:	887b      	ldrh	r3, [r7, #2]
 8005ac0:	43db      	mvns	r3, r3
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	801a      	strh	r2, [r3, #0]
}
 8005ac8:	3708      	adds	r7, #8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	40011000 	.word	0x40011000
 8005ad4:	40004400 	.word	0x40004400
 8005ad8:	40004800 	.word	0x40004800
 8005adc:	40004c00 	.word	0x40004c00
 8005ae0:	40005000 	.word	0x40005000
 8005ae4:	40011400 	.word	0x40011400
 8005ae8:	08005ff8 	.word	0x08005ff8

08005aec <__libc_init_array>:
 8005aec:	b570      	push	{r4, r5, r6, lr}
 8005aee:	4e0f      	ldr	r6, [pc, #60]	; (8005b2c <__libc_init_array+0x40>)
 8005af0:	4d0f      	ldr	r5, [pc, #60]	; (8005b30 <__libc_init_array+0x44>)
 8005af2:	1b76      	subs	r6, r6, r5
 8005af4:	10b6      	asrs	r6, r6, #2
 8005af6:	d007      	beq.n	8005b08 <__libc_init_array+0x1c>
 8005af8:	3d04      	subs	r5, #4
 8005afa:	2400      	movs	r4, #0
 8005afc:	3401      	adds	r4, #1
 8005afe:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8005b02:	4798      	blx	r3
 8005b04:	42a6      	cmp	r6, r4
 8005b06:	d1f9      	bne.n	8005afc <__libc_init_array+0x10>
 8005b08:	4e0a      	ldr	r6, [pc, #40]	; (8005b34 <__libc_init_array+0x48>)
 8005b0a:	4d0b      	ldr	r5, [pc, #44]	; (8005b38 <__libc_init_array+0x4c>)
 8005b0c:	1b76      	subs	r6, r6, r5
 8005b0e:	f000 faab 	bl	8006068 <_init>
 8005b12:	10b6      	asrs	r6, r6, #2
 8005b14:	d008      	beq.n	8005b28 <__libc_init_array+0x3c>
 8005b16:	3d04      	subs	r5, #4
 8005b18:	2400      	movs	r4, #0
 8005b1a:	3401      	adds	r4, #1
 8005b1c:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8005b20:	4798      	blx	r3
 8005b22:	42a6      	cmp	r6, r4
 8005b24:	d1f9      	bne.n	8005b1a <__libc_init_array+0x2e>
 8005b26:	bd70      	pop	{r4, r5, r6, pc}
 8005b28:	bd70      	pop	{r4, r5, r6, pc}
 8005b2a:	bf00      	nop
 8005b2c:	08006080 	.word	0x08006080
 8005b30:	08006080 	.word	0x08006080
 8005b34:	08006088 	.word	0x08006088
 8005b38:	08006080 	.word	0x08006080

08005b3c <memcmp>:
 8005b3c:	2a03      	cmp	r2, #3
 8005b3e:	b470      	push	{r4, r5, r6}
 8005b40:	d928      	bls.n	8005b94 <memcmp+0x58>
 8005b42:	ea40 0301 	orr.w	r3, r0, r1
 8005b46:	079b      	lsls	r3, r3, #30
 8005b48:	d013      	beq.n	8005b72 <memcmp+0x36>
 8005b4a:	7805      	ldrb	r5, [r0, #0]
 8005b4c:	780c      	ldrb	r4, [r1, #0]
 8005b4e:	42a5      	cmp	r5, r4
 8005b50:	d124      	bne.n	8005b9c <memcmp+0x60>
 8005b52:	3a01      	subs	r2, #1
 8005b54:	2300      	movs	r3, #0
 8005b56:	e005      	b.n	8005b64 <memcmp+0x28>
 8005b58:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005b5c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005b60:	42a5      	cmp	r5, r4
 8005b62:	d11b      	bne.n	8005b9c <memcmp+0x60>
 8005b64:	4293      	cmp	r3, r2
 8005b66:	f103 0301 	add.w	r3, r3, #1
 8005b6a:	d1f5      	bne.n	8005b58 <memcmp+0x1c>
 8005b6c:	2000      	movs	r0, #0
 8005b6e:	bc70      	pop	{r4, r5, r6}
 8005b70:	4770      	bx	lr
 8005b72:	460c      	mov	r4, r1
 8005b74:	4603      	mov	r3, r0
 8005b76:	6825      	ldr	r5, [r4, #0]
 8005b78:	681e      	ldr	r6, [r3, #0]
 8005b7a:	42ae      	cmp	r6, r5
 8005b7c:	4621      	mov	r1, r4
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f104 0404 	add.w	r4, r4, #4
 8005b84:	f103 0304 	add.w	r3, r3, #4
 8005b88:	d104      	bne.n	8005b94 <memcmp+0x58>
 8005b8a:	3a04      	subs	r2, #4
 8005b8c:	2a03      	cmp	r2, #3
 8005b8e:	4618      	mov	r0, r3
 8005b90:	4621      	mov	r1, r4
 8005b92:	d8f0      	bhi.n	8005b76 <memcmp+0x3a>
 8005b94:	2a00      	cmp	r2, #0
 8005b96:	d1d8      	bne.n	8005b4a <memcmp+0xe>
 8005b98:	4610      	mov	r0, r2
 8005b9a:	e7e8      	b.n	8005b6e <memcmp+0x32>
 8005b9c:	1b28      	subs	r0, r5, r4
 8005b9e:	bc70      	pop	{r4, r5, r6}
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop

08005ba4 <memset>:
 8005ba4:	b4f0      	push	{r4, r5, r6, r7}
 8005ba6:	0784      	lsls	r4, r0, #30
 8005ba8:	d043      	beq.n	8005c32 <memset+0x8e>
 8005baa:	1e54      	subs	r4, r2, #1
 8005bac:	2a00      	cmp	r2, #0
 8005bae:	d03e      	beq.n	8005c2e <memset+0x8a>
 8005bb0:	b2cd      	uxtb	r5, r1
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	e003      	b.n	8005bbe <memset+0x1a>
 8005bb6:	1e62      	subs	r2, r4, #1
 8005bb8:	2c00      	cmp	r4, #0
 8005bba:	d038      	beq.n	8005c2e <memset+0x8a>
 8005bbc:	4614      	mov	r4, r2
 8005bbe:	f803 5b01 	strb.w	r5, [r3], #1
 8005bc2:	079a      	lsls	r2, r3, #30
 8005bc4:	d1f7      	bne.n	8005bb6 <memset+0x12>
 8005bc6:	2c03      	cmp	r4, #3
 8005bc8:	d92a      	bls.n	8005c20 <memset+0x7c>
 8005bca:	b2cd      	uxtb	r5, r1
 8005bcc:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8005bd0:	2c0f      	cmp	r4, #15
 8005bd2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8005bd6:	d915      	bls.n	8005c04 <memset+0x60>
 8005bd8:	f1a4 0710 	sub.w	r7, r4, #16
 8005bdc:	093f      	lsrs	r7, r7, #4
 8005bde:	f103 0610 	add.w	r6, r3, #16
 8005be2:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8005be6:	461a      	mov	r2, r3
 8005be8:	6015      	str	r5, [r2, #0]
 8005bea:	6055      	str	r5, [r2, #4]
 8005bec:	6095      	str	r5, [r2, #8]
 8005bee:	60d5      	str	r5, [r2, #12]
 8005bf0:	3210      	adds	r2, #16
 8005bf2:	42b2      	cmp	r2, r6
 8005bf4:	d1f8      	bne.n	8005be8 <memset+0x44>
 8005bf6:	f004 040f 	and.w	r4, r4, #15
 8005bfa:	3701      	adds	r7, #1
 8005bfc:	2c03      	cmp	r4, #3
 8005bfe:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8005c02:	d90d      	bls.n	8005c20 <memset+0x7c>
 8005c04:	461e      	mov	r6, r3
 8005c06:	4622      	mov	r2, r4
 8005c08:	3a04      	subs	r2, #4
 8005c0a:	2a03      	cmp	r2, #3
 8005c0c:	f846 5b04 	str.w	r5, [r6], #4
 8005c10:	d8fa      	bhi.n	8005c08 <memset+0x64>
 8005c12:	1f22      	subs	r2, r4, #4
 8005c14:	f022 0203 	bic.w	r2, r2, #3
 8005c18:	3204      	adds	r2, #4
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f004 0403 	and.w	r4, r4, #3
 8005c20:	b12c      	cbz	r4, 8005c2e <memset+0x8a>
 8005c22:	b2c9      	uxtb	r1, r1
 8005c24:	441c      	add	r4, r3
 8005c26:	f803 1b01 	strb.w	r1, [r3], #1
 8005c2a:	42a3      	cmp	r3, r4
 8005c2c:	d1fb      	bne.n	8005c26 <memset+0x82>
 8005c2e:	bcf0      	pop	{r4, r5, r6, r7}
 8005c30:	4770      	bx	lr
 8005c32:	4614      	mov	r4, r2
 8005c34:	4603      	mov	r3, r0
 8005c36:	e7c6      	b.n	8005bc6 <memset+0x22>

08005c38 <register_fini>:
 8005c38:	4b02      	ldr	r3, [pc, #8]	; (8005c44 <register_fini+0xc>)
 8005c3a:	b113      	cbz	r3, 8005c42 <register_fini+0xa>
 8005c3c:	4802      	ldr	r0, [pc, #8]	; (8005c48 <register_fini+0x10>)
 8005c3e:	f000 b805 	b.w	8005c4c <atexit>
 8005c42:	4770      	bx	lr
 8005c44:	00000000 	.word	0x00000000
 8005c48:	08005c59 	.word	0x08005c59

08005c4c <atexit>:
 8005c4c:	4601      	mov	r1, r0
 8005c4e:	2000      	movs	r0, #0
 8005c50:	4602      	mov	r2, r0
 8005c52:	4603      	mov	r3, r0
 8005c54:	f000 b818 	b.w	8005c88 <__register_exitproc>

08005c58 <__libc_fini_array>:
 8005c58:	b538      	push	{r3, r4, r5, lr}
 8005c5a:	4d09      	ldr	r5, [pc, #36]	; (8005c80 <__libc_fini_array+0x28>)
 8005c5c:	4c09      	ldr	r4, [pc, #36]	; (8005c84 <__libc_fini_array+0x2c>)
 8005c5e:	1b64      	subs	r4, r4, r5
 8005c60:	10a4      	asrs	r4, r4, #2
 8005c62:	bf18      	it	ne
 8005c64:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
 8005c68:	d005      	beq.n	8005c76 <__libc_fini_array+0x1e>
 8005c6a:	3c01      	subs	r4, #1
 8005c6c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005c70:	4798      	blx	r3
 8005c72:	2c00      	cmp	r4, #0
 8005c74:	d1f9      	bne.n	8005c6a <__libc_fini_array+0x12>
 8005c76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c7a:	f000 b9fb 	b.w	8006074 <_fini>
 8005c7e:	bf00      	nop
 8005c80:	08006088 	.word	0x08006088
 8005c84:	0800608c 	.word	0x0800608c

08005c88 <__register_exitproc>:
 8005c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c8a:	4c27      	ldr	r4, [pc, #156]	; (8005d28 <__register_exitproc+0xa0>)
 8005c8c:	6826      	ldr	r6, [r4, #0]
 8005c8e:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
 8005c92:	b085      	sub	sp, #20
 8005c94:	4607      	mov	r7, r0
 8005c96:	2c00      	cmp	r4, #0
 8005c98:	d041      	beq.n	8005d1e <__register_exitproc+0x96>
 8005c9a:	6865      	ldr	r5, [r4, #4]
 8005c9c:	2d1f      	cmp	r5, #31
 8005c9e:	dd1e      	ble.n	8005cde <__register_exitproc+0x56>
 8005ca0:	4822      	ldr	r0, [pc, #136]	; (8005d2c <__register_exitproc+0xa4>)
 8005ca2:	b918      	cbnz	r0, 8005cac <__register_exitproc+0x24>
 8005ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ca8:	b005      	add	sp, #20
 8005caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cac:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8005cb0:	9103      	str	r1, [sp, #12]
 8005cb2:	9202      	str	r2, [sp, #8]
 8005cb4:	9301      	str	r3, [sp, #4]
 8005cb6:	f3af 8000 	nop.w
 8005cba:	9903      	ldr	r1, [sp, #12]
 8005cbc:	9a02      	ldr	r2, [sp, #8]
 8005cbe:	9b01      	ldr	r3, [sp, #4]
 8005cc0:	4604      	mov	r4, r0
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	d0ee      	beq.n	8005ca4 <__register_exitproc+0x1c>
 8005cc6:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
 8005cca:	6025      	str	r5, [r4, #0]
 8005ccc:	2000      	movs	r0, #0
 8005cce:	6060      	str	r0, [r4, #4]
 8005cd0:	4605      	mov	r5, r0
 8005cd2:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 8005cd6:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
 8005cda:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
 8005cde:	b93f      	cbnz	r7, 8005cf0 <__register_exitproc+0x68>
 8005ce0:	1cab      	adds	r3, r5, #2
 8005ce2:	2000      	movs	r0, #0
 8005ce4:	3501      	adds	r5, #1
 8005ce6:	6065      	str	r5, [r4, #4]
 8005ce8:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8005cec:	b005      	add	sp, #20
 8005cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cf0:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 8005cf4:	f04f 0c01 	mov.w	ip, #1
 8005cf8:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 8005cfc:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 8005d00:	fa0c f205 	lsl.w	r2, ip, r5
 8005d04:	4316      	orrs	r6, r2
 8005d06:	2f02      	cmp	r7, #2
 8005d08:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 8005d0c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8005d10:	d1e6      	bne.n	8005ce0 <__register_exitproc+0x58>
 8005d12:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 8005d16:	431a      	orrs	r2, r3
 8005d18:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8005d1c:	e7e0      	b.n	8005ce0 <__register_exitproc+0x58>
 8005d1e:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
 8005d22:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 8005d26:	e7b8      	b.n	8005c9a <__register_exitproc+0x12>
 8005d28:	08006064 	.word	0x08006064
 8005d2c:	00000000 	.word	0x00000000
 8005d30:	72617453 	.word	0x72617453
 8005d34:	676e6974 	.word	0x676e6974
 8005d38:	0000000a 	.word	0x0000000a
 8005d3c:	72617375 	.word	0x72617375
 8005d40:	00000074 	.word	0x00000074
 8005d44:	6f727245 	.word	0x6f727245
 8005d48:	72632072 	.word	0x72632072
 8005d4c:	69746165 	.word	0x69746165
 8005d50:	6d20676e 	.word	0x6d20676e
 8005d54:	726f746f 	.word	0x726f746f
 8005d58:	74204248 	.word	0x74204248
 8005d5c:	2e6b7361 	.word	0x2e6b7361
 8005d60:	0000000a 	.word	0x0000000a
 8005d64:	63637553 	.word	0x63637553
 8005d68:	73736573 	.word	0x73736573
 8005d6c:	6c6c7566 	.word	0x6c6c7566
 8005d70:	72632079 	.word	0x72632079
 8005d74:	65746165 	.word	0x65746165
 8005d78:	6f6d2064 	.word	0x6f6d2064
 8005d7c:	48726f74 	.word	0x48726f74
 8005d80:	61742042 	.word	0x61742042
 8005d84:	000a6b73 	.word	0x000a6b73
 8005d88:	72450a0a 	.word	0x72450a0a
 8005d8c:	20726f72 	.word	0x20726f72
 8005d90:	68746977 	.word	0x68746977
 8005d94:	68637320 	.word	0x68637320
 8005d98:	6c756465 	.word	0x6c756465
 8005d9c:	21217265 	.word	0x21217265
 8005da0:	0a0a2e20 	.word	0x0a0a2e20
 8005da4:	00000000 	.word	0x00000000
 8005da8:	454c4449 	.word	0x454c4449
 8005dac:	00000000 	.word	0x00000000
 8005db0:	09097325 	.word	0x09097325
 8005db4:	25096325 	.word	0x25096325
 8005db8:	75250975 	.word	0x75250975
 8005dbc:	0d752509 	.word	0x0d752509
 8005dc0:	0000000a 	.word	0x0000000a
 8005dc4:	20726d54 	.word	0x20726d54
 8005dc8:	00637653 	.word	0x00637653
 8005dcc:	2f707041 	.word	0x2f707041
 8005dd0:	334d5453 	.word	0x334d5453
 8005dd4:	2d344632 	.word	0x2d344632
 8005dd8:	63736944 	.word	0x63736944
 8005ddc:	7265766f 	.word	0x7265766f
 8005de0:	694c2f79 	.word	0x694c2f79
 8005de4:	72617262 	.word	0x72617262
 8005de8:	2f736569 	.word	0x2f736569
 8005dec:	334d5453 	.word	0x334d5453
 8005df0:	78344632 	.word	0x78344632
 8005df4:	74535f78 	.word	0x74535f78
 8005df8:	72655064 	.word	0x72655064
 8005dfc:	5f687069 	.word	0x5f687069
 8005e00:	76697244 	.word	0x76697244
 8005e04:	732f7265 	.word	0x732f7265
 8005e08:	6d2f6372 	.word	0x6d2f6372
 8005e0c:	2e637369 	.word	0x2e637369
 8005e10:	00000063 	.word	0x00000063
 8005e14:	2f707041 	.word	0x2f707041
 8005e18:	334d5453 	.word	0x334d5453
 8005e1c:	2d344632 	.word	0x2d344632
 8005e20:	63736944 	.word	0x63736944
 8005e24:	7265766f 	.word	0x7265766f
 8005e28:	694c2f79 	.word	0x694c2f79
 8005e2c:	72617262 	.word	0x72617262
 8005e30:	2f736569 	.word	0x2f736569
 8005e34:	334d5453 	.word	0x334d5453
 8005e38:	78344632 	.word	0x78344632
 8005e3c:	74535f78 	.word	0x74535f78
 8005e40:	72655064 	.word	0x72655064
 8005e44:	5f687069 	.word	0x5f687069
 8005e48:	76697244 	.word	0x76697244
 8005e4c:	732f7265 	.word	0x732f7265
 8005e50:	732f6372 	.word	0x732f6372
 8005e54:	32336d74 	.word	0x32336d74
 8005e58:	78783466 	.word	0x78783466
 8005e5c:	616d645f 	.word	0x616d645f
 8005e60:	0000632e 	.word	0x0000632e
 8005e64:	2f707041 	.word	0x2f707041
 8005e68:	334d5453 	.word	0x334d5453
 8005e6c:	2d344632 	.word	0x2d344632
 8005e70:	63736944 	.word	0x63736944
 8005e74:	7265766f 	.word	0x7265766f
 8005e78:	694c2f79 	.word	0x694c2f79
 8005e7c:	72617262 	.word	0x72617262
 8005e80:	2f736569 	.word	0x2f736569
 8005e84:	334d5453 	.word	0x334d5453
 8005e88:	78344632 	.word	0x78344632
 8005e8c:	74535f78 	.word	0x74535f78
 8005e90:	72655064 	.word	0x72655064
 8005e94:	5f687069 	.word	0x5f687069
 8005e98:	76697244 	.word	0x76697244
 8005e9c:	732f7265 	.word	0x732f7265
 8005ea0:	732f6372 	.word	0x732f6372
 8005ea4:	32336d74 	.word	0x32336d74
 8005ea8:	78783466 	.word	0x78783466
 8005eac:	7478655f 	.word	0x7478655f
 8005eb0:	00632e69 	.word	0x00632e69
 8005eb4:	2f707041 	.word	0x2f707041
 8005eb8:	334d5453 	.word	0x334d5453
 8005ebc:	2d344632 	.word	0x2d344632
 8005ec0:	63736944 	.word	0x63736944
 8005ec4:	7265766f 	.word	0x7265766f
 8005ec8:	694c2f79 	.word	0x694c2f79
 8005ecc:	72617262 	.word	0x72617262
 8005ed0:	2f736569 	.word	0x2f736569
 8005ed4:	334d5453 	.word	0x334d5453
 8005ed8:	78344632 	.word	0x78344632
 8005edc:	74535f78 	.word	0x74535f78
 8005ee0:	72655064 	.word	0x72655064
 8005ee4:	5f687069 	.word	0x5f687069
 8005ee8:	76697244 	.word	0x76697244
 8005eec:	732f7265 	.word	0x732f7265
 8005ef0:	732f6372 	.word	0x732f6372
 8005ef4:	32336d74 	.word	0x32336d74
 8005ef8:	78783466 	.word	0x78783466
 8005efc:	6970675f 	.word	0x6970675f
 8005f00:	00632e6f 	.word	0x00632e6f
 8005f04:	2f707041 	.word	0x2f707041
 8005f08:	334d5453 	.word	0x334d5453
 8005f0c:	2d344632 	.word	0x2d344632
 8005f10:	63736944 	.word	0x63736944
 8005f14:	7265766f 	.word	0x7265766f
 8005f18:	694c2f79 	.word	0x694c2f79
 8005f1c:	72617262 	.word	0x72617262
 8005f20:	2f736569 	.word	0x2f736569
 8005f24:	334d5453 	.word	0x334d5453
 8005f28:	78344632 	.word	0x78344632
 8005f2c:	74535f78 	.word	0x74535f78
 8005f30:	72655064 	.word	0x72655064
 8005f34:	5f687069 	.word	0x5f687069
 8005f38:	76697244 	.word	0x76697244
 8005f3c:	732f7265 	.word	0x732f7265
 8005f40:	732f6372 	.word	0x732f6372
 8005f44:	32336d74 	.word	0x32336d74
 8005f48:	78783466 	.word	0x78783466
 8005f4c:	6363725f 	.word	0x6363725f
 8005f50:	0000632e 	.word	0x0000632e
 8005f54:	2f707041 	.word	0x2f707041
 8005f58:	334d5453 	.word	0x334d5453
 8005f5c:	2d344632 	.word	0x2d344632
 8005f60:	63736944 	.word	0x63736944
 8005f64:	7265766f 	.word	0x7265766f
 8005f68:	694c2f79 	.word	0x694c2f79
 8005f6c:	72617262 	.word	0x72617262
 8005f70:	2f736569 	.word	0x2f736569
 8005f74:	334d5453 	.word	0x334d5453
 8005f78:	78344632 	.word	0x78344632
 8005f7c:	74535f78 	.word	0x74535f78
 8005f80:	72655064 	.word	0x72655064
 8005f84:	5f687069 	.word	0x5f687069
 8005f88:	76697244 	.word	0x76697244
 8005f8c:	732f7265 	.word	0x732f7265
 8005f90:	732f6372 	.word	0x732f6372
 8005f94:	32336d74 	.word	0x32336d74
 8005f98:	78783466 	.word	0x78783466
 8005f9c:	6970735f 	.word	0x6970735f
 8005fa0:	0000632e 	.word	0x0000632e
 8005fa4:	2f707041 	.word	0x2f707041
 8005fa8:	334d5453 	.word	0x334d5453
 8005fac:	2d344632 	.word	0x2d344632
 8005fb0:	63736944 	.word	0x63736944
 8005fb4:	7265766f 	.word	0x7265766f
 8005fb8:	694c2f79 	.word	0x694c2f79
 8005fbc:	72617262 	.word	0x72617262
 8005fc0:	2f736569 	.word	0x2f736569
 8005fc4:	334d5453 	.word	0x334d5453
 8005fc8:	78344632 	.word	0x78344632
 8005fcc:	74535f78 	.word	0x74535f78
 8005fd0:	72655064 	.word	0x72655064
 8005fd4:	5f687069 	.word	0x5f687069
 8005fd8:	76697244 	.word	0x76697244
 8005fdc:	732f7265 	.word	0x732f7265
 8005fe0:	732f6372 	.word	0x732f6372
 8005fe4:	32336d74 	.word	0x32336d74
 8005fe8:	78783466 	.word	0x78783466
 8005fec:	7379735f 	.word	0x7379735f
 8005ff0:	2e676663 	.word	0x2e676663
 8005ff4:	00000063 	.word	0x00000063
 8005ff8:	2f707041 	.word	0x2f707041
 8005ffc:	334d5453 	.word	0x334d5453
 8006000:	2d344632 	.word	0x2d344632
 8006004:	63736944 	.word	0x63736944
 8006008:	7265766f 	.word	0x7265766f
 800600c:	694c2f79 	.word	0x694c2f79
 8006010:	72617262 	.word	0x72617262
 8006014:	2f736569 	.word	0x2f736569
 8006018:	334d5453 	.word	0x334d5453
 800601c:	78344632 	.word	0x78344632
 8006020:	74535f78 	.word	0x74535f78
 8006024:	72655064 	.word	0x72655064
 8006028:	5f687069 	.word	0x5f687069
 800602c:	76697244 	.word	0x76697244
 8006030:	732f7265 	.word	0x732f7265
 8006034:	732f6372 	.word	0x732f6372
 8006038:	32336d74 	.word	0x32336d74
 800603c:	78783466 	.word	0x78783466
 8006040:	6173755f 	.word	0x6173755f
 8006044:	632e7472 	.word	0x632e7472
 8006048:	00000000 	.word	0x00000000

0800604c <ucExpectedStackBytes.9202>:
 800604c:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
 800605c:	a5a5a5a5 00000043                       ....C...

08006064 <_global_impure_ptr>:
 8006064:	20000030                                0.. 

08006068 <_init>:
 8006068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800606a:	bf00      	nop
 800606c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800606e:	bc08      	pop	{r3}
 8006070:	469e      	mov	lr, r3
 8006072:	4770      	bx	lr

08006074 <_fini>:
 8006074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006076:	bf00      	nop
 8006078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800607a:	bc08      	pop	{r3}
 800607c:	469e      	mov	lr, r3
 800607e:	4770      	bx	lr
