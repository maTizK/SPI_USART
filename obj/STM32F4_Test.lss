
obj/STM32F4_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a20  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000008  08005ba8  08005ba8  0000dba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08005bb0  08005bb0  0000dbb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000458  20000000  08005bb4  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00013d44  20000458  0800600c  00010458  2**2
                  ALLOC
  6 ._user_heap_stack 00000400  2001419c  08019d50  00010458  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00010458  2**0
                  CONTENTS, READONLY
  8 .debug_info   00008fb6  00000000  00000000  00010486  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001bfe  00000000  00000000  0001943c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003b26  00000000  00000000  0001b03a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a60  00000000  00000000  0001eb60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000980  00000000  00000000  0001f5c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004d72  00000000  00000000  0001ff40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000038c2  00000000  00000000  00024cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000070  00000000  00000000  00028574  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002460  00000000  00000000  000285e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000458 	.word	0x20000458
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005b90 	.word	0x08005b90

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <frame_dummy+0x1c>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4806      	ldr	r0, [pc, #24]	; (80001cc <frame_dummy+0x20>)
 80001b4:	4906      	ldr	r1, [pc, #24]	; (80001d0 <frame_dummy+0x24>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4806      	ldr	r0, [pc, #24]	; (80001d4 <frame_dummy+0x28>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b113      	cbz	r3, 80001c6 <frame_dummy+0x1a>
 80001c0:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <frame_dummy+0x2c>)
 80001c2:	b103      	cbz	r3, 80001c6 <frame_dummy+0x1a>
 80001c4:	4798      	blx	r3
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005b90 	.word	0x08005b90
 80001d0:	2000045c 	.word	0x2000045c
 80001d4:	20000458 	.word	0x20000458
 80001d8:	00000000 	.word	0x00000000

080001dc <memcpy>:
 80001dc:	4684      	mov	ip, r0
 80001de:	ea41 0300 	orr.w	r3, r1, r0
 80001e2:	f013 0303 	ands.w	r3, r3, #3
 80001e6:	d16d      	bne.n	80002c4 <memcpy+0xe8>
 80001e8:	3a40      	subs	r2, #64	; 0x40
 80001ea:	d341      	bcc.n	8000270 <memcpy+0x94>
 80001ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f0:	f840 3b04 	str.w	r3, [r0], #4
 80001f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f8:	f840 3b04 	str.w	r3, [r0], #4
 80001fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000200:	f840 3b04 	str.w	r3, [r0], #4
 8000204:	f851 3b04 	ldr.w	r3, [r1], #4
 8000208:	f840 3b04 	str.w	r3, [r0], #4
 800020c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000210:	f840 3b04 	str.w	r3, [r0], #4
 8000214:	f851 3b04 	ldr.w	r3, [r1], #4
 8000218:	f840 3b04 	str.w	r3, [r0], #4
 800021c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000220:	f840 3b04 	str.w	r3, [r0], #4
 8000224:	f851 3b04 	ldr.w	r3, [r1], #4
 8000228:	f840 3b04 	str.w	r3, [r0], #4
 800022c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000230:	f840 3b04 	str.w	r3, [r0], #4
 8000234:	f851 3b04 	ldr.w	r3, [r1], #4
 8000238:	f840 3b04 	str.w	r3, [r0], #4
 800023c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000240:	f840 3b04 	str.w	r3, [r0], #4
 8000244:	f851 3b04 	ldr.w	r3, [r1], #4
 8000248:	f840 3b04 	str.w	r3, [r0], #4
 800024c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000250:	f840 3b04 	str.w	r3, [r0], #4
 8000254:	f851 3b04 	ldr.w	r3, [r1], #4
 8000258:	f840 3b04 	str.w	r3, [r0], #4
 800025c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000260:	f840 3b04 	str.w	r3, [r0], #4
 8000264:	f851 3b04 	ldr.w	r3, [r1], #4
 8000268:	f840 3b04 	str.w	r3, [r0], #4
 800026c:	3a40      	subs	r2, #64	; 0x40
 800026e:	d2bd      	bcs.n	80001ec <memcpy+0x10>
 8000270:	3230      	adds	r2, #48	; 0x30
 8000272:	d311      	bcc.n	8000298 <memcpy+0xbc>
 8000274:	f851 3b04 	ldr.w	r3, [r1], #4
 8000278:	f840 3b04 	str.w	r3, [r0], #4
 800027c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000280:	f840 3b04 	str.w	r3, [r0], #4
 8000284:	f851 3b04 	ldr.w	r3, [r1], #4
 8000288:	f840 3b04 	str.w	r3, [r0], #4
 800028c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000290:	f840 3b04 	str.w	r3, [r0], #4
 8000294:	3a10      	subs	r2, #16
 8000296:	d2ed      	bcs.n	8000274 <memcpy+0x98>
 8000298:	320c      	adds	r2, #12
 800029a:	d305      	bcc.n	80002a8 <memcpy+0xcc>
 800029c:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a0:	f840 3b04 	str.w	r3, [r0], #4
 80002a4:	3a04      	subs	r2, #4
 80002a6:	d2f9      	bcs.n	800029c <memcpy+0xc0>
 80002a8:	3204      	adds	r2, #4
 80002aa:	d008      	beq.n	80002be <memcpy+0xe2>
 80002ac:	07d2      	lsls	r2, r2, #31
 80002ae:	bf1c      	itt	ne
 80002b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002b4:	f800 3b01 	strbne.w	r3, [r0], #1
 80002b8:	d301      	bcc.n	80002be <memcpy+0xe2>
 80002ba:	880b      	ldrh	r3, [r1, #0]
 80002bc:	8003      	strh	r3, [r0, #0]
 80002be:	4660      	mov	r0, ip
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	2a08      	cmp	r2, #8
 80002c6:	d313      	bcc.n	80002f0 <memcpy+0x114>
 80002c8:	078b      	lsls	r3, r1, #30
 80002ca:	d08d      	beq.n	80001e8 <memcpy+0xc>
 80002cc:	f010 0303 	ands.w	r3, r0, #3
 80002d0:	d08a      	beq.n	80001e8 <memcpy+0xc>
 80002d2:	f1c3 0304 	rsb	r3, r3, #4
 80002d6:	1ad2      	subs	r2, r2, r3
 80002d8:	07db      	lsls	r3, r3, #31
 80002da:	bf1c      	itt	ne
 80002dc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002e0:	f800 3b01 	strbne.w	r3, [r0], #1
 80002e4:	d380      	bcc.n	80001e8 <memcpy+0xc>
 80002e6:	f831 3b02 	ldrh.w	r3, [r1], #2
 80002ea:	f820 3b02 	strh.w	r3, [r0], #2
 80002ee:	e77b      	b.n	80001e8 <memcpy+0xc>
 80002f0:	3a04      	subs	r2, #4
 80002f2:	d3d9      	bcc.n	80002a8 <memcpy+0xcc>
 80002f4:	3a01      	subs	r2, #1
 80002f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002fa:	f800 3b01 	strb.w	r3, [r0], #1
 80002fe:	d2f9      	bcs.n	80002f4 <memcpy+0x118>
 8000300:	780b      	ldrb	r3, [r1, #0]
 8000302:	7003      	strb	r3, [r0, #0]
 8000304:	784b      	ldrb	r3, [r1, #1]
 8000306:	7043      	strb	r3, [r0, #1]
 8000308:	788b      	ldrb	r3, [r1, #2]
 800030a:	7083      	strb	r3, [r0, #2]
 800030c:	4660      	mov	r0, ip
 800030e:	4770      	bx	lr

08000310 <init_SPIx>:
static xSemaphoreHandle xSemaphoreDMASPIy;

/*============================================================================
 * 	func void init_SPIx(void)
 *===========================================================================*/ 
void init_SPIx(void){
 8000310:	b580      	push	{r7, lr}
 8000312:	b098      	sub	sp, #96	; 0x60
 8000314:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStruct;

	
	
	// enable clock for used IO pins
	RCC_AHB1PeriphClockCmd(SPIx_MOSI_GPIO_CLK, ENABLE);
 8000316:	2001      	movs	r0, #1
 8000318:	2101      	movs	r1, #1
 800031a:	f004 fbf3 	bl	8004b04 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(SPIx_MISO_GPIO_CLK, ENABLE);
 800031e:	2001      	movs	r0, #1
 8000320:	2101      	movs	r1, #1
 8000322:	f004 fbef 	bl	8004b04 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(SPIx_SCK_GPIO_CLK, ENABLE);
 8000326:	2001      	movs	r0, #1
 8000328:	2101      	movs	r1, #1
 800032a:	f004 fbeb 	bl	8004b04 <RCC_AHB1PeriphClockCmd>
	 * PA5 = SCK
	 * PA6 = MISO
	 * PA7 = MOSI
	 */
	// MOSI PA7
	GPIO_InitStruct.GPIO_Pin = SPIx_MOSI_PIN ;
 800032e:	2380      	movs	r3, #128	; 0x80
 8000330:	65bb      	str	r3, [r7, #88]	; 0x58
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000332:	2302      	movs	r3, #2
 8000334:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000338:	2300      	movs	r3, #0
 800033a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800033e:	2303      	movs	r3, #3
 8000340:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000344:	2302      	movs	r3, #2
 8000346:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800034a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800034e:	4887      	ldr	r0, [pc, #540]	; (800056c <init_SPIx+0x25c>)
 8000350:	4619      	mov	r1, r3
 8000352:	f004 f8ef 	bl	8004534 <GPIO_Init>
	// SCK PA5
	GPIO_InitStruct.GPIO_Pin = SPIx_SCK_PIN;
 8000356:	2320      	movs	r3, #32
 8000358:	65bb      	str	r3, [r7, #88]	; 0x58
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 800035a:	2302      	movs	r3, #2
 800035c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000360:	2300      	movs	r3, #0
 8000362:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000366:	2303      	movs	r3, #3
 8000368:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 800036c:	2302      	movs	r3, #2
 800036e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000372:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000376:	487d      	ldr	r0, [pc, #500]	; (800056c <init_SPIx+0x25c>)
 8000378:	4619      	mov	r1, r3
 800037a:	f004 f8db 	bl	8004534 <GPIO_Init>
	// MISO PA6
	GPIO_InitStruct.GPIO_Pin = SPIx_MISO_PIN;
 800037e:	2340      	movs	r3, #64	; 0x40
 8000380:	65bb      	str	r3, [r7, #88]	; 0x58
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000382:	2302      	movs	r3, #2
 8000384:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8000388:	2301      	movs	r3, #1
 800038a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800038e:	2303      	movs	r3, #3
 8000390:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000394:	2300      	movs	r3, #0
 8000396:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 800039a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800039e:	4873      	ldr	r0, [pc, #460]	; (800056c <init_SPIx+0x25c>)
 80003a0:	4619      	mov	r1, r3
 80003a2:	f004 f8c7 	bl	8004534 <GPIO_Init>
	
	// connect SPIx pins to SPI alternate function
	GPIO_PinAFConfig(SPIx_MISO_GPIO_PORT, SPIx_MISO_SOURCE, SPIx_MISO_AF);
 80003a6:	4871      	ldr	r0, [pc, #452]	; (800056c <init_SPIx+0x25c>)
 80003a8:	2106      	movs	r1, #6
 80003aa:	2205      	movs	r2, #5
 80003ac:	f004 f9d8 	bl	8004760 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(SPIx_MOSI_GPIO_PORT, SPIx_MOSI_SOURCE, SPIx_MOSI_AF);
 80003b0:	486e      	ldr	r0, [pc, #440]	; (800056c <init_SPIx+0x25c>)
 80003b2:	2107      	movs	r1, #7
 80003b4:	2205      	movs	r2, #5
 80003b6:	f004 f9d3 	bl	8004760 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(SPIx_SCK_GPIO_PORT,  SPIx_SCK_SOURCE,  SPIx_SCK_AF);
 80003ba:	486c      	ldr	r0, [pc, #432]	; (800056c <init_SPIx+0x25c>)
 80003bc:	2105      	movs	r1, #5
 80003be:	2205      	movs	r2, #5
 80003c0:	f004 f9ce 	bl	8004760 <GPIO_PinAFConfig>

		
	/* Configure the chip select pin
	   in this case we will use PA4 */
	GPIO_InitStruct.GPIO_Pin = SPIx_CS_PIN;
 80003c4:	2310      	movs	r3, #16
 80003c6:	65bb      	str	r3, [r7, #88]	; 0x58
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 80003c8:	2301      	movs	r3, #1
 80003ca:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80003ce:	2300      	movs	r3, #0
 80003d0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80003d4:	2303      	movs	r3, #3
 80003d6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 80003da:	2301      	movs	r3, #1
 80003dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	GPIO_Init(SPIx_CS_GPIO_PORT, &GPIO_InitStruct);
 80003e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80003e4:	4861      	ldr	r0, [pc, #388]	; (800056c <init_SPIx+0x25c>)
 80003e6:	4619      	mov	r1, r3
 80003e8:	f004 f8a4 	bl	8004534 <GPIO_Init>
	
	CSOFFx(); // set PA4 high
 80003ec:	4b5f      	ldr	r3, [pc, #380]	; (800056c <init_SPIx+0x25c>)
 80003ee:	4a5f      	ldr	r2, [pc, #380]	; (800056c <init_SPIx+0x25c>)
 80003f0:	8b12      	ldrh	r2, [r2, #24]
 80003f2:	b292      	uxth	r2, r2
 80003f4:	f042 0210 	orr.w	r2, r2, #16
 80003f8:	b292      	uxth	r2, r2
 80003fa:	831a      	strh	r2, [r3, #24]


	// enable peripheral clock
	RCC_APB2PeriphClockCmd(SPIx_CLK, ENABLE);
 80003fc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000400:	2101      	movs	r1, #1
 8000402:	f004 fbb7 	bl	8004b74 <RCC_APB2PeriphClockCmd>
	
	/* configure SPIx in Mode 0 
	 * CPOL = 0 --> clock is low when idle
	 * CPHA = 0 --> data is sampled at the first edge
	 */
	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex; // set to full duplex mode, seperate MOSI and MISO lines
 8000406:	2300      	movs	r3, #0
 8000408:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;     // transmit in master mode, NSS pin has to be always high
 800040c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000410:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b; // one packet of data is 8 bits wide
 8000414:	2300      	movs	r3, #0
 8000416:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;        // clock is low when idle
 800041a:	2300      	movs	r3, #0
 800041c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;      // data sampled at second edge
 8000420:	2300      	movs	r3, #0
 8000422:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft | SPI_NSSInternalSoft_Set; // set the NSS management to internal and pull internal NSS high
 8000426:	f44f 7340 	mov.w	r3, #768	; 0x300
 800042a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4; // SPI frequency is APB2 frequency / 4
 800042e:	2308      	movs	r3, #8
 8000430:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;// data is transmitted MSB first
 8000434:	2300      	movs	r3, #0
 8000436:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	SPI_Init(SPIx, &SPI_InitStruct); 
 800043a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800043e:	484c      	ldr	r0, [pc, #304]	; (8000570 <init_SPIx+0x260>)
 8000440:	4619      	mov	r1, r3
 8000442:	f004 fbcf 	bl	8004be4 <SPI_Init>
	
	SPI_Cmd(SPIx, ENABLE);			
 8000446:	484a      	ldr	r0, [pc, #296]	; (8000570 <init_SPIx+0x260>)
 8000448:	2101      	movs	r1, #1
 800044a:	f004 fcbd 	bl	8004dc8 <SPI_Cmd>
	

	/* setup DMA */

	// enable clock 
	RCC_AHB1PeriphClockCmd (SPIx_DMA_CLK, ENABLE); 
 800044e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000452:	2101      	movs	r1, #1
 8000454:	f004 fb56 	bl	8004b04 <RCC_AHB1PeriphClockCmd>
	
	// start with blank DMA configuration
	DMA_DeInit (SPIx_TX_DMA_STREAM);
 8000458:	4846      	ldr	r0, [pc, #280]	; (8000574 <init_SPIx+0x264>)
 800045a:	f003 f8bf 	bl	80035dc <DMA_DeInit>
	DMA_DeInit (SPIx_RX_DMA_STREAM);
 800045e:	4846      	ldr	r0, [pc, #280]	; (8000578 <init_SPIx+0x268>)
 8000460:	f003 f8bc 	bl	80035dc <DMA_DeInit>

	// check if DMA stream is disabled before enabling 
	// this is useful when stream is enabled and disabled multiple times. 
	while (DMA_GetCmdStatus (SPIx_TX_DMA_STREAM) != DISABLE);
 8000464:	bf00      	nop
 8000466:	4843      	ldr	r0, [pc, #268]	; (8000574 <init_SPIx+0x264>)
 8000468:	f003 fcc8 	bl	8003dfc <DMA_GetCmdStatus>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d1f9      	bne.n	8000466 <init_SPIx+0x156>
	while (DMA_GetCmdStatus (SPIx_RX_DMA_STREAM) != DISABLE);
 8000472:	bf00      	nop
 8000474:	4840      	ldr	r0, [pc, #256]	; (8000578 <init_SPIx+0x268>)
 8000476:	f003 fcc1 	bl	8003dfc <DMA_GetCmdStatus>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d1f9      	bne.n	8000474 <init_SPIx+0x164>
	
	
	DMA_StructInit(&DMA_InitStruct);
 8000480:	f107 0308 	add.w	r3, r7, #8
 8000484:	4618      	mov	r0, r3
 8000486:	f003 fb83 	bl	8003b90 <DMA_StructInit>
  	//Configure DMA Initialization Structure
	//DMA_InitStruct.DMA_FIFOMode = DMA_FIFOMode_Disable ;
 	//DMA_InitStruct.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull ;
  	//DMA_InitStruct.DMA_MemoryBurst = DMA_MemoryBurst_Single ;
  	DMA_InitStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800048a:	2300      	movs	r3, #0
 800048c:	62bb      	str	r3, [r7, #40]	; 0x28
  	DMA_InitStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800048e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000492:	623b      	str	r3, [r7, #32]
  	DMA_InitStruct.DMA_Mode = DMA_Mode_Normal;
 8000494:	2300      	movs	r3, #0
 8000496:	62fb      	str	r3, [r7, #44]	; 0x2c
  	DMA_InitStruct.DMA_PeripheralBaseAddr =(uint32_t) (&(SPIx->DR)) ;
 8000498:	4b38      	ldr	r3, [pc, #224]	; (800057c <init_SPIx+0x26c>)
 800049a:	60fb      	str	r3, [r7, #12]
  	DMA_InitStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800049c:	2300      	movs	r3, #0
 800049e:	643b      	str	r3, [r7, #64]	; 0x40
  	DMA_InitStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80004a0:	2300      	movs	r3, #0
 80004a2:	627b      	str	r3, [r7, #36]	; 0x24
  	DMA_InitStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80004a4:	2300      	movs	r3, #0
 80004a6:	61fb      	str	r3, [r7, #28]
  	DMA_InitStruct.DMA_Priority = DMA_Priority_High;
 80004a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80004ac:	633b      	str	r3, [r7, #48]	; 0x30
  	// Configure TX DMA 
  	DMA_InitStruct.DMA_Channel = SPIx_TX_DMA_CHANNEL ;
 80004ae:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80004b2:	60bb      	str	r3, [r7, #8]
  	DMA_InitStruct.DMA_DIR = DMA_DIR_MemoryToPeripheral ;
 80004b4:	2340      	movs	r3, #64	; 0x40
 80004b6:	617b      	str	r3, [r7, #20]
  	DMA_InitStruct.DMA_Memory0BaseAddr = (uint32_t) &bufferTX ;
 80004b8:	4b31      	ldr	r3, [pc, #196]	; (8000580 <init_SPIx+0x270>)
 80004ba:	613b      	str	r3, [r7, #16]
	DMA_InitStruct.DMA_BufferSize = MAX_BUFFER_LENGTH;
 80004bc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80004c0:	61bb      	str	r3, [r7, #24]
  	DMA_Init(SPIx_TX_DMA_STREAM, &DMA_InitStruct);
 80004c2:	f107 0308 	add.w	r3, r7, #8
 80004c6:	482b      	ldr	r0, [pc, #172]	; (8000574 <init_SPIx+0x264>)
 80004c8:	4619      	mov	r1, r3
 80004ca:	f003 f99d 	bl	8003808 <DMA_Init>
	// Configure RX DMA 
  	DMA_InitStruct.DMA_Channel = SPIx_RX_DMA_CHANNEL ;
 80004ce:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80004d2:	60bb      	str	r3, [r7, #8]
	DMA_InitStruct.DMA_DIR = DMA_DIR_PeripheralToMemory ;
 80004d4:	2300      	movs	r3, #0
 80004d6:	617b      	str	r3, [r7, #20]
	DMA_InitStruct.DMA_Memory0BaseAddr = (uint32_t)&bufferRX; 
 80004d8:	4b2a      	ldr	r3, [pc, #168]	; (8000584 <init_SPIx+0x274>)
 80004da:	613b      	str	r3, [r7, #16]
	DMA_InitStruct.DMA_BufferSize = MAX_BUFFER_LENGTH;
 80004dc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80004e0:	61bb      	str	r3, [r7, #24]
	DMA_Init(SPIx_RX_DMA_STREAM, &DMA_InitStruct);	
 80004e2:	f107 0308 	add.w	r3, r7, #8
 80004e6:	4824      	ldr	r0, [pc, #144]	; (8000578 <init_SPIx+0x268>)
 80004e8:	4619      	mov	r1, r3
 80004ea:	f003 f98d 	bl	8003808 <DMA_Init>
	
	DMA_ITConfig(SPIx_TX_DMA_STREAM, DMA_IT_TC, ENABLE); 
 80004ee:	4821      	ldr	r0, [pc, #132]	; (8000574 <init_SPIx+0x264>)
 80004f0:	2110      	movs	r1, #16
 80004f2:	2201      	movs	r2, #1
 80004f4:	f003 fd00 	bl	8003ef8 <DMA_ITConfig>
	DMA_ITConfig(SPIx_RX_DMA_STREAM, DMA_IT_TC, ENABLE); 
 80004f8:	481f      	ldr	r0, [pc, #124]	; (8000578 <init_SPIx+0x268>)
 80004fa:	2110      	movs	r1, #16
 80004fc:	2201      	movs	r2, #1
 80004fe:	f003 fcfb 	bl	8003ef8 <DMA_ITConfig>
  
	SPI_I2S_ClearFlag(SPIx, SPI_I2S_FLAG_TXE);
 8000502:	481b      	ldr	r0, [pc, #108]	; (8000570 <init_SPIx+0x260>)
 8000504:	2102      	movs	r1, #2
 8000506:	f004 fd5d 	bl	8004fc4 <SPI_I2S_ClearFlag>
	SPI_I2S_ClearFlag(SPIx, SPI_I2S_FLAG_RXNE);
 800050a:	4819      	ldr	r0, [pc, #100]	; (8000570 <init_SPIx+0x260>)
 800050c:	2101      	movs	r1, #1
 800050e:	f004 fd59 	bl	8004fc4 <SPI_I2S_ClearFlag>
  	
	// enable the interrupt in the NVIC
 	NVIC_InitStruct.NVIC_IRQChannel = SPIx_TX_DMA_IRQn;
 8000512:	233b      	movs	r3, #59	; 0x3b
 8000514:	713b      	strb	r3, [r7, #4]
  	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 2;
 8000516:	2307      	movs	r3, #7
 8000518:	717b      	strb	r3, [r7, #5]
 	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x1;
 800051a:	2301      	movs	r3, #1
 800051c:	71bb      	strb	r3, [r7, #6]
  	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 800051e:	2301      	movs	r3, #1
 8000520:	71fb      	strb	r3, [r7, #7]
  	NVIC_Init (&NVIC_InitStruct);
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	4618      	mov	r0, r3
 8000526:	f002 ffdf 	bl	80034e8 <NVIC_Init>
	// enable the interrupt in the NVIC
 	NVIC_InitStruct.NVIC_IRQChannel = SPIx_RX_DMA_IRQn;
 800052a:	233a      	movs	r3, #58	; 0x3a
 800052c:	713b      	strb	r3, [r7, #4]
   	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 2;
 800052e:	2307      	movs	r3, #7
 8000530:	717b      	strb	r3, [r7, #5]
 	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x1;
 8000532:	2301      	movs	r3, #1
 8000534:	71bb      	strb	r3, [r7, #6]
  	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000536:	2301      	movs	r3, #1
 8000538:	71fb      	strb	r3, [r7, #7]
  	NVIC_Init (&NVIC_InitStruct);
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	4618      	mov	r0, r3
 800053e:	f002 ffd3 	bl	80034e8 <NVIC_Init>
  	// Enable dma tx and rx request
	SPI_I2S_DMACmd (SPIx, SPI_I2S_DMAReq_Tx, ENABLE);	
 8000542:	480b      	ldr	r0, [pc, #44]	; (8000570 <init_SPIx+0x260>)
 8000544:	2102      	movs	r1, #2
 8000546:	2201      	movs	r2, #1
 8000548:	f004 fc80 	bl	8004e4c <SPI_I2S_DMACmd>
	SPI_I2S_DMACmd (SPIx, SPI_I2S_DMAReq_Rx, ENABLE);	
 800054c:	4808      	ldr	r0, [pc, #32]	; (8000570 <init_SPIx+0x260>)
 800054e:	2101      	movs	r1, #1
 8000550:	2201      	movs	r2, #1
 8000552:	f004 fc7b 	bl	8004e4c <SPI_I2S_DMACmd>

	xSemaphoreDMASPIx = xSemaphoreCreateBinary();
 8000556:	2001      	movs	r0, #1
 8000558:	2100      	movs	r1, #0
 800055a:	2203      	movs	r2, #3
 800055c:	f001 fc3e 	bl	8001ddc <xQueueGenericCreate>
 8000560:	4602      	mov	r2, r0
 8000562:	4b09      	ldr	r3, [pc, #36]	; (8000588 <init_SPIx+0x278>)
 8000564:	601a      	str	r2, [r3, #0]
	
}
 8000566:	3760      	adds	r7, #96	; 0x60
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40020000 	.word	0x40020000
 8000570:	40013000 	.word	0x40013000
 8000574:	40026458 	.word	0x40026458
 8000578:	40026440 	.word	0x40026440
 800057c:	4001300c 	.word	0x4001300c
 8000580:	200139c4 	.word	0x200139c4
 8000584:	200131f0 	.word	0x200131f0
 8000588:	20000474 	.word	0x20000474

0800058c <DMA2_Stream2_IRQHandler>:
	xSemaphoreDMASPIy = xSemaphoreCreateBinary();
	
}

void DMA2_Stream2_IRQHandler()
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
	/*!	\var static unsigned portBASE_TYPE xHigherPriorityTaskWoken
	 * 	\brief Indicates if higher priority has been woken
	 */

	unsigned portBASE_TYPE xHigherPriorityTaskWoken = pdFalse;
 8000592:	2300      	movs	r3, #0
 8000594:	607b      	str	r3, [r7, #4]

  // Test if DMA Stream Transfer Complete interrupt
  if (DMA_GetITStatus (SPIx_RX_DMA_STREAM, SPIx_RX_DMA_FLAG_TCIF)) {
 8000596:	481b      	ldr	r0, [pc, #108]	; (8000604 <DMA2_Stream2_IRQHandler+0x78>)
 8000598:	491b      	ldr	r1, [pc, #108]	; (8000608 <DMA2_Stream2_IRQHandler+0x7c>)
 800059a:	f003 fd63 	bl	8004064 <DMA_GetITStatus>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d024      	beq.n	80005ee <DMA2_Stream2_IRQHandler+0x62>
    
	DMA_ClearITPendingBit (SPIx_RX_DMA_STREAM, SPIx_RX_DMA_FLAG_TCIF);
 80005a4:	4817      	ldr	r0, [pc, #92]	; (8000604 <DMA2_Stream2_IRQHandler+0x78>)
 80005a6:	4918      	ldr	r1, [pc, #96]	; (8000608 <DMA2_Stream2_IRQHandler+0x7c>)
 80005a8:	f003 ff18 	bl	80043dc <DMA_ClearITPendingBit>
	
	while (SPI_I2S_GetFlagStatus (SPIx, SPI_I2S_FLAG_BSY) == SET);
 80005ac:	bf00      	nop
 80005ae:	4817      	ldr	r0, [pc, #92]	; (800060c <DMA2_Stream2_IRQHandler+0x80>)
 80005b0:	2180      	movs	r1, #128	; 0x80
 80005b2:	f004 fca9 	bl	8004f08 <SPI_I2S_GetFlagStatus>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d0f8      	beq.n	80005ae <DMA2_Stream2_IRQHandler+0x22>
     * Now we can deselect the display. If more than one peripheral was being run
     * on this SPI peripheral, we would have to do both/all of them, or work out
     * which one was active and deselect that one.i
	
     */
	CSOFFx();
 80005bc:	4b14      	ldr	r3, [pc, #80]	; (8000610 <DMA2_Stream2_IRQHandler+0x84>)
 80005be:	4a14      	ldr	r2, [pc, #80]	; (8000610 <DMA2_Stream2_IRQHandler+0x84>)
 80005c0:	8b12      	ldrh	r2, [r2, #24]
 80005c2:	b292      	uxth	r2, r2
 80005c4:	f042 0210 	orr.w	r2, r2, #16
 80005c8:	b292      	uxth	r2, r2
 80005ca:	831a      	strh	r2, [r3, #24]
	DMA_Cmd(SPIx_RX_DMA_STREAM, DISABLE);		
 80005cc:	480d      	ldr	r0, [pc, #52]	; (8000604 <DMA2_Stream2_IRQHandler+0x78>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	f003 fb14 	bl	8003bfc <DMA_Cmd>
 
	taskENTER_CRITICAL(); 
 80005d4:	f002 f8e2 	bl	800279c <vPortEnterCritical>
//       xSemaphoreGive( xSemaphoreDMASPI);
	xSemaphoreGiveFromISR( xSemaphoreDMASPIx, &xHigherPriorityTaskWoken );
 80005d8:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <DMA2_Stream2_IRQHandler+0x88>)
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	4610      	mov	r0, r2
 80005e0:	2100      	movs	r1, #0
 80005e2:	461a      	mov	r2, r3
 80005e4:	2300      	movs	r3, #0
 80005e6:	f001 fceb 	bl	8001fc0 <xQueueGenericSendFromISR>
	taskEXIT_CRITICAL(); //
 80005ea:	f002 f8e7 	bl	80027bc <vPortExitCritical>
  }	
 portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d003      	beq.n	80005fc <DMA2_Stream2_IRQHandler+0x70>
 80005f4:	4b08      	ldr	r3, [pc, #32]	; (8000618 <DMA2_Stream2_IRQHandler+0x8c>)
 80005f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005fa:	601a      	str	r2, [r3, #0]
}
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40026440 	.word	0x40026440
 8000608:	10208000 	.word	0x10208000
 800060c:	40013000 	.word	0x40013000
 8000610:	40020000 	.word	0x40020000
 8000614:	20000474 	.word	0x20000474
 8000618:	e000ed04 	.word	0xe000ed04

0800061c <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler()
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
	/*!	\var static unsigned portBASE_TYPE xHigherPriorityTaskWoken
	 * 	\brief Indicates if higher priority has been woken
	 */

	unsigned portBASE_TYPE xHigherPriorityTaskWoken = pdFalse;
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]

  // Test if DMA Stream Transfer Complete interrupt
  if (DMA_GetITStatus (SPIx_TX_DMA_STREAM, SPIx_TX_DMA_FLAG_TCIF)) {
 8000626:	481b      	ldr	r0, [pc, #108]	; (8000694 <DMA2_Stream3_IRQHandler+0x78>)
 8000628:	491b      	ldr	r1, [pc, #108]	; (8000698 <DMA2_Stream3_IRQHandler+0x7c>)
 800062a:	f003 fd1b 	bl	8004064 <DMA_GetITStatus>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d024      	beq.n	800067e <DMA2_Stream3_IRQHandler+0x62>
    
	DMA_ClearITPendingBit (SPIx_TX_DMA_STREAM, SPIx_TX_DMA_FLAG_TCIF);
 8000634:	4817      	ldr	r0, [pc, #92]	; (8000694 <DMA2_Stream3_IRQHandler+0x78>)
 8000636:	4918      	ldr	r1, [pc, #96]	; (8000698 <DMA2_Stream3_IRQHandler+0x7c>)
 8000638:	f003 fed0 	bl	80043dc <DMA_ClearITPendingBit>

	while (SPI_I2S_GetFlagStatus (SPIx, SPI_I2S_FLAG_BSY) == SET);
 800063c:	bf00      	nop
 800063e:	4817      	ldr	r0, [pc, #92]	; (800069c <DMA2_Stream3_IRQHandler+0x80>)
 8000640:	2180      	movs	r1, #128	; 0x80
 8000642:	f004 fc61 	bl	8004f08 <SPI_I2S_GetFlagStatus>
 8000646:	4603      	mov	r3, r0
 8000648:	2b01      	cmp	r3, #1
 800064a:	d0f8      	beq.n	800063e <DMA2_Stream3_IRQHandler+0x22>
     * Now we can deselect the display. If more than one peripheral was being run
     * on this SPI peripheral, we would have to do both/all of them, or work out
     * which one was active and deselect that one.i
	
     */
	CSOFFx();
 800064c:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <DMA2_Stream3_IRQHandler+0x84>)
 800064e:	4a14      	ldr	r2, [pc, #80]	; (80006a0 <DMA2_Stream3_IRQHandler+0x84>)
 8000650:	8b12      	ldrh	r2, [r2, #24]
 8000652:	b292      	uxth	r2, r2
 8000654:	f042 0210 	orr.w	r2, r2, #16
 8000658:	b292      	uxth	r2, r2
 800065a:	831a      	strh	r2, [r3, #24]
	DMA_Cmd(SPIx_RX_DMA_STREAM, DISABLE);		
 800065c:	4811      	ldr	r0, [pc, #68]	; (80006a4 <DMA2_Stream3_IRQHandler+0x88>)
 800065e:	2100      	movs	r1, #0
 8000660:	f003 facc 	bl	8003bfc <DMA_Cmd>
       
	taskENTER_CRITICAL(); 
 8000664:	f002 f89a 	bl	800279c <vPortEnterCritical>
//	 xSemaphoreGive( xSemaphoreDMASPI );
	xSemaphoreGiveFromISR( xSemaphoreDMASPIx, &xHigherPriorityTaskWoken );
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <DMA2_Stream3_IRQHandler+0x8c>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	4610      	mov	r0, r2
 8000670:	2100      	movs	r1, #0
 8000672:	461a      	mov	r2, r3
 8000674:	2300      	movs	r3, #0
 8000676:	f001 fca3 	bl	8001fc0 <xQueueGenericSendFromISR>
 	taskEXIT_CRITICAL();  
 800067a:	f002 f89f 	bl	80027bc <vPortExitCritical>
 }
   portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d003      	beq.n	800068c <DMA2_Stream3_IRQHandler+0x70>
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <DMA2_Stream3_IRQHandler+0x90>)
 8000686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800068a:	601a      	str	r2, [r3, #0]
}
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40026458 	.word	0x40026458
 8000698:	18008000 	.word	0x18008000
 800069c:	40013000 	.word	0x40013000
 80006a0:	40020000 	.word	0x40020000
 80006a4:	40026440 	.word	0x40026440
 80006a8:	20000474 	.word	0x20000474
 80006ac:	e000ed04 	.word	0xe000ed04

080006b0 <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler()
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
	/*!	\var static unsigned portBASE_TYPE xHigherPriorityTaskWoken
	 * 	\brief Indicates if higher priority has been woken
	 */

	unsigned portBASE_TYPE xHigherPriorityTaskWoken = pdFalse;
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]

  // Test if DMA Stream Transfer Complete interrupt
  if (DMA_GetITStatus (SPIy_RX_DMA_STREAM, SPIy_RX_DMA_FLAG_TCIF)) {
 80006ba:	481b      	ldr	r0, [pc, #108]	; (8000728 <DMA1_Stream3_IRQHandler+0x78>)
 80006bc:	491b      	ldr	r1, [pc, #108]	; (800072c <DMA1_Stream3_IRQHandler+0x7c>)
 80006be:	f003 fcd1 	bl	8004064 <DMA_GetITStatus>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d024      	beq.n	8000712 <DMA1_Stream3_IRQHandler+0x62>
    
	DMA_ClearITPendingBit (SPIy_RX_DMA_STREAM, SPIy_RX_DMA_FLAG_TCIF);
 80006c8:	4817      	ldr	r0, [pc, #92]	; (8000728 <DMA1_Stream3_IRQHandler+0x78>)
 80006ca:	4918      	ldr	r1, [pc, #96]	; (800072c <DMA1_Stream3_IRQHandler+0x7c>)
 80006cc:	f003 fe86 	bl	80043dc <DMA_ClearITPendingBit>
	
	while (SPI_I2S_GetFlagStatus (SPIy, SPI_I2S_FLAG_BSY) == SET);
 80006d0:	bf00      	nop
 80006d2:	4817      	ldr	r0, [pc, #92]	; (8000730 <DMA1_Stream3_IRQHandler+0x80>)
 80006d4:	2180      	movs	r1, #128	; 0x80
 80006d6:	f004 fc17 	bl	8004f08 <SPI_I2S_GetFlagStatus>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d0f8      	beq.n	80006d2 <DMA1_Stream3_IRQHandler+0x22>
     * Now we can deselect the display. If more than one peripheral was being run
     * on this SPI peripheral, we would have to do both/all of them, or work out
     * which one was active and deselect that one.i
	
     */
	CSOFFy();
 80006e0:	4b14      	ldr	r3, [pc, #80]	; (8000734 <DMA1_Stream3_IRQHandler+0x84>)
 80006e2:	4a14      	ldr	r2, [pc, #80]	; (8000734 <DMA1_Stream3_IRQHandler+0x84>)
 80006e4:	8b12      	ldrh	r2, [r2, #24]
 80006e6:	b292      	uxth	r2, r2
 80006e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80006ec:	b292      	uxth	r2, r2
 80006ee:	831a      	strh	r2, [r3, #24]
	DMA_Cmd(SPIy_RX_DMA_STREAM, DISABLE);		
 80006f0:	480d      	ldr	r0, [pc, #52]	; (8000728 <DMA1_Stream3_IRQHandler+0x78>)
 80006f2:	2100      	movs	r1, #0
 80006f4:	f003 fa82 	bl	8003bfc <DMA_Cmd>
 
	taskENTER_CRITICAL(); 
 80006f8:	f002 f850 	bl	800279c <vPortEnterCritical>
//       xSemaphoreGive( xSemaphoreDMASPI);
	xSemaphoreGiveFromISR( xSemaphoreDMASPIy, &xHigherPriorityTaskWoken );
 80006fc:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <DMA1_Stream3_IRQHandler+0x88>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	4610      	mov	r0, r2
 8000704:	2100      	movs	r1, #0
 8000706:	461a      	mov	r2, r3
 8000708:	2300      	movs	r3, #0
 800070a:	f001 fc59 	bl	8001fc0 <xQueueGenericSendFromISR>
	taskEXIT_CRITICAL(); //
 800070e:	f002 f855 	bl	80027bc <vPortExitCritical>
  }	
 portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d003      	beq.n	8000720 <DMA1_Stream3_IRQHandler+0x70>
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <DMA1_Stream3_IRQHandler+0x8c>)
 800071a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800071e:	601a      	str	r2, [r3, #0]
}
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40026058 	.word	0x40026058
 800072c:	18008000 	.word	0x18008000
 8000730:	40003800 	.word	0x40003800
 8000734:	40020400 	.word	0x40020400
 8000738:	20000478 	.word	0x20000478
 800073c:	e000ed04 	.word	0xe000ed04

08000740 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler()
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
	/*!	\var static unsigned portBASE_TYPE xHigherPriorityTaskWoken
	 * 	\brief Indicates if higher priority has been woken
	 */

	unsigned portBASE_TYPE xHigherPriorityTaskWoken = pdFalse;
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]

  // Test if DMA Stream Transfer Complete interrupt
  if (DMA_GetITStatus (SPIy_TX_DMA_STREAM, SPIy_TX_DMA_FLAG_TCIF)) {
 800074a:	481b      	ldr	r0, [pc, #108]	; (80007b8 <DMA1_Stream4_IRQHandler+0x78>)
 800074c:	491b      	ldr	r1, [pc, #108]	; (80007bc <DMA1_Stream4_IRQHandler+0x7c>)
 800074e:	f003 fc89 	bl	8004064 <DMA_GetITStatus>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d024      	beq.n	80007a2 <DMA1_Stream4_IRQHandler+0x62>
    
	DMA_ClearITPendingBit (SPIy_TX_DMA_STREAM, SPIx_TX_DMA_FLAG_TCIF);
 8000758:	4817      	ldr	r0, [pc, #92]	; (80007b8 <DMA1_Stream4_IRQHandler+0x78>)
 800075a:	4919      	ldr	r1, [pc, #100]	; (80007c0 <DMA1_Stream4_IRQHandler+0x80>)
 800075c:	f003 fe3e 	bl	80043dc <DMA_ClearITPendingBit>

	while (SPI_I2S_GetFlagStatus (SPIy, SPI_I2S_FLAG_BSY) == SET);
 8000760:	bf00      	nop
 8000762:	4818      	ldr	r0, [pc, #96]	; (80007c4 <DMA1_Stream4_IRQHandler+0x84>)
 8000764:	2180      	movs	r1, #128	; 0x80
 8000766:	f004 fbcf 	bl	8004f08 <SPI_I2S_GetFlagStatus>
 800076a:	4603      	mov	r3, r0
 800076c:	2b01      	cmp	r3, #1
 800076e:	d0f8      	beq.n	8000762 <DMA1_Stream4_IRQHandler+0x22>
     * Now we can deselect the display. If more than one peripheral was being run
     * on this SPI peripheral, we would have to do both/all of them, or work out
     * which one was active and deselect that one.i
	
     */
	CSOFFy();
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <DMA1_Stream4_IRQHandler+0x88>)
 8000772:	4a15      	ldr	r2, [pc, #84]	; (80007c8 <DMA1_Stream4_IRQHandler+0x88>)
 8000774:	8b12      	ldrh	r2, [r2, #24]
 8000776:	b292      	uxth	r2, r2
 8000778:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800077c:	b292      	uxth	r2, r2
 800077e:	831a      	strh	r2, [r3, #24]
	DMA_Cmd(SPIy_RX_DMA_STREAM, DISABLE);		
 8000780:	4812      	ldr	r0, [pc, #72]	; (80007cc <DMA1_Stream4_IRQHandler+0x8c>)
 8000782:	2100      	movs	r1, #0
 8000784:	f003 fa3a 	bl	8003bfc <DMA_Cmd>
       
	taskENTER_CRITICAL(); 
 8000788:	f002 f808 	bl	800279c <vPortEnterCritical>
//	 xSemaphoreGive( xSemaphoreDMASPI );
	xSemaphoreGiveFromISR( xSemaphoreDMASPIy, &xHigherPriorityTaskWoken );
 800078c:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <DMA1_Stream4_IRQHandler+0x90>)
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	4610      	mov	r0, r2
 8000794:	2100      	movs	r1, #0
 8000796:	461a      	mov	r2, r3
 8000798:	2300      	movs	r3, #0
 800079a:	f001 fc11 	bl	8001fc0 <xQueueGenericSendFromISR>
 	taskEXIT_CRITICAL();  
 800079e:	f002 f80d 	bl	80027bc <vPortExitCritical>
 }
   portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d003      	beq.n	80007b0 <DMA1_Stream4_IRQHandler+0x70>
 80007a8:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <DMA1_Stream4_IRQHandler+0x94>)
 80007aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007ae:	601a      	str	r2, [r3, #0]
}
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40026070 	.word	0x40026070
 80007bc:	20008020 	.word	0x20008020
 80007c0:	18008000 	.word	0x18008000
 80007c4:	40003800 	.word	0x40003800
 80007c8:	40020400 	.word	0x40020400
 80007cc:	40026058 	.word	0x40026058
 80007d0:	20000478 	.word	0x20000478
 80007d4:	e000ed04 	.word	0xe000ed04

080007d8 <init_USARTx>:
#define pdFalse 0
#define pdTrue 	1

static xSemaphoreHandle xSemaphoreDMAUSART;
void init_USARTx(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b096      	sub	sp, #88	; 0x58
 80007dc:	af00      	add	r7, sp, #0
	
	/* enable APB2 peripheral clock for USART1 
	 * note that only USART1 and USART6 are connected to APB2
	 * the other USARTs are connected to APB1
	 */
	RCC_APB2PeriphClockCmd(USARTx_CLK, ENABLE);
 80007de:	2010      	movs	r0, #16
 80007e0:	2101      	movs	r1, #1
 80007e2:	f004 f9c7 	bl	8004b74 <RCC_APB2PeriphClockCmd>
	
	/* enable the peripheral clock for the pins used by 
	 * USART1, PB6 for TX and PB7 for RX 
	 */
	RCC_AHB1PeriphClockCmd(USARTx_TX_GPIO_CLK, ENABLE);
 80007e6:	2001      	movs	r0, #1
 80007e8:	2101      	movs	r1, #1
 80007ea:	f004 f98b 	bl	8004b04 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(USARTx_RX_GPIO_CLK, ENABLE);
 80007ee:	2001      	movs	r0, #1
 80007f0:	2101      	movs	r1, #1
 80007f2:	f004 f987 	bl	8004b04 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(USARTx_CS_GPIO_CLK, ENABLE);
 80007f6:	2040      	movs	r0, #64	; 0x40
 80007f8:	2101      	movs	r1, #1
 80007fa:	f004 f983 	bl	8004b04 <RCC_AHB1PeriphClockCmd>

	
	/* This sequence sets up the TX and RX pins 
	 * so they work correctly with the USART1 peripheral
	 */
	GPIO_InitStruct.GPIO_Pin = USARTx_RX_GPIO_PIN | USARTx_TX_GPIO_PIN; // Pins 6 (TX) and 7 (RX) are used
 80007fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000802:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF; 			// the pins are configured as alternate function so the USART peripheral has access to them
 8000804:	2302      	movs	r3, #2
 8000806:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;		// this defines the IO speed and has nothing to do with the baudrate!
 800080a:	2303      	movs	r3, #3
 800080c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;			// this defines the output type as push pull mode (as opposed to open drain)
 8000810:	2300      	movs	r3, #0
 8000812:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;			// this activates the pullup resistors on the IO pins
 8000816:	2301      	movs	r3, #1
 8000818:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);					// now all the values are passed to the GPIO_Init() function which sets the GPIO registers
 800081c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000820:	4875      	ldr	r0, [pc, #468]	; (80009f8 <init_USARTx+0x220>)
 8000822:	4619      	mov	r1, r3
 8000824:	f003 fe86 	bl	8004534 <GPIO_Init>
	
	
	
	/* Configure the chip select pin in this case we will use PG8 */
	GPIO_InitStruct.GPIO_Pin = USARTx_CS_GPIO_PIN;
 8000828:	f44f 7380 	mov.w	r3, #256	; 0x100
 800082c:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 800082e:	2301      	movs	r3, #1
 8000830:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000834:	2300      	movs	r3, #0
 8000836:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 800083a:	2303      	movs	r3, #3
 800083c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000840:	2301      	movs	r3, #1
 8000842:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	GPIO_Init(USARTx_CS_GPIO_PORT, &GPIO_InitStruct);
 8000846:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800084a:	486c      	ldr	r0, [pc, #432]	; (80009fc <init_USARTx+0x224>)
 800084c:	4619      	mov	r1, r3
 800084e:	f003 fe71 	bl	8004534 <GPIO_Init>
	
	/* The RX and TX pins are now connected to their AF
	 * so that the USART1 can take over control of the 
	 * pins
	 */
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_USART6); //
 8000852:	486b      	ldr	r0, [pc, #428]	; (8000a00 <init_USARTx+0x228>)
 8000854:	2106      	movs	r1, #6
 8000856:	2208      	movs	r2, #8
 8000858:	f003 ff82 	bl	8004760 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_USART6);
 800085c:	4868      	ldr	r0, [pc, #416]	; (8000a00 <init_USARTx+0x228>)
 800085e:	2107      	movs	r1, #7
 8000860:	2208      	movs	r2, #8
 8000862:	f003 ff7d 	bl	8004760 <GPIO_PinAFConfig>
	
	/* Now the USART_InitStruct is used to define the 
	 * properties of USART1 
	 */
	USART_InitStruct.USART_BaudRate = 38400;				// the baudrate is set to the value we passed into this init function
 8000866:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 800086a:	643b      	str	r3, [r7, #64]	; 0x40
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 800086c:	2300      	movs	r3, #0
 800086e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	USART_InitStruct.USART_StopBits = USART_StopBits_1;		// we want 1 stop bit (standard)
 8000872:	2300      	movs	r3, #0
 8000874:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	USART_InitStruct.USART_Parity = USART_Parity_No;		// we don't want a parity bit (standard)
 8000878:	2300      	movs	r3, #0
 800087a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 800087e:	2300      	movs	r3, #0
 8000880:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000884:	230c      	movs	r3, #12
 8000886:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	USART_Init(USART6, &USART_InitStruct);					// again all the properties are passed to the USART_Init function which takes care of all the bit setting
 800088a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800088e:	485d      	ldr	r0, [pc, #372]	; (8000a04 <init_USARTx+0x22c>)
 8000890:	4619      	mov	r1, r3
 8000892:	f004 fbd1 	bl	8005038 <USART_Init>
	/* Here the USART1 receive interrupt is enabled
	 * and the interrupt controller is configured 
	 * to jump to the USART1_IRQHandler() function
	 * if the USART1 receive interrupt occurs
	 */
	USART_ITConfig(USARTx, USART_IT_RXNE, ENABLE); // enable the USART1 receive interrupt 
 8000896:	485c      	ldr	r0, [pc, #368]	; (8000a08 <init_USARTx+0x230>)
 8000898:	f240 5125 	movw	r1, #1317	; 0x525
 800089c:	2201      	movs	r2, #1
 800089e:	f004 fdeb 	bl	8005478 <USART_ITConfig>
	
	NVIC_InitStruct.NVIC_IRQChannel = USART6_IRQn;		 // we want to configure the USART interrupts
 80008a2:	2347      	movs	r3, #71	; 0x47
 80008a4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1;;// this sets the priority group of the USART1 interrupts
 80008a8:	2306      	movs	r3, #6
 80008aa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x1;		 // this sets the subpriority inside the group
 80008ae:	2301      	movs	r3, #1
 80008b0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;			 // the USART1 interrupts are globally enabled
 80008b4:	2301      	movs	r3, #1
 80008b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	NVIC_Init(&NVIC_InitStruct);	 // the properties are passed to the NVIC_Init function which takes care of the low level stuff	
 80008ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008be:	4618      	mov	r0, r3
 80008c0:	f002 fe12 	bl	80034e8 <NVIC_Init>

	// finally this enables the complete USART1 peripheral
	USART_Cmd(USART6, ENABLE);
 80008c4:	484f      	ldr	r0, [pc, #316]	; (8000a04 <init_USARTx+0x22c>)
 80008c6:	2101      	movs	r1, #1
 80008c8:	f004 fd1c 	bl	8005304 <USART_Cmd>

		/* setup DMA */

	// enable clock 
	RCC_AHB1PeriphClockCmd (USARTx_DMA_CLK, ENABLE); 
 80008cc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80008d0:	2101      	movs	r1, #1
 80008d2:	f004 f917 	bl	8004b04 <RCC_AHB1PeriphClockCmd>
	
	// start with blank DMA configuration
	DMA_DeInit (USARTx_TX_DMA_STREAM);
 80008d6:	484d      	ldr	r0, [pc, #308]	; (8000a0c <init_USARTx+0x234>)
 80008d8:	f002 fe80 	bl	80035dc <DMA_DeInit>
	DMA_DeInit (USARTx_RX_DMA_STREAM);
 80008dc:	484c      	ldr	r0, [pc, #304]	; (8000a10 <init_USARTx+0x238>)
 80008de:	f002 fe7d 	bl	80035dc <DMA_DeInit>

	// check if DMA stream is disabled before enabling 
	// this is useful when stream is enabled and disabled multiple times. 
	while (DMA_GetCmdStatus (USARTx_TX_DMA_STREAM) != DISABLE);
 80008e2:	bf00      	nop
 80008e4:	4849      	ldr	r0, [pc, #292]	; (8000a0c <init_USARTx+0x234>)
 80008e6:	f003 fa89 	bl	8003dfc <DMA_GetCmdStatus>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d1f9      	bne.n	80008e4 <init_USARTx+0x10c>
	while (DMA_GetCmdStatus (USARTx_RX_DMA_STREAM) != DISABLE);
 80008f0:	bf00      	nop
 80008f2:	4847      	ldr	r0, [pc, #284]	; (8000a10 <init_USARTx+0x238>)
 80008f4:	f003 fa82 	bl	8003dfc <DMA_GetCmdStatus>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d1f9      	bne.n	80008f2 <init_USARTx+0x11a>
	
	
	DMA_StructInit(&DMA_InitStruct);
 80008fe:	463b      	mov	r3, r7
 8000900:	4618      	mov	r0, r3
 8000902:	f003 f945 	bl	8003b90 <DMA_StructInit>
  	//Configure DMA Initialization Structure
	//DMA_InitStruct.DMA_FIFOMode = DMA_FIFOMode_Disable ;
 	//DMA_InitStruct.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull ;
  	//DMA_InitStruct.DMA_MemoryBurst = DMA_MemoryBurst_Single ;
  	DMA_InitStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]
  	DMA_InitStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800090a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800090e:	61bb      	str	r3, [r7, #24]
  	DMA_InitStruct.DMA_Mode = DMA_Mode_Normal;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  	DMA_InitStruct.DMA_PeripheralBaseAddr =(uint32_t) (&(USARTx->DR)) ;
 8000914:	4b3f      	ldr	r3, [pc, #252]	; (8000a14 <init_USARTx+0x23c>)
 8000916:	607b      	str	r3, [r7, #4]
  	DMA_InitStruct.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8000918:	2300      	movs	r3, #0
 800091a:	63bb      	str	r3, [r7, #56]	; 0x38
  	DMA_InitStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 800091c:	2300      	movs	r3, #0
 800091e:	61fb      	str	r3, [r7, #28]
  	DMA_InitStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
  	DMA_InitStruct.DMA_Priority = DMA_Priority_High;
 8000924:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  	// Configure TX DMA 
  	DMA_InitStruct.DMA_Channel = USARTx_TX_DMA_CHANNEL ;
 800092a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800092e:	603b      	str	r3, [r7, #0]
  	DMA_InitStruct.DMA_DIR = DMA_DIR_MemoryToPeripheral ;
 8000930:	2340      	movs	r3, #64	; 0x40
 8000932:	60fb      	str	r3, [r7, #12]
  	DMA_InitStruct.DMA_Memory0BaseAddr = (uint32_t) &bufferTX ;
 8000934:	4b38      	ldr	r3, [pc, #224]	; (8000a18 <init_USARTx+0x240>)
 8000936:	60bb      	str	r3, [r7, #8]
	DMA_InitStruct.DMA_BufferSize = MAX_BUFFER_LENGTH;
 8000938:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800093c:	613b      	str	r3, [r7, #16]
  	DMA_Init(USARTx_TX_DMA_STREAM, &DMA_InitStruct);
 800093e:	463b      	mov	r3, r7
 8000940:	4832      	ldr	r0, [pc, #200]	; (8000a0c <init_USARTx+0x234>)
 8000942:	4619      	mov	r1, r3
 8000944:	f002 ff60 	bl	8003808 <DMA_Init>
	// Configure RX DMA 
  	DMA_InitStruct.DMA_Channel = USARTx_RX_DMA_CHANNEL ;
 8000948:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800094c:	603b      	str	r3, [r7, #0]
	DMA_InitStruct.DMA_DIR = DMA_DIR_PeripheralToMemory ;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
	DMA_InitStruct.DMA_Memory0BaseAddr = (uint32_t)&bufferRX; 
 8000952:	4b32      	ldr	r3, [pc, #200]	; (8000a1c <init_USARTx+0x244>)
 8000954:	60bb      	str	r3, [r7, #8]
	DMA_InitStruct.DMA_BufferSize = MAX_BUFFER_LENGTH;
 8000956:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800095a:	613b      	str	r3, [r7, #16]
	DMA_Init(USARTx_RX_DMA_STREAM, &DMA_InitStruct);	
 800095c:	463b      	mov	r3, r7
 800095e:	482c      	ldr	r0, [pc, #176]	; (8000a10 <init_USARTx+0x238>)
 8000960:	4619      	mov	r1, r3
 8000962:	f002 ff51 	bl	8003808 <DMA_Init>
	
	DMA_ITConfig(USARTx_TX_DMA_STREAM, DMA_IT_TC, ENABLE); 
 8000966:	4829      	ldr	r0, [pc, #164]	; (8000a0c <init_USARTx+0x234>)
 8000968:	2110      	movs	r1, #16
 800096a:	2201      	movs	r2, #1
 800096c:	f003 fac4 	bl	8003ef8 <DMA_ITConfig>
	DMA_ITConfig(USARTx_RX_DMA_STREAM, DMA_IT_TC, ENABLE); 
 8000970:	4827      	ldr	r0, [pc, #156]	; (8000a10 <init_USARTx+0x238>)
 8000972:	2110      	movs	r1, #16
 8000974:	2201      	movs	r2, #1
 8000976:	f003 fabf 	bl	8003ef8 <DMA_ITConfig>
  
	USART_ClearFlag(USARTx, USART_FLAG_TXE);
 800097a:	4823      	ldr	r0, [pc, #140]	; (8000a08 <init_USARTx+0x230>)
 800097c:	2180      	movs	r1, #128	; 0x80
 800097e:	f004 fe39 	bl	80055f4 <USART_ClearFlag>
	USART_ClearFlag(USARTx, USART_FLAG_RXNE);
 8000982:	4821      	ldr	r0, [pc, #132]	; (8000a08 <init_USARTx+0x230>)
 8000984:	2120      	movs	r1, #32
 8000986:	f004 fe35 	bl	80055f4 <USART_ClearFlag>
  	
	// enable the interrupt in the NVIC
 	NVIC_InitStruct.NVIC_IRQChannel = USARTx_TX_DMA_IRQn;
 800098a:	2346      	movs	r3, #70	; 0x46
 800098c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 2;
 8000990:	2307      	movs	r3, #7
 8000992:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x1;
 8000996:	2301      	movs	r3, #1
 8000998:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 800099c:	2301      	movs	r3, #1
 800099e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  	NVIC_Init (&NVIC_InitStruct);
 80009a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009a6:	4618      	mov	r0, r3
 80009a8:	f002 fd9e 	bl	80034e8 <NVIC_Init>
	// enable the interrupt in the NVIC
 	NVIC_InitStruct.NVIC_IRQChannel = USARTx_RX_DMA_IRQn;
 80009ac:	2344      	movs	r3, #68	; 0x44
 80009ae:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
   	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 2;
 80009b2:	2307      	movs	r3, #7
 80009b4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x1;
 80009b8:	2301      	movs	r3, #1
 80009ba:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 80009be:	2301      	movs	r3, #1
 80009c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  	NVIC_Init (&NVIC_InitStruct);
 80009c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009c8:	4618      	mov	r0, r3
 80009ca:	f002 fd8d 	bl	80034e8 <NVIC_Init>
  	// Enable dma tx and rx request
	USART_DMACmd (USARTx, USART_DMAReq_Tx, ENABLE);	
 80009ce:	480e      	ldr	r0, [pc, #56]	; (8000a08 <init_USARTx+0x230>)
 80009d0:	2180      	movs	r1, #128	; 0x80
 80009d2:	2201      	movs	r2, #1
 80009d4:	f004 fcea 	bl	80053ac <USART_DMACmd>
	USART_DMACmd (USARTx, USART_DMAReq_Rx, ENABLE);	
 80009d8:	480b      	ldr	r0, [pc, #44]	; (8000a08 <init_USARTx+0x230>)
 80009da:	2140      	movs	r1, #64	; 0x40
 80009dc:	2201      	movs	r2, #1
 80009de:	f004 fce5 	bl	80053ac <USART_DMACmd>
	
	xSemaphoreDMAUSART = xSemaphoreCreateBinary();
 80009e2:	2001      	movs	r0, #1
 80009e4:	2100      	movs	r1, #0
 80009e6:	2203      	movs	r2, #3
 80009e8:	f001 f9f8 	bl	8001ddc <xQueueGenericCreate>
 80009ec:	4602      	mov	r2, r0
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <init_USARTx+0x248>)
 80009f0:	601a      	str	r2, [r3, #0]
}
 80009f2:	3758      	adds	r7, #88	; 0x58
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40020000 	.word	0x40020000
 80009fc:	40021800 	.word	0x40021800
 8000a00:	40020800 	.word	0x40020800
 8000a04:	40011400 	.word	0x40011400
 8000a08:	40011000 	.word	0x40011000
 8000a0c:	400264b8 	.word	0x400264b8
 8000a10:	40026488 	.word	0x40026488
 8000a14:	40011004 	.word	0x40011004
 8000a18:	200139c4 	.word	0x200139c4
 8000a1c:	200131f0 	.word	0x200131f0
 8000a20:	2000047c 	.word	0x2000047c

08000a24 <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler()
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
	/*!	\var static unsigned portBASE_TYPE xHigherPriorityTaskWoken
	 * 	\brief Indicates if higher priority has been woken
	 */

	unsigned portBASE_TYPE xHigherPriorityTaskWoken = pdFalse;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]

  // Test if DMA Stream Transfer Complete interrupt
  if (DMA_GetITStatus (USARTx_RX_DMA_STREAM, USARTx_RX_DMA_FLAG_TCIF)) {
 8000a2e:	4815      	ldr	r0, [pc, #84]	; (8000a84 <DMA2_Stream7_IRQHandler+0x60>)
 8000a30:	4915      	ldr	r1, [pc, #84]	; (8000a88 <DMA2_Stream7_IRQHandler+0x64>)
 8000a32:	f003 fb17 	bl	8004064 <DMA_GetITStatus>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d018      	beq.n	8000a6e <DMA2_Stream7_IRQHandler+0x4a>
    
	DMA_ClearITPendingBit (USARTx_RX_DMA_STREAM,  USARTx_RX_DMA_FLAG_TCIF);
 8000a3c:	4811      	ldr	r0, [pc, #68]	; (8000a84 <DMA2_Stream7_IRQHandler+0x60>)
 8000a3e:	4912      	ldr	r1, [pc, #72]	; (8000a88 <DMA2_Stream7_IRQHandler+0x64>)
 8000a40:	f003 fccc 	bl	80043dc <DMA_ClearITPendingBit>
	
	//DE();
	DMA_Cmd(USARTx_TX_DMA_STREAM, DISABLE);		
 8000a44:	4811      	ldr	r0, [pc, #68]	; (8000a8c <DMA2_Stream7_IRQHandler+0x68>)
 8000a46:	2100      	movs	r1, #0
 8000a48:	f003 f8d8 	bl	8003bfc <DMA_Cmd>
	DMA_Cmd(USARTx_RX_DMA_STREAM, DISABLE);		
 8000a4c:	480d      	ldr	r0, [pc, #52]	; (8000a84 <DMA2_Stream7_IRQHandler+0x60>)
 8000a4e:	2100      	movs	r1, #0
 8000a50:	f003 f8d4 	bl	8003bfc <DMA_Cmd>
 
	taskENTER_CRITICAL(); 
 8000a54:	f001 fea2 	bl	800279c <vPortEnterCritical>
	xSemaphoreGiveFromISR( xSemaphoreDMAUSART, &xHigherPriorityTaskWoken );
 8000a58:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <DMA2_Stream7_IRQHandler+0x6c>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	4610      	mov	r0, r2
 8000a60:	2100      	movs	r1, #0
 8000a62:	461a      	mov	r2, r3
 8000a64:	2300      	movs	r3, #0
 8000a66:	f001 faab 	bl	8001fc0 <xQueueGenericSendFromISR>
	taskEXIT_CRITICAL(); //
 8000a6a:	f001 fea7 	bl	80027bc <vPortExitCritical>
  }	
 portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d003      	beq.n	8000a7c <DMA2_Stream7_IRQHandler+0x58>
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <DMA2_Stream7_IRQHandler+0x70>)
 8000a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a7a:	601a      	str	r2, [r3, #0]
}
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40026488 	.word	0x40026488
 8000a88:	20008800 	.word	0x20008800
 8000a8c:	400264b8 	.word	0x400264b8
 8000a90:	2000047c 	.word	0x2000047c
 8000a94:	e000ed04 	.word	0xe000ed04

08000a98 <DMA2_Stream5_IRQHandler>:
void DMA2_Stream5_IRQHandler()
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
	/*!	\var static unsigned portBASE_TYPE xHigherPriorityTaskWoken
	 * 	\brief Indicates if higher priority has been woken
	 */

	unsigned portBASE_TYPE xHigherPriorityTaskWoken = pdFalse;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]

  // Test if DMA Stream Transfer Complete interrupt
  if (DMA_GetITStatus (USARTx_TX_DMA_STREAM,  USARTx_TX_DMA_FLAG_TCIF)) {
 8000aa2:	4815      	ldr	r0, [pc, #84]	; (8000af8 <DMA2_Stream5_IRQHandler+0x60>)
 8000aa4:	4915      	ldr	r1, [pc, #84]	; (8000afc <DMA2_Stream5_IRQHandler+0x64>)
 8000aa6:	f003 fadd 	bl	8004064 <DMA_GetITStatus>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d018      	beq.n	8000ae2 <DMA2_Stream5_IRQHandler+0x4a>
    
	DMA_ClearITPendingBit (USARTx_TX_DMA_STREAM, USARTx_TX_DMA_FLAG_TCIF);
 8000ab0:	4811      	ldr	r0, [pc, #68]	; (8000af8 <DMA2_Stream5_IRQHandler+0x60>)
 8000ab2:	4912      	ldr	r1, [pc, #72]	; (8000afc <DMA2_Stream5_IRQHandler+0x64>)
 8000ab4:	f003 fc92 	bl	80043dc <DMA_ClearITPendingBit>
	
	//DE();
	DMA_Cmd(USARTx_TX_DMA_STREAM, DISABLE);		
 8000ab8:	480f      	ldr	r0, [pc, #60]	; (8000af8 <DMA2_Stream5_IRQHandler+0x60>)
 8000aba:	2100      	movs	r1, #0
 8000abc:	f003 f89e 	bl	8003bfc <DMA_Cmd>
	DMA_Cmd(USARTx_RX_DMA_STREAM, DISABLE);		
 8000ac0:	480f      	ldr	r0, [pc, #60]	; (8000b00 <DMA2_Stream5_IRQHandler+0x68>)
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	f003 f89a 	bl	8003bfc <DMA_Cmd>
       
	taskENTER_CRITICAL(); 
 8000ac8:	f001 fe68 	bl	800279c <vPortEnterCritical>
	xSemaphoreGiveFromISR( xSemaphoreDMAUSART, &xHigherPriorityTaskWoken );
 8000acc:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <DMA2_Stream5_IRQHandler+0x6c>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	2300      	movs	r3, #0
 8000ada:	f001 fa71 	bl	8001fc0 <xQueueGenericSendFromISR>
 	taskEXIT_CRITICAL();  
 8000ade:	f001 fe6d 	bl	80027bc <vPortExitCritical>
 }
   portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d003      	beq.n	8000af0 <DMA2_Stream5_IRQHandler+0x58>
 8000ae8:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <DMA2_Stream5_IRQHandler+0x70>)
 8000aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000aee:	601a      	str	r2, [r3, #0]
}
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	400264b8 	.word	0x400264b8
 8000afc:	28008000 	.word	0x28008000
 8000b00:	40026488 	.word	0x40026488
 8000b04:	2000047c 	.word	0x2000047c
 8000b08:	e000ed04 	.word	0xe000ed04

08000b0c <usart_dma_write_read>:


void usart_dma_write_read(uint8_t *bufRX, uint8_t *bufTX, uint16_t lenRX,  uint16_t lenTX)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	80fa      	strh	r2, [r7, #6]
 8000b18:	80bb      	strh	r3, [r7, #4]
		
		/*! usart_dma_read it has to be used with \n
		 * memcpy from bufferRX right after it has recieve \n
		 * data on SPI. */
		
		DMA_SetCurrDataCounter(USARTx_RX_DMA_STREAM, lenRX);
 8000b1a:	88fb      	ldrh	r3, [r7, #6]
 8000b1c:	4810      	ldr	r0, [pc, #64]	; (8000b60 <usart_dma_write_read+0x54>)
 8000b1e:	4619      	mov	r1, r3
 8000b20:	f003 f8f8 	bl	8003d14 <DMA_SetCurrDataCounter>
		DMA_SetCurrDataCounter(USARTx_TX_DMA_STREAM, lenTX);
 8000b24:	88bb      	ldrh	r3, [r7, #4]
 8000b26:	480f      	ldr	r0, [pc, #60]	; (8000b64 <usart_dma_write_read+0x58>)
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f003 f8f3 	bl	8003d14 <DMA_SetCurrDataCounter>
		USARTx_TX_DMA_STREAM->M0AR =(uint32_t)bufTX;	
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <usart_dma_write_read+0x58>)
 8000b30:	68ba      	ldr	r2, [r7, #8]
 8000b32:	60da      	str	r2, [r3, #12]
		USARTx_RX_DMA_STREAM->M0AR =(uint32_t)bufRX;	
 8000b34:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <usart_dma_write_read+0x54>)
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	60da      	str	r2, [r3, #12]

		//DD(); // chip select 
		DMA_Cmd(USARTx_TX_DMA_STREAM, ENABLE);		
 8000b3a:	480a      	ldr	r0, [pc, #40]	; (8000b64 <usart_dma_write_read+0x58>)
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	f003 f85d 	bl	8003bfc <DMA_Cmd>
		DMA_Cmd(USARTx_RX_DMA_STREAM, ENABLE);
 8000b42:	4807      	ldr	r0, [pc, #28]	; (8000b60 <usart_dma_write_read+0x54>)
 8000b44:	2101      	movs	r1, #1
 8000b46:	f003 f859 	bl	8003bfc <DMA_Cmd>
		/* Block until the semaphore is given */
        	xSemaphoreTake(xSemaphoreDMAUSART, 10/portTICK_RATE_MS);	
 8000b4a:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <usart_dma_write_read+0x5c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	2100      	movs	r1, #0
 8000b52:	220a      	movs	r2, #10
 8000b54:	2300      	movs	r3, #0
 8000b56:	f001 fa9d 	bl	8002094 <xQueueGenericReceive>
		//CSOFF(); // chip deselect		

}
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40026488 	.word	0x40026488
 8000b64:	400264b8 	.word	0x400264b8
 8000b68:	2000047c 	.word	0x2000047c

08000b6c <NVIC_SetPendingIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the interrupt for set pending
 */
static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
  NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <NVIC_SetPendingIRQ+0x30>)
 8000b78:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000b7c:	0952      	lsrs	r2, r2, #5
 8000b7e:	79f9      	ldrb	r1, [r7, #7]
 8000b80:	f001 011f 	and.w	r1, r1, #31
 8000b84:	2001      	movs	r0, #1
 8000b86:	fa00 f101 	lsl.w	r1, r0, r1
 8000b8a:	3240      	adds	r2, #64	; 0x40
 8000b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000e100 	.word	0xe000e100

08000ba0 <CoreSight_configure>:

#ifdef DEBUG
#define SWO_BAUD_RATE 230400

void CoreSight_configure(uint32_t SystemCoreClock)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]

  uint32_t SWOPrescaler;

  SWOPrescaler = (SystemCoreClock / SWO_BAUD_RATE ) - 1;
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <CoreSight_configure+0x60>)
 8000bac:	fba3 1302 	umull	r1, r3, r3, r2
 8000bb0:	0c5b      	lsrs	r3, r3, #17
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	60fb      	str	r3, [r7, #12]

  CoreDebug->DEMCR = 1 << CoreDebug_DEMCR_TRCENA_Pos; /* Enable trace */
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <CoreSight_configure+0x64>)
 8000bb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000bbc:	60da      	str	r2, [r3, #12]
  *((volatile unsigned *) 0xE0042004) = 0x00000020;   /* DBGMCU_CR */
 8000bbe:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <CoreSight_configure+0x68>)
 8000bc0:	2220      	movs	r2, #32
 8000bc2:	601a      	str	r2, [r3, #0]
  
  
  *((volatile unsigned *) 0xE0040004) = 0x00000001; /* port size -> 1 bit */
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <CoreSight_configure+0x6c>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	601a      	str	r2, [r3, #0]

  /* Set TPIU register->Selected pinprotocol = 10b: Serial Wire Output - NRZ */
  *((volatile unsigned *) 0xE00400F0) = 0x00000002; /* "Selected PIN Protocol Register": Select which protocol to use for trace output (2: SWO)*/
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <CoreSight_configure+0x70>)
 8000bcc:	2202      	movs	r2, #2
 8000bce:	601a      	str	r2, [r3, #0]

  /* Set TPIU -> Async Clock Prescaler Register [bits 0-12] */
  *((volatile unsigned *) 0xE0040010) = SWOPrescaler; /* "Async Clock Prescaler Register". Scale the baud rate of the asynchronous output */
 8000bd0:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <CoreSight_configure+0x74>)
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	601a      	str	r2, [r3, #0]

  *((volatile unsigned *) 0xE0040304) = 0x00000100; /* Formatter and Flush Control Register */
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <CoreSight_configure+0x78>)
 8000bd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bdc:	601a      	str	r2, [r3, #0]

  /* ITM Lock Access Register */
  *((volatile unsigned *) 0xE0000FB0) = 0xC5ACCE55; /* ITM Lock Access Register, C5ACCE55 enables more */
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <CoreSight_configure+0x7c>)
 8000be0:	4a0f      	ldr	r2, [pc, #60]	; (8000c20 <CoreSight_configure+0x80>)
 8000be2:	601a      	str	r2, [r3, #0]
                                                    /* write access to Control Register 0xE00 :: 0xFFC */
  *((volatile unsigned *) 0xE0000E80) = 0x00010005; /* ITM Trace Control Register */
 8000be4:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <CoreSight_configure+0x84>)
 8000be6:	4a10      	ldr	r2, [pc, #64]	; (8000c28 <CoreSight_configure+0x88>)
 8000be8:	601a      	str	r2, [r3, #0]
  *((volatile unsigned *) 0xE0000E00) = 0x00000001; /* ITM Trace Enable Register. Enabled tracing on stimulus */
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <CoreSight_configure+0x8c>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	601a      	str	r2, [r3, #0]
                                                    /* ports. One bit per stimulus port. */
  *((volatile unsigned *) 0xE0000E40) = 0x00000001; /* ITM Trace Privilege Register */
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <CoreSight_configure+0x90>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	601a      	str	r2, [r3, #0]

  /*  *((volatile unsigned *) 0xE0001000) = 0x400003FE; */ /* DWT_CTRL */

  //  *(volatile unsigned int *)0xE0001000 |= 0x00000001 ;  /* Enable cycle counter*/
  // *(volatile unsigned int *)0xE0001004 = 0;             /* Reset counter */
}
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	91a2b3c5 	.word	0x91a2b3c5
 8000c04:	e000edf0 	.word	0xe000edf0
 8000c08:	e0042004 	.word	0xe0042004
 8000c0c:	e0040004 	.word	0xe0040004
 8000c10:	e00400f0 	.word	0xe00400f0
 8000c14:	e0040010 	.word	0xe0040010
 8000c18:	e0040304 	.word	0xe0040304
 8000c1c:	e0000fb0 	.word	0xe0000fb0
 8000c20:	c5acce55 	.word	0xc5acce55
 8000c24:	e0000e80 	.word	0xe0000e80
 8000c28:	00010005 	.word	0x00010005
 8000c2c:	e0000e00 	.word	0xe0000e00
 8000c30:	e0000e40 	.word	0xe0000e40

08000c34 <main>:
#endif

/*-----------------------------------------------------------*/

int main(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af04      	add	r7, sp, #16

#ifdef DEBUG
	SystemCoreClockUpdate();
 8000c3a:	f000 f937 	bl	8000eac <SystemCoreClockUpdate>

	CoreSight_configure(SystemCoreClock);
 8000c3e:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <main+0x68>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff ffac 	bl	8000ba0 <CoreSight_configure>
	
	/*<! Configure the hardware ready to run the test. */
	t_printf("Starting\n");
 8000c48:	4815      	ldr	r0, [pc, #84]	; (8000ca0 <main+0x6c>)
 8000c4a:	f002 f969 	bl	8002f20 <t_printf>
#endif
	prvSetupHardware();
 8000c4e:	f000 f859 	bl	8000d04 <prvSetupHardware>




	// set motor task 
	if (xTaskCreate(usart_task, "usart", configMINIMAL_STACK_SIZE * 5,		       				
 8000c52:	2301      	movs	r3, #1
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	2300      	movs	r3, #0
 8000c58:	9301      	str	r3, [sp, #4]
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	9302      	str	r3, [sp, #8]
 8000c5e:	2300      	movs	r3, #0
 8000c60:	9303      	str	r3, [sp, #12]
 8000c62:	4810      	ldr	r0, [pc, #64]	; (8000ca4 <main+0x70>)
 8000c64:	4910      	ldr	r1, [pc, #64]	; (8000ca8 <main+0x74>)
 8000c66:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f000 fa14 	bl	8001098 <xTaskGenericCreate>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d005      	beq.n	8000c82 <main+0x4e>
			NULL, mainFLASH_TASK_PRIORITY  , NULL)
			!= pdTRUE)
	{
		#ifdef DEBUG
		t_printf("Error creating motorHB task.\n");
 8000c76:	480d      	ldr	r0, [pc, #52]	; (8000cac <main+0x78>)
 8000c78:	f002 f952 	bl	8002f20 <t_printf>
		#endif
		return -1;
 8000c7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c80:	e008      	b.n	8000c94 <main+0x60>

	}
	else
	{
		#ifdef DEBUG
		t_printf("Succsessfully created motorHB task\n");
 8000c82:	480b      	ldr	r0, [pc, #44]	; (8000cb0 <main+0x7c>)
 8000c84:	f002 f94c 	bl	8002f20 <t_printf>
	mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY is set to 0 (at the top of this
	file).  See the comments at the top of this file for more information. */
	//prvOptionallyCreateComprehensveTestApplication();

	/* Start the scheduler. */
	vTaskStartScheduler();
 8000c88:	f000 fae2 	bl	8001250 <vTaskStartScheduler>

	#ifdef DEBUG
	t_printf("\n\nError with scheduler!! .\n\n");
 8000c8c:	4809      	ldr	r0, [pc, #36]	; (8000cb4 <main+0x80>)
 8000c8e:	f002 f947 	bl	8002f20 <t_printf>
	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details. */
	for( ;; );
 8000c92:	e7fe      	b.n	8000c92 <main+0x5e>
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	080058fc 	.word	0x080058fc
 8000ca4:	08000cb9 	.word	0x08000cb9
 8000ca8:	08005908 	.word	0x08005908
 8000cac:	08005910 	.word	0x08005910
 8000cb0:	08005930 	.word	0x08005930
 8000cb4:	08005954 	.word	0x08005954

08000cb8 <usart_task>:


void usart_task(void * pvParameters) 
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08c      	sub	sp, #48	; 0x30
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]


	char  str[30];
	int i = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 29; i++) str[i] =  i; 
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cc8:	e009      	b.n	8000cde <usart_task+0x26>
 8000cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	f107 0108 	add.w	r1, r7, #8
 8000cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cd4:	440b      	add	r3, r1
 8000cd6:	701a      	strb	r2, [r3, #0]
 8000cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cda:	3301      	adds	r3, #1
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ce0:	2b1c      	cmp	r3, #28
 8000ce2:	ddf2      	ble.n	8000cca <usart_task+0x12>
	int len = 13;
 8000ce4:	230d      	movs	r3, #13
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
	for(;;)
	{
		usart_dma_write_read(NULL, str,0, len);
 8000ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	f107 0208 	add.w	r2, r7, #8
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f7ff ff09 	bl	8000b0c <usart_dma_write_read>
		vTaskDelay(1000/portTICK_RATE_MS);
 8000cfa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cfe:	f000 fa7f 	bl	8001200 <vTaskDelay>
	}
 8000d02:	e7f1      	b.n	8000ce8 <usart_task+0x30>

08000d04 <prvSetupHardware>:
/*! 	\fn static void prvSetupHardware(void) 
 *	\brief Sets up hardware
 * 	
 */
void prvSetupHardware( void )
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	/* Setup STM32 system (clock, PLL and Flash configuration) */
	SystemInit();
 8000d08:	f000 f89c 	bl	8000e44 <SystemInit>

	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8000d0c:	f44f 7040 	mov.w	r0, #768	; 0x300
 8000d10:	f002 fbc0 	bl	8003494 <NVIC_PriorityGroupConfig>
	
	//init_SPIx();
	init_SPIx();	
 8000d14:	f7ff fafc 	bl	8000310 <init_SPIx>
	
	// init USARTx 
	init_USARTx();
 8000d18:	f7ff fd5e 	bl	80007d8 <init_USARTx>

	
	
}
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop

08000d20 <vApplicationTickHook>:
/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	#if ( mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY == 0 )
	{
		/* Just to verify that the interrupt nesting behaves as expected,
		increment ulFPUInterruptNesting on entry, and decrement it on exit. */
		ulFPUInterruptNesting++;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <vApplicationTickHook+0x20>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	1c5a      	adds	r2, r3, #1
 8000d2a:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <vApplicationTickHook+0x20>)
 8000d2c:	601a      	str	r2, [r3, #0]

		/* Trigger a timer 2 interrupt, which will fill the registers with a
		different value and itself trigger a timer 3 interrupt.  Note that the
		timers are not actually used.  The timer 2 and 3 interrupt vectors are
		just used for convenience. */
		NVIC_SetPendingIRQ( TIM2_IRQn );
 8000d2e:	201c      	movs	r0, #28
 8000d30:	f7ff ff1c 	bl	8000b6c <NVIC_SetPendingIRQ>
		/* Ensure that, after returning from the nested interrupts, all the FPU
		registers contain the value to which they were set by the tick hook
		function. */
		//configASSERT( ulRegTestCheckFlopRegistersContainParameterValue( 0UL ) );

		ulFPUInterruptNesting--;
 8000d34:	4b02      	ldr	r3, [pc, #8]	; (8000d40 <vApplicationTickHook+0x20>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	1e5a      	subs	r2, r3, #1
 8000d3a:	4b01      	ldr	r3, [pc, #4]	; (8000d40 <vApplicationTickHook+0x20>)
 8000d3c:	601a      	str	r2, [r3, #0]
	}
	#endif
}
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000480 	.word	0x20000480

08000d44 <TIM3_IRQHandler>:
	NVIC_Init( &NVIC_InitStructure );
}
/*-----------------------------------------------------------*/

void TIM3_IRQHandler( void )
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
	/* Just to verify that the interrupt nesting behaves as expected, increment
	ulFPUInterruptNesting on entry, and decrement it on exit. */
	ulFPUInterruptNesting++;
 8000d48:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <TIM3_IRQHandler+0x34>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	1c5a      	adds	r2, r3, #1
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <TIM3_IRQHandler+0x34>)
 8000d50:	601a      	str	r2, [r3, #0]

	/* This is the highest priority interrupt in the chain of forced nesting
	interrupts, so latch the maximum value reached by ulFPUInterruptNesting.
	This is done purely to allow verification that the nesting depth reaches
	that intended. */
	if( ulFPUInterruptNesting > ulMaxFPUInterruptNesting )
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <TIM3_IRQHandler+0x34>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <TIM3_IRQHandler+0x38>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d903      	bls.n	8000d66 <TIM3_IRQHandler+0x22>
	{
		ulMaxFPUInterruptNesting = ulFPUInterruptNesting;
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <TIM3_IRQHandler+0x34>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <TIM3_IRQHandler+0x38>)
 8000d64:	601a      	str	r2, [r3, #0]

	/* Fill the FPU registers with 99 to overwrite the values written by
	TIM2_IRQHandler(). */
	//vRegTestClearFlopRegistersToParameterValue( 99UL );

	ulFPUInterruptNesting--;
 8000d66:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <TIM3_IRQHandler+0x34>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	1e5a      	subs	r2, r3, #1
 8000d6c:	4b02      	ldr	r3, [pc, #8]	; (8000d78 <TIM3_IRQHandler+0x34>)
 8000d6e:	601a      	str	r2, [r3, #0]
}
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	20000480 	.word	0x20000480
 8000d7c:	20000484 	.word	0x20000484

08000d80 <TIM2_IRQHandler>:
/*-----------------------------------------------------------*/

void TIM2_IRQHandler( void )
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
	/* Just to verify that the interrupt nesting behaves as expected, increment
	ulFPUInterruptNesting on entry, and decrement it on exit. */
	ulFPUInterruptNesting++;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <TIM2_IRQHandler+0x20>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	1c5a      	adds	r2, r3, #1
 8000d8a:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <TIM2_IRQHandler+0x20>)
 8000d8c:	601a      	str	r2, [r3, #0]
	/* Fill the FPU registers with 1. */
	//vRegTestClearFlopRegistersToParameterValue( 1UL );

	/* Trigger a timer 3 interrupt, which will fill the registers with a
	different value. */
	NVIC_SetPendingIRQ( TIM3_IRQn );
 8000d8e:	201d      	movs	r0, #29
 8000d90:	f7ff feec 	bl	8000b6c <NVIC_SetPendingIRQ>
	/* Ensure that, after returning from the nesting interrupt, all the FPU
	registers contain the value to which they were set by this interrupt
	function. */
	//configASSERT( ulRegTestCheckFlopRegistersContainParameterValue( 1UL ) );

	ulFPUInterruptNesting--;
 8000d94:	4b02      	ldr	r3, [pc, #8]	; (8000da0 <TIM2_IRQHandler+0x20>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	1e5a      	subs	r2, r3, #1
 8000d9a:	4b01      	ldr	r3, [pc, #4]	; (8000da0 <TIM2_IRQHandler+0x20>)
 8000d9c:	601a      	str	r2, [r3, #0]
}
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000480 	.word	0x20000480

08000da4 <vApplicationMallocFailedHook>:


/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 8000da8:	f001 fd1a 	bl	80027e0 <ulPortSetInterruptMask>
	for( ;; );
 8000dac:	e7fe      	b.n	8000dac <vApplicationMallocFailedHook+0x8>
 8000dae:	bf00      	nop

08000db0 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	unction, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 8000dc6:	f001 fd0b 	bl	80027e0 <ulPortSetInterruptMask>
	for( ;; );
 8000dca:	e7fe      	b.n	8000dca <vApplicationStackOverflowHook+0xe>

08000dcc <assert_failed>:
}
///*-----------------------------------------------------------*/
void assert_failed(uint8_t* file, uint32_t line){}
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <Reset_Handler>:
 8000de0:	2100      	movs	r1, #0
 8000de2:	f000 b804 	b.w	8000dee <LoopCopyDataInit>

08000de6 <CopyDataInit>:
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <LoopFillZerobss+0x22>)
 8000de8:	585b      	ldr	r3, [r3, r1]
 8000dea:	5043      	str	r3, [r0, r1]
 8000dec:	3104      	adds	r1, #4

08000dee <LoopCopyDataInit>:
 8000dee:	480f      	ldr	r0, [pc, #60]	; (8000e2c <LoopFillZerobss+0x26>)
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <LoopFillZerobss+0x2a>)
 8000df2:	1842      	adds	r2, r0, r1
 8000df4:	429a      	cmp	r2, r3
 8000df6:	f4ff aff6 	bcc.w	8000de6 <CopyDataInit>
 8000dfa:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <LoopFillZerobss+0x2e>)
 8000dfc:	f000 b803 	b.w	8000e06 <LoopFillZerobss>

08000e00 <FillZerobss>:
 8000e00:	2300      	movs	r3, #0
 8000e02:	f842 3b04 	str.w	r3, [r2], #4

08000e06 <LoopFillZerobss>:
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <LoopFillZerobss+0x32>)
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	f4ff aff9 	bcc.w	8000e00 <FillZerobss>
 8000e0e:	480b      	ldr	r0, [pc, #44]	; (8000e3c <LoopFillZerobss+0x36>)
 8000e10:	6801      	ldr	r1, [r0, #0]
 8000e12:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000e16:	6001      	str	r1, [r0, #0]
 8000e18:	f000 f814 	bl	8000e44 <SystemInit>
 8000e1c:	f004 fc4c 	bl	80056b8 <__libc_init_array>
 8000e20:	f7ff ff08 	bl	8000c34 <main>
 8000e24:	4770      	bx	lr
 8000e26:	0000      	.short	0x0000
 8000e28:	08005bb4 	.word	0x08005bb4
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	20000458 	.word	0x20000458
 8000e34:	20000458 	.word	0x20000458
 8000e38:	2001419c 	.word	0x2001419c
 8000e3c:	e000ed88 	.word	0xe000ed88

08000e40 <ADC_IRQHandler>:
 8000e40:	f7ff bffe 	b.w	8000e40 <ADC_IRQHandler>

08000e44 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e48:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <SystemInit+0x5c>)
 8000e4a:	4a15      	ldr	r2, [pc, #84]	; (8000ea0 <SystemInit+0x5c>)
 8000e4c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8000e50:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000e54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <SystemInit+0x60>)
 8000e5a:	4a12      	ldr	r2, [pc, #72]	; (8000ea4 <SystemInit+0x60>)
 8000e5c:	6812      	ldr	r2, [r2, #0]
 8000e5e:	f042 0201 	orr.w	r2, r2, #1
 8000e62:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <SystemInit+0x60>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000e6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ea4 <SystemInit+0x60>)
 8000e6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <SystemInit+0x60>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e78:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <SystemInit+0x60>)
 8000e7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <SystemInit+0x64>)
 8000e7e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <SystemInit+0x60>)
 8000e82:	4a08      	ldr	r2, [pc, #32]	; (8000ea4 <SystemInit+0x60>)
 8000e84:	6812      	ldr	r2, [r2, #0]
 8000e86:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e8a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <SystemInit+0x60>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000e92:	f000 f887 	bl	8000fa4 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e96:	4b02      	ldr	r3, [pc, #8]	; (8000ea0 <SystemInit+0x5c>)
 8000e98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e9c:	609a      	str	r2, [r3, #8]
#endif
}
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	e000ed00 	.word	0xe000ed00
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	24003010 	.word	0x24003010

08000eac <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b087      	sub	sp, #28
 8000eb0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	2302      	movs	r3, #2
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000ec6:	4b32      	ldr	r3, [pc, #200]	; (8000f90 <SystemCoreClockUpdate+0xe4>)
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f003 030c 	and.w	r3, r3, #12
 8000ece:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	d007      	beq.n	8000ee6 <SystemCoreClockUpdate+0x3a>
 8000ed6:	2b08      	cmp	r3, #8
 8000ed8:	d009      	beq.n	8000eee <SystemCoreClockUpdate+0x42>
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d13f      	bne.n	8000f5e <SystemCoreClockUpdate+0xb2>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000ede:	4b2d      	ldr	r3, [pc, #180]	; (8000f94 <SystemCoreClockUpdate+0xe8>)
 8000ee0:	4a2d      	ldr	r2, [pc, #180]	; (8000f98 <SystemCoreClockUpdate+0xec>)
 8000ee2:	601a      	str	r2, [r3, #0]
      break;
 8000ee4:	e03f      	b.n	8000f66 <SystemCoreClockUpdate+0xba>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000ee6:	4b2b      	ldr	r3, [pc, #172]	; (8000f94 <SystemCoreClockUpdate+0xe8>)
 8000ee8:	4a2c      	ldr	r2, [pc, #176]	; (8000f9c <SystemCoreClockUpdate+0xf0>)
 8000eea:	601a      	str	r2, [r3, #0]
      break;
 8000eec:	e03b      	b.n	8000f66 <SystemCoreClockUpdate+0xba>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000eee:	4b28      	ldr	r3, [pc, #160]	; (8000f90 <SystemCoreClockUpdate+0xe4>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ef6:	0d9b      	lsrs	r3, r3, #22
 8000ef8:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000efa:	4b25      	ldr	r3, [pc, #148]	; (8000f90 <SystemCoreClockUpdate+0xe4>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f02:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d00d      	beq.n	8000f26 <SystemCoreClockUpdate+0x7a>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000f0a:	4a24      	ldr	r2, [pc, #144]	; (8000f9c <SystemCoreClockUpdate+0xf0>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f12:	4b1f      	ldr	r3, [pc, #124]	; (8000f90 <SystemCoreClockUpdate+0xe4>)
 8000f14:	6859      	ldr	r1, [r3, #4]
 8000f16:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000f1a:	400b      	ands	r3, r1
 8000f1c:	099b      	lsrs	r3, r3, #6
 8000f1e:	fb03 f302 	mul.w	r3, r3, r2
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	e00c      	b.n	8000f40 <SystemCoreClockUpdate+0x94>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000f26:	4a1c      	ldr	r2, [pc, #112]	; (8000f98 <SystemCoreClockUpdate+0xec>)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f2e:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <SystemCoreClockUpdate+0xe4>)
 8000f30:	6859      	ldr	r1, [r3, #4]
 8000f32:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000f36:	400b      	ands	r3, r1
 8000f38:	099b      	lsrs	r3, r3, #6
 8000f3a:	fb03 f302 	mul.w	r3, r3, r2
 8000f3e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <SystemCoreClockUpdate+0xe4>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f48:	0c1b      	lsrs	r3, r3, #16
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f58:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <SystemCoreClockUpdate+0xe8>)
 8000f5a:	601a      	str	r2, [r3, #0]
      break;
 8000f5c:	e003      	b.n	8000f66 <SystemCoreClockUpdate+0xba>
    default:
      SystemCoreClock = HSI_VALUE;
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <SystemCoreClockUpdate+0xe8>)
 8000f60:	4a0d      	ldr	r2, [pc, #52]	; (8000f98 <SystemCoreClockUpdate+0xec>)
 8000f62:	601a      	str	r2, [r3, #0]
      break;
 8000f64:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <SystemCoreClockUpdate+0xe4>)
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f6e:	091b      	lsrs	r3, r3, #4
 8000f70:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <SystemCoreClockUpdate+0xf4>)
 8000f72:	5cd3      	ldrb	r3, [r2, r3]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <SystemCoreClockUpdate+0xe8>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	40da      	lsrs	r2, r3
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <SystemCoreClockUpdate+0xe8>)
 8000f82:	601a      	str	r2, [r3, #0]
}
 8000f84:	371c      	adds	r7, #28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800
 8000f94:	20000000 	.word	0x20000000
 8000f98:	00f42400 	.word	0x00f42400
 8000f9c:	017d7840 	.word	0x017d7840
 8000fa0:	20000004 	.word	0x20000004

08000fa4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	2300      	movs	r3, #0
 8000fb0:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000fb2:	4b35      	ldr	r3, [pc, #212]	; (8001088 <SetSysClock+0xe4>)
 8000fb4:	4a34      	ldr	r2, [pc, #208]	; (8001088 <SetSysClock+0xe4>)
 8000fb6:	6812      	ldr	r2, [r2, #0]
 8000fb8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000fbc:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000fbe:	4b32      	ldr	r3, [pc, #200]	; (8001088 <SetSysClock+0xe4>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d103      	bne.n	8000fdc <SetSysClock+0x38>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000fda:	d1f0      	bne.n	8000fbe <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000fdc:	4b2a      	ldr	r3, [pc, #168]	; (8001088 <SetSysClock+0xe4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d002      	beq.n	8000fee <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	e001      	b.n	8000ff2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d142      	bne.n	800107e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000ff8:	4b23      	ldr	r3, [pc, #140]	; (8001088 <SetSysClock+0xe4>)
 8000ffa:	4a23      	ldr	r2, [pc, #140]	; (8001088 <SetSysClock+0xe4>)
 8000ffc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000ffe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001002:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001004:	4b21      	ldr	r3, [pc, #132]	; (800108c <SetSysClock+0xe8>)
 8001006:	4a21      	ldr	r2, [pc, #132]	; (800108c <SetSysClock+0xe8>)
 8001008:	6812      	ldr	r2, [r2, #0]
 800100a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800100e:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001010:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <SetSysClock+0xe4>)
 8001012:	4a1d      	ldr	r2, [pc, #116]	; (8001088 <SetSysClock+0xe4>)
 8001014:	6892      	ldr	r2, [r2, #8]
 8001016:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <SetSysClock+0xe4>)
 800101a:	4a1b      	ldr	r2, [pc, #108]	; (8001088 <SetSysClock+0xe4>)
 800101c:	6892      	ldr	r2, [r2, #8]
 800101e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001022:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <SetSysClock+0xe4>)
 8001026:	4a18      	ldr	r2, [pc, #96]	; (8001088 <SetSysClock+0xe4>)
 8001028:	6892      	ldr	r2, [r2, #8]
 800102a:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 800102e:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <SetSysClock+0xe4>)
 8001032:	4a17      	ldr	r2, [pc, #92]	; (8001090 <SetSysClock+0xec>)
 8001034:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <SetSysClock+0xe4>)
 8001038:	4a13      	ldr	r2, [pc, #76]	; (8001088 <SetSysClock+0xe4>)
 800103a:	6812      	ldr	r2, [r2, #0]
 800103c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001040:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001042:	bf00      	nop
 8001044:	4b10      	ldr	r3, [pc, #64]	; (8001088 <SetSysClock+0xe4>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0f9      	beq.n	8001044 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_4WS;
 8001050:	4b10      	ldr	r3, [pc, #64]	; (8001094 <SetSysClock+0xf0>)
 8001052:	f240 6204 	movw	r2, #1540	; 0x604
 8001056:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <SetSysClock+0xe4>)
 800105a:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <SetSysClock+0xe4>)
 800105c:	6892      	ldr	r2, [r2, #8]
 800105e:	f022 0203 	bic.w	r2, r2, #3
 8001062:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <SetSysClock+0xe4>)
 8001066:	4a08      	ldr	r2, [pc, #32]	; (8001088 <SetSysClock+0xe4>)
 8001068:	6892      	ldr	r2, [r2, #8]
 800106a:	f042 0202 	orr.w	r2, r2, #2
 800106e:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001070:	bf00      	nop
 8001072:	4b05      	ldr	r3, [pc, #20]	; (8001088 <SetSysClock+0xe4>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f003 030c 	and.w	r3, r3, #12
 800107a:	2b08      	cmp	r3, #8
 800107c:	d1f9      	bne.n	8001072 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	40023800 	.word	0x40023800
 800108c:	40007000 	.word	0x40007000
 8001090:	07404b19 	.word	0x07404b19
 8001094:	40023c00 	.word	0x40023c00

08001098 <xTaskGenericCreate>:
	static portTickType prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;

#endif

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	; 0x28
 800109c:	af02      	add	r7, sp, #8
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	4613      	mov	r3, r2
 80010a6:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d102      	bne.n	80010b4 <xTaskGenericCreate+0x1c>
 80010ae:	f001 fb97 	bl	80027e0 <ulPortSetInterruptMask>
 80010b2:	e7fe      	b.n	80010b2 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 80010b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	d902      	bls.n	80010c0 <xTaskGenericCreate+0x28>
 80010ba:	f001 fb91 	bl	80027e0 <ulPortSetInterruptMask>
 80010be:	e7fe      	b.n	80010be <xTaskGenericCreate+0x26>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 80010c0:	88fb      	ldrh	r3, [r7, #6]
 80010c2:	4618      	mov	r0, r3
 80010c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80010c6:	f000 fd29 	bl	8001b1c <prvAllocateTCBAndStack>
 80010ca:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d072      	beq.n	80011b8 <xTaskGenericCreate+0x120>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80010dc:	3b01      	subs	r3, #1
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4413      	add	r3, r2
 80010e2:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	f023 0307 	bic.w	r3, r3, #7
 80010ea:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d002      	beq.n	80010fc <xTaskGenericCreate+0x64>
 80010f6:	f001 fb73 	bl	80027e0 <ulPortSetInterruptMask>
 80010fa:	e7fe      	b.n	80010fa <xTaskGenericCreate+0x62>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	69b8      	ldr	r0, [r7, #24]
 8001102:	68b9      	ldr	r1, [r7, #8]
 8001104:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001108:	f000 fc12 	bl	8001930 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800110c:	6978      	ldr	r0, [r7, #20]
 800110e:	68f9      	ldr	r1, [r7, #12]
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	f001 fa73 	bl	80025fc <pxPortInitialiseStack>
 8001116:	4602      	mov	r2, r0
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 800111c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111e:	2b00      	cmp	r3, #0
 8001120:	d002      	beq.n	8001128 <xTaskGenericCreate+0x90>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 8001122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	601a      	str	r2, [r3, #0]
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 8001128:	f001 fb38 	bl	800279c <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 800112c:	4b2e      	ldr	r3, [pc, #184]	; (80011e8 <xTaskGenericCreate+0x150>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	1c5a      	adds	r2, r3, #1
 8001132:	4b2d      	ldr	r3, [pc, #180]	; (80011e8 <xTaskGenericCreate+0x150>)
 8001134:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 8001136:	4b2d      	ldr	r3, [pc, #180]	; (80011ec <xTaskGenericCreate+0x154>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d109      	bne.n	8001152 <xTaskGenericCreate+0xba>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 800113e:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <xTaskGenericCreate+0x154>)
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 8001144:	4b28      	ldr	r3, [pc, #160]	; (80011e8 <xTaskGenericCreate+0x150>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d10f      	bne.n	800116c <xTaskGenericCreate+0xd4>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 800114c:	f000 fc38 	bl	80019c0 <prvInitialiseTaskLists>
 8001150:	e00c      	b.n	800116c <xTaskGenericCreate+0xd4>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8001152:	4b27      	ldr	r3, [pc, #156]	; (80011f0 <xTaskGenericCreate+0x158>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d108      	bne.n	800116c <xTaskGenericCreate+0xd4>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800115a:	4b24      	ldr	r3, [pc, #144]	; (80011ec <xTaskGenericCreate+0x154>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001162:	429a      	cmp	r2, r3
 8001164:	d802      	bhi.n	800116c <xTaskGenericCreate+0xd4>
					{
						pxCurrentTCB = pxNewTCB;
 8001166:	4b21      	ldr	r3, [pc, #132]	; (80011ec <xTaskGenericCreate+0x154>)
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	601a      	str	r2, [r3, #0]
					}
				}
			}

			uxTaskNumber++;
 800116c:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <xTaskGenericCreate+0x15c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <xTaskGenericCreate+0x15c>)
 8001174:	601a      	str	r2, [r3, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001176:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <xTaskGenericCreate+0x15c>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001182:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <xTaskGenericCreate+0x160>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	429a      	cmp	r2, r3
 8001188:	d903      	bls.n	8001192 <xTaskGenericCreate+0xfa>
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <xTaskGenericCreate+0x160>)
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001196:	4613      	mov	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4a17      	ldr	r2, [pc, #92]	; (80011fc <xTaskGenericCreate+0x164>)
 80011a0:	441a      	add	r2, r3
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	3304      	adds	r3, #4
 80011a6:	4610      	mov	r0, r2
 80011a8:	4619      	mov	r1, r3
 80011aa:	f001 f9a1 	bl	80024f0 <vListInsertEnd>

			xReturn = pdPASS;
 80011ae:	2301      	movs	r3, #1
 80011b0:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 80011b2:	f001 fb03 	bl	80027bc <vPortExitCritical>
 80011b6:	e002      	b.n	80011be <xTaskGenericCreate+0x126>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80011b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011bc:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d10b      	bne.n	80011dc <xTaskGenericCreate+0x144>
	{
		if( xSchedulerRunning != pdFALSE )
 80011c4:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <xTaskGenericCreate+0x158>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d007      	beq.n	80011dc <xTaskGenericCreate+0x144>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 80011cc:	4b07      	ldr	r3, [pc, #28]	; (80011ec <xTaskGenericCreate+0x154>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d201      	bcs.n	80011dc <xTaskGenericCreate+0x144>
			{
				portYIELD_WITHIN_API();
 80011d8:	f001 fad0 	bl	800277c <vPortYield>
			}
		}
	}

	return xReturn;
 80011dc:	69fb      	ldr	r3, [r7, #28]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3720      	adds	r7, #32
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000560 	.word	0x20000560
 80011ec:	20000488 	.word	0x20000488
 80011f0:	2000056c 	.word	0x2000056c
 80011f4:	20000580 	.word	0x20000580
 80011f8:	20000568 	.word	0x20000568
 80011fc:	2000048c 	.word	0x2000048c

08001200 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d012      	beq.n	8001238 <vTaskDelay+0x38>
		{
			vTaskSuspendAll();
 8001212:	f000 f855 	bl	80012c0 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8001216:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <vTaskDelay+0x48>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4413      	add	r3, r2
 800121e:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <vTaskDelay+0x4c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	3304      	adds	r3, #4
 8001226:	4618      	mov	r0, r3
 8001228:	f001 f9be 	bl	80025a8 <uxListRemove>
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800122c:	68b8      	ldr	r0, [r7, #8]
 800122e:	f000 fc3f 	bl	8001ab0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001232:	f000 f853 	bl	80012dc <xTaskResumeAll>
 8001236:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <vTaskDelay+0x42>
		{
			portYIELD_WITHIN_API();
 800123e:	f001 fa9d 	bl	800277c <vPortYield>
		}
	}
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000564 	.word	0x20000564
 800124c:	20000488 	.word	0x20000488

08001250 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 8001256:	2300      	movs	r3, #0
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2300      	movs	r3, #0
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	2300      	movs	r3, #0
 8001260:	9302      	str	r3, [sp, #8]
 8001262:	2300      	movs	r3, #0
 8001264:	9303      	str	r3, [sp, #12]
 8001266:	4812      	ldr	r0, [pc, #72]	; (80012b0 <vTaskStartScheduler+0x60>)
 8001268:	4912      	ldr	r1, [pc, #72]	; (80012b4 <vTaskStartScheduler+0x64>)
 800126a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800126e:	2300      	movs	r3, #0
 8001270:	f7ff ff12 	bl	8001098 <xTaskGenericCreate>
 8001274:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d102      	bne.n	8001282 <vTaskStartScheduler+0x32>
		{
			xReturn = xTimerCreateTimerTask();
 800127c:	f001 fb4a 	bl	8002914 <xTimerCreateTimerTask>
 8001280:	6078      	str	r0, [r7, #4]
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d10a      	bne.n	800129e <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8001288:	f001 faaa 	bl	80027e0 <ulPortSetInterruptMask>
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
 800128c:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <vTaskStartScheduler+0x68>)
 800128e:	2201      	movs	r2, #1
 8001290:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <vTaskStartScheduler+0x6c>)
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001298:	f001 fa0a 	bl	80026b0 <xPortStartScheduler>
 800129c:	e005      	b.n	80012aa <vTaskStartScheduler+0x5a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d102      	bne.n	80012aa <vTaskStartScheduler+0x5a>
 80012a4:	f001 fa9c 	bl	80027e0 <ulPortSetInterruptMask>
 80012a8:	e7fe      	b.n	80012a8 <vTaskStartScheduler+0x58>
	}
}
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	0800190d 	.word	0x0800190d
 80012b4:	08005974 	.word	0x08005974
 80012b8:	2000056c 	.word	0x2000056c
 80012bc:	20000564 	.word	0x20000564

080012c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 80012c4:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <vTaskSuspendAll+0x18>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	1c5a      	adds	r2, r3, #1
 80012ca:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <vTaskSuspendAll+0x18>)
 80012cc:	601a      	str	r2, [r3, #0]
}
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20000570 	.word	0x20000570

080012dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
tskTCB *pxTCB;
portBASE_TYPE xAlreadyYielded = pdFALSE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80012e6:	4b38      	ldr	r3, [pc, #224]	; (80013c8 <xTaskResumeAll+0xec>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d102      	bne.n	80012f4 <xTaskResumeAll+0x18>
 80012ee:	f001 fa77 	bl	80027e0 <ulPortSetInterruptMask>
 80012f2:	e7fe      	b.n	80012f2 <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80012f4:	f001 fa52 	bl	800279c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80012f8:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <xTaskResumeAll+0xec>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	1e5a      	subs	r2, r3, #1
 80012fe:	4b32      	ldr	r3, [pc, #200]	; (80013c8 <xTaskResumeAll+0xec>)
 8001300:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8001302:	4b31      	ldr	r3, [pc, #196]	; (80013c8 <xTaskResumeAll+0xec>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d156      	bne.n	80013b8 <xTaskResumeAll+0xdc>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 800130a:	4b30      	ldr	r3, [pc, #192]	; (80013cc <xTaskResumeAll+0xf0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d052      	beq.n	80013b8 <xTaskResumeAll+0xdc>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001312:	e02f      	b.n	8001374 <xTaskResumeAll+0x98>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001314:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <xTaskResumeAll+0xf4>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	3318      	adds	r3, #24
 8001320:	4618      	mov	r0, r3
 8001322:	f001 f941 	bl	80025a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	3304      	adds	r3, #4
 800132a:	4618      	mov	r0, r3
 800132c:	f001 f93c 	bl	80025a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001334:	4b27      	ldr	r3, [pc, #156]	; (80013d4 <xTaskResumeAll+0xf8>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	429a      	cmp	r2, r3
 800133a:	d903      	bls.n	8001344 <xTaskResumeAll+0x68>
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001340:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <xTaskResumeAll+0xf8>)
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001348:	4613      	mov	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4413      	add	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4a21      	ldr	r2, [pc, #132]	; (80013d8 <xTaskResumeAll+0xfc>)
 8001352:	441a      	add	r2, r3
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	3304      	adds	r3, #4
 8001358:	4610      	mov	r0, r2
 800135a:	4619      	mov	r1, r3
 800135c:	f001 f8c8 	bl	80024f0 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001364:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <xTaskResumeAll+0x100>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136a:	429a      	cmp	r2, r3
 800136c:	d302      	bcc.n	8001374 <xTaskResumeAll+0x98>
					{
						xYieldPending = pdTRUE;
 800136e:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <xTaskResumeAll+0x104>)
 8001370:	2201      	movs	r2, #1
 8001372:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001374:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <xTaskResumeAll+0xf4>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1cb      	bne.n	8001314 <xTaskResumeAll+0x38>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 800137c:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <xTaskResumeAll+0x108>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d011      	beq.n	80013a8 <xTaskResumeAll+0xcc>
				{
					while( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 8001384:	e00c      	b.n	80013a0 <xTaskResumeAll+0xc4>
					{
						if( xTaskIncrementTick() != pdFALSE )
 8001386:	f000 f841 	bl	800140c <xTaskIncrementTick>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <xTaskResumeAll+0xba>
						{
							xYieldPending = pdTRUE;
 8001390:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <xTaskResumeAll+0x104>)
 8001392:	2201      	movs	r2, #1
 8001394:	601a      	str	r2, [r3, #0]
						}
						--uxPendedTicks;
 8001396:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <xTaskResumeAll+0x108>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	1e5a      	subs	r2, r3, #1
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <xTaskResumeAll+0x108>)
 800139e:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 80013a0:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <xTaskResumeAll+0x108>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1ee      	bne.n	8001386 <xTaskResumeAll+0xaa>
						}
						--uxPendedTicks;
					}
				}

				if( xYieldPending == pdTRUE )
 80013a8:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <xTaskResumeAll+0x104>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d103      	bne.n	80013b8 <xTaskResumeAll+0xdc>
				{
					xAlreadyYielded = pdTRUE;
 80013b0:	2301      	movs	r3, #1
 80013b2:	607b      	str	r3, [r7, #4]
					portYIELD_WITHIN_API();
 80013b4:	f001 f9e2 	bl	800277c <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 80013b8:	f001 fa00 	bl	80027bc <vPortExitCritical>

	return xAlreadyYielded;
 80013bc:	687b      	ldr	r3, [r7, #4]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000570 	.word	0x20000570
 80013cc:	20000560 	.word	0x20000560
 80013d0:	20000520 	.word	0x20000520
 80013d4:	20000568 	.word	0x20000568
 80013d8:	2000048c 	.word	0x2000048c
 80013dc:	20000488 	.word	0x20000488
 80013e0:	20000578 	.word	0x20000578
 80013e4:	20000574 	.word	0x20000574

080013e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCount( void )
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 80013ee:	f001 f9d5 	bl	800279c <vPortEnterCritical>
	{
		xTicks = xTickCount;
 80013f2:	4b05      	ldr	r3, [pc, #20]	; (8001408 <xTaskGetTickCount+0x20>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
 80013f8:	f001 f9e0 	bl	80027bc <vPortExitCritical>

	return xTicks;
 80013fc:	687b      	ldr	r3, [r7, #4]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000564 	.word	0x20000564

0800140c <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

portBASE_TYPE xTaskIncrementTick( void )
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
tskTCB * pxTCB;
portTickType xItemValue;
portBASE_TYPE xSwitchRequired = pdFALSE;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8001416:	4b5d      	ldr	r3, [pc, #372]	; (800158c <xTaskIncrementTick+0x180>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	f040 80a4 	bne.w	8001568 <xTaskIncrementTick+0x15c>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8001420:	4b5b      	ldr	r3, [pc, #364]	; (8001590 <xTaskIncrementTick+0x184>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	1c5a      	adds	r2, r3, #1
 8001426:	4b5a      	ldr	r3, [pc, #360]	; (8001590 <xTaskIncrementTick+0x184>)
 8001428:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const portTickType xConstTickCount = xTickCount;
 800142a:	4b59      	ldr	r3, [pc, #356]	; (8001590 <xTaskIncrementTick+0x184>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( portTickType ) 0U )
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d12e      	bne.n	8001494 <xTaskIncrementTick+0x88>
			{
				taskSWITCH_DELAYED_LISTS();
 8001436:	4b57      	ldr	r3, [pc, #348]	; (8001594 <xTaskIncrementTick+0x188>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d002      	beq.n	8001446 <xTaskIncrementTick+0x3a>
 8001440:	f001 f9ce 	bl	80027e0 <ulPortSetInterruptMask>
 8001444:	e7fe      	b.n	8001444 <xTaskIncrementTick+0x38>
 8001446:	4b53      	ldr	r3, [pc, #332]	; (8001594 <xTaskIncrementTick+0x188>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	4b52      	ldr	r3, [pc, #328]	; (8001598 <xTaskIncrementTick+0x18c>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b50      	ldr	r3, [pc, #320]	; (8001594 <xTaskIncrementTick+0x188>)
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	4b50      	ldr	r3, [pc, #320]	; (8001598 <xTaskIncrementTick+0x18c>)
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	4b50      	ldr	r3, [pc, #320]	; (800159c <xTaskIncrementTick+0x190>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	4b4e      	ldr	r3, [pc, #312]	; (800159c <xTaskIncrementTick+0x190>)
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	4b4b      	ldr	r3, [pc, #300]	; (8001594 <xTaskIncrementTick+0x188>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <xTaskIncrementTick+0x66>
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <xTaskIncrementTick+0x68>
 8001472:	2300      	movs	r3, #0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d004      	beq.n	8001482 <xTaskIncrementTick+0x76>
 8001478:	4b49      	ldr	r3, [pc, #292]	; (80015a0 <xTaskIncrementTick+0x194>)
 800147a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	e008      	b.n	8001494 <xTaskIncrementTick+0x88>
 8001482:	4b44      	ldr	r3, [pc, #272]	; (8001594 <xTaskIncrementTick+0x188>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	4b43      	ldr	r3, [pc, #268]	; (80015a0 <xTaskIncrementTick+0x194>)
 8001492:	601a      	str	r2, [r3, #0]

			/* See if this tick has made a timeout expire.  Tasks are stored in the
			queue in the order of their wake time - meaning once one tasks has been
			found whose block time has not expired there is no need not look any
			further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8001494:	4b42      	ldr	r3, [pc, #264]	; (80015a0 <xTaskIncrementTick+0x194>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	429a      	cmp	r2, r3
 800149c:	d34f      	bcc.n	800153e <xTaskIncrementTick+0x132>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800149e:	4b3d      	ldr	r3, [pc, #244]	; (8001594 <xTaskIncrementTick+0x188>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <xTaskIncrementTick+0xa0>
 80014a8:	2301      	movs	r3, #1
 80014aa:	e000      	b.n	80014ae <xTaskIncrementTick+0xa2>
 80014ac:	2300      	movs	r3, #0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d004      	beq.n	80014bc <xTaskIncrementTick+0xb0>
					{
						/* The delayed list is empty.  Set xNextTaskUnblockTime to
						the	maximum possible value so it is extremely unlikely that
						the if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 80014b2:	4b3b      	ldr	r3, [pc, #236]	; (80015a0 <xTaskIncrementTick+0x194>)
 80014b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014b8:	601a      	str	r2, [r3, #0]
						break;
 80014ba:	e040      	b.n	800153e <xTaskIncrementTick+0x132>
					{
						/* The delayed list is not empty, get the value of the item
						at the head of the delayed list.  This is the time at which
						the task at the head of the delayed list must be removed
						from the Blocked state. */
						pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80014bc:	4b35      	ldr	r3, [pc, #212]	; (8001594 <xTaskIncrementTick+0x188>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d203      	bcs.n	80014dc <xTaskIncrementTick+0xd0>
						{
							/* It is not time to unblock this item yet, but the item
							value is the time at which the task at the head of the
							blocked list must be removed from the Blocked state -
							so record the item value in xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 80014d4:	4b32      	ldr	r3, [pc, #200]	; (80015a0 <xTaskIncrementTick+0x194>)
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	601a      	str	r2, [r3, #0]
							break;
 80014da:	e030      	b.n	800153e <xTaskIncrementTick+0x132>
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	3304      	adds	r3, #4
 80014e0:	4618      	mov	r0, r3
 80014e2:	f001 f861 	bl	80025a8 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove it
						from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d004      	beq.n	80014f8 <xTaskIncrementTick+0xec>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	3318      	adds	r3, #24
 80014f2:	4618      	mov	r0, r3
 80014f4:	f001 f858 	bl	80025a8 <uxListRemove>
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014fc:	4b29      	ldr	r3, [pc, #164]	; (80015a4 <xTaskIncrementTick+0x198>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	429a      	cmp	r2, r3
 8001502:	d903      	bls.n	800150c <xTaskIncrementTick+0x100>
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001508:	4b26      	ldr	r3, [pc, #152]	; (80015a4 <xTaskIncrementTick+0x198>)
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4a23      	ldr	r2, [pc, #140]	; (80015a8 <xTaskIncrementTick+0x19c>)
 800151a:	441a      	add	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	3304      	adds	r3, #4
 8001520:	4610      	mov	r0, r2
 8001522:	4619      	mov	r1, r3
 8001524:	f000 ffe4 	bl	80024f0 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should only
							be performed if the unblocked task has a priority that
							is equal to or higher than the currently executing
							task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800152c:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <xTaskIncrementTick+0x1a0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001532:	429a      	cmp	r2, r3
 8001534:	d302      	bcc.n	800153c <xTaskIncrementTick+0x130>
							{
								xSwitchRequired = pdTRUE;
 8001536:	2301      	movs	r3, #1
 8001538:	617b      	str	r3, [r7, #20]
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
 800153a:	e7b0      	b.n	800149e <xTaskIncrementTick+0x92>
 800153c:	e7af      	b.n	800149e <xTaskIncrementTick+0x92>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 800153e:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <xTaskIncrementTick+0x1a0>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001544:	4918      	ldr	r1, [pc, #96]	; (80015a8 <xTaskIncrementTick+0x19c>)
 8001546:	4613      	mov	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	440b      	add	r3, r1
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d901      	bls.n	800155a <xTaskIncrementTick+0x14e>
			{
				xSwitchRequired = pdTRUE;
 8001556:	2301      	movs	r3, #1
 8001558:	617b      	str	r3, [r7, #20]
		
		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( unsigned portBASE_TYPE ) 0U )
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <xTaskIncrementTick+0x1a4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d109      	bne.n	8001576 <xTaskIncrementTick+0x16a>
			{
				vApplicationTickHook();
 8001562:	f7ff fbdd 	bl	8000d20 <vApplicationTickHook>
 8001566:	e006      	b.n	8001576 <xTaskIncrementTick+0x16a>
		}
		#endif /* configUSE_TICK_HOOK */		
	}
	else
	{
		++uxPendedTicks;
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <xTaskIncrementTick+0x1a4>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	1c5a      	adds	r2, r3, #1
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <xTaskIncrementTick+0x1a4>)
 8001570:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8001572:	f7ff fbd5 	bl	8000d20 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <xTaskIncrementTick+0x1a8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <xTaskIncrementTick+0x176>
		{
			xSwitchRequired = pdTRUE;
 800157e:	2301      	movs	r3, #1
 8001580:	617b      	str	r3, [r7, #20]
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001582:	697b      	ldr	r3, [r7, #20]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000570 	.word	0x20000570
 8001590:	20000564 	.word	0x20000564
 8001594:	20000518 	.word	0x20000518
 8001598:	2000051c 	.word	0x2000051c
 800159c:	2000057c 	.word	0x2000057c
 80015a0:	20000014 	.word	0x20000014
 80015a4:	20000568 	.word	0x20000568
 80015a8:	2000048c 	.word	0x2000048c
 80015ac:	20000488 	.word	0x20000488
 80015b0:	20000574 	.word	0x20000574
 80015b4:	20000578 	.word	0x20000578

080015b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 80015be:	4b35      	ldr	r3, [pc, #212]	; (8001694 <vTaskSwitchContext+0xdc>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80015c6:	4b34      	ldr	r3, [pc, #208]	; (8001698 <vTaskSwitchContext+0xe0>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	e05e      	b.n	800168c <vTaskSwitchContext+0xd4>
	}
	else
	{
		xYieldPending = pdFALSE;
 80015ce:	4b32      	ldr	r3, [pc, #200]	; (8001698 <vTaskSwitchContext+0xe0>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
				}
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 80015d4:	4b31      	ldr	r3, [pc, #196]	; (800169c <vTaskSwitchContext+0xe4>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	4b30      	ldr	r3, [pc, #192]	; (800169c <vTaskSwitchContext+0xe4>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d808      	bhi.n	80015f6 <vTaskSwitchContext+0x3e>
 80015e4:	4b2d      	ldr	r3, [pc, #180]	; (800169c <vTaskSwitchContext+0xe4>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b2c      	ldr	r3, [pc, #176]	; (800169c <vTaskSwitchContext+0xe4>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	3334      	adds	r3, #52	; 0x34
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	f7ff fbe3 	bl	8000dbc <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 80015f6:	4b29      	ldr	r3, [pc, #164]	; (800169c <vTaskSwitchContext+0xe4>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fc:	4618      	mov	r0, r3
 80015fe:	4928      	ldr	r1, [pc, #160]	; (80016a0 <vTaskSwitchContext+0xe8>)
 8001600:	2214      	movs	r2, #20
 8001602:	f004 f881 	bl	8005708 <memcmp>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d009      	beq.n	8001620 <vTaskSwitchContext+0x68>
 800160c:	4b23      	ldr	r3, [pc, #140]	; (800169c <vTaskSwitchContext+0xe4>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b22      	ldr	r3, [pc, #136]	; (800169c <vTaskSwitchContext+0xe4>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	3334      	adds	r3, #52	; 0x34
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	f7ff fbcf 	bl	8000dbc <vApplicationStackOverflowHook>

		taskSELECT_HIGHEST_PRIORITY_TASK();
 800161e:	e00c      	b.n	800163a <vTaskSwitchContext+0x82>
 8001620:	e00b      	b.n	800163a <vTaskSwitchContext+0x82>
 8001622:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <vTaskSwitchContext+0xec>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d102      	bne.n	8001630 <vTaskSwitchContext+0x78>
 800162a:	f001 f8d9 	bl	80027e0 <ulPortSetInterruptMask>
 800162e:	e7fe      	b.n	800162e <vTaskSwitchContext+0x76>
 8001630:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <vTaskSwitchContext+0xec>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	1e5a      	subs	r2, r3, #1
 8001636:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <vTaskSwitchContext+0xec>)
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <vTaskSwitchContext+0xec>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	491a      	ldr	r1, [pc, #104]	; (80016a8 <vTaskSwitchContext+0xf0>)
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0e8      	beq.n	8001622 <vTaskSwitchContext+0x6a>
 8001650:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <vTaskSwitchContext+0xec>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4613      	mov	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <vTaskSwitchContext+0xf0>)
 800165e:	4413      	add	r3, r2
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3308      	adds	r3, #8
 8001674:	429a      	cmp	r2, r3
 8001676:	d104      	bne.n	8001682 <vTaskSwitchContext+0xca>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	68da      	ldr	r2, [r3, #12]
 8001688:	4b04      	ldr	r3, [pc, #16]	; (800169c <vTaskSwitchContext+0xe4>)
 800168a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000570 	.word	0x20000570
 8001698:	20000578 	.word	0x20000578
 800169c:	20000488 	.word	0x20000488
 80016a0:	08005b74 	.word	0x08005b74
 80016a4:	20000568 	.word	0x20000568
 80016a8:	2000048c 	.word	0x2000048c

080016ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( xList * const pxEventList, portTickType xTicksToWait )
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d102      	bne.n	80016c2 <vTaskPlaceOnEventList+0x16>
 80016bc:	f001 f890 	bl	80027e0 <ulPortSetInterruptMask>
 80016c0:	e7fe      	b.n	80016c0 <vTaskPlaceOnEventList+0x14>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80016c2:	4b12      	ldr	r3, [pc, #72]	; (800170c <vTaskPlaceOnEventList+0x60>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	3318      	adds	r3, #24
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	4619      	mov	r1, r3
 80016cc:	f000 ff34 	bl	8002538 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 80016d0:	4b0e      	ldr	r3, [pc, #56]	; (800170c <vTaskPlaceOnEventList+0x60>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	3304      	adds	r3, #4
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 ff66 	bl	80025a8 <uxListRemove>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016e2:	d107      	bne.n	80016f4 <vTaskPlaceOnEventList+0x48>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80016e4:	4b09      	ldr	r3, [pc, #36]	; (800170c <vTaskPlaceOnEventList+0x60>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	3304      	adds	r3, #4
 80016ea:	4809      	ldr	r0, [pc, #36]	; (8001710 <vTaskPlaceOnEventList+0x64>)
 80016ec:	4619      	mov	r1, r3
 80016ee:	f000 feff 	bl	80024f0 <vListInsertEnd>
 80016f2:	e007      	b.n	8001704 <vTaskPlaceOnEventList+0x58>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 80016f4:	4b07      	ldr	r3, [pc, #28]	; (8001714 <vTaskPlaceOnEventList+0x68>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	4413      	add	r3, r2
 80016fc:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f000 f9d6 	bl	8001ab0 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000488 	.word	0x20000488
 8001710:	2000054c 	.word	0x2000054c
 8001714:	20000564 	.word	0x20000564

08001718 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( xList * const pxEventList, portTickType xTicksToWait )
	{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d102      	bne.n	800172e <vTaskPlaceOnEventListRestricted+0x16>
 8001728:	f001 f85a 	bl	80027e0 <ulPortSetInterruptMask>
 800172c:	e7fe      	b.n	800172c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800172e:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <vTaskPlaceOnEventListRestricted+0x48>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	3318      	adds	r3, #24
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	4619      	mov	r1, r3
 8001738:	f000 feda 	bl	80024f0 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <vTaskPlaceOnEventListRestricted+0x48>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	3304      	adds	r3, #4
 8001742:	4618      	mov	r0, r3
 8001744:	f000 ff30 	bl	80025a8 <uxListRemove>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <vTaskPlaceOnEventListRestricted+0x4c>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	4413      	add	r3, r2
 8001750:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	f000 f9ac 	bl	8001ab0 <prvAddCurrentTaskToDelayedList>
	}
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000488 	.word	0x20000488
 8001764:	20000564 	.word	0x20000564

08001768 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d102      	bne.n	8001784 <xTaskRemoveFromEventList+0x1c>
 800177e:	f001 f82f 	bl	80027e0 <ulPortSetInterruptMask>
 8001782:	e7fe      	b.n	8001782 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	3318      	adds	r3, #24
 8001788:	4618      	mov	r0, r3
 800178a:	f000 ff0d 	bl	80025a8 <uxListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 800178e:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <xTaskRemoveFromEventList+0xa0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d11d      	bne.n	80017d2 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	3304      	adds	r3, #4
 800179a:	4618      	mov	r0, r3
 800179c:	f000 ff04 	bl	80025a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017a4:	4b19      	ldr	r3, [pc, #100]	; (800180c <xTaskRemoveFromEventList+0xa4>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d903      	bls.n	80017b4 <xTaskRemoveFromEventList+0x4c>
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017b0:	4b16      	ldr	r3, [pc, #88]	; (800180c <xTaskRemoveFromEventList+0xa4>)
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4a13      	ldr	r2, [pc, #76]	; (8001810 <xTaskRemoveFromEventList+0xa8>)
 80017c2:	441a      	add	r2, r3
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	3304      	adds	r3, #4
 80017c8:	4610      	mov	r0, r2
 80017ca:	4619      	mov	r1, r3
 80017cc:	f000 fe90 	bl	80024f0 <vListInsertEnd>
 80017d0:	e005      	b.n	80017de <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	3318      	adds	r3, #24
 80017d6:	480f      	ldr	r0, [pc, #60]	; (8001814 <xTaskRemoveFromEventList+0xac>)
 80017d8:	4619      	mov	r1, r3
 80017da:	f000 fe89 	bl	80024f0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017e2:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <xTaskRemoveFromEventList+0xb0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d305      	bcc.n	80017f8 <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 80017ec:	2301      	movs	r3, #1
 80017ee:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80017f0:	4b0a      	ldr	r3, [pc, #40]	; (800181c <xTaskRemoveFromEventList+0xb4>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	e001      	b.n	80017fc <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80017fc:	68fb      	ldr	r3, [r7, #12]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000570 	.word	0x20000570
 800180c:	20000568 	.word	0x20000568
 8001810:	2000048c 	.word	0x2000048c
 8001814:	20000520 	.word	0x20000520
 8001818:	20000488 	.word	0x20000488
 800181c:	20000578 	.word	0x20000578

08001820 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d102      	bne.n	8001834 <vTaskSetTimeOutState+0x14>
 800182e:	f000 ffd7 	bl	80027e0 <ulPortSetInterruptMask>
 8001832:	e7fe      	b.n	8001832 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <vTaskSetTimeOutState+0x2c>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800183c:	4b04      	ldr	r3, [pc, #16]	; (8001850 <vTaskSetTimeOutState+0x30>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	605a      	str	r2, [r3, #4]
}
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	2000057c 	.word	0x2000057c
 8001850:	20000564 	.word	0x20000564

08001854 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d102      	bne.n	800186a <xTaskCheckForTimeOut+0x16>
 8001864:	f000 ffbc 	bl	80027e0 <ulPortSetInterruptMask>
 8001868:	e7fe      	b.n	8001868 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d102      	bne.n	8001876 <xTaskCheckForTimeOut+0x22>
 8001870:	f000 ffb6 	bl	80027e0 <ulPortSetInterruptMask>
 8001874:	e7fe      	b.n	8001874 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 8001876:	f000 ff91 	bl	800279c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const portTickType xConstTickCount = xTickCount;
 800187a:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <xTaskCheckForTimeOut+0x98>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001888:	d102      	bne.n	8001890 <xTaskCheckForTimeOut+0x3c>
			{
				xReturn = pdFALSE;
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	e026      	b.n	80018de <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <xTaskCheckForTimeOut+0x9c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	429a      	cmp	r2, r3
 800189a:	d007      	beq.n	80018ac <xTaskCheckForTimeOut+0x58>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d802      	bhi.n	80018ac <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 80018a6:	2301      	movs	r3, #1
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	e018      	b.n	80018de <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	68ba      	ldr	r2, [r7, #8]
 80018b2:	1ad2      	subs	r2, r2, r3
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d20e      	bcs.n	80018da <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6859      	ldr	r1, [r3, #4]
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	1acb      	subs	r3, r1, r3
 80018c8:	441a      	add	r2, r3
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff ffa6 	bl	8001820 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	e001      	b.n	80018de <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
 80018da:	2301      	movs	r3, #1
 80018dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80018de:	f000 ff6d 	bl	80027bc <vPortExitCritical>

	return xReturn;
 80018e2:	68fb      	ldr	r3, [r7, #12]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000564 	.word	0x20000564
 80018f0:	2000057c 	.word	0x2000057c

080018f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <vTaskMissedYield+0x14>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	601a      	str	r2, [r3, #0]
}
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000578 	.word	0x20000578

0800190c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 8001914:	f000 f892 	bl	8001a3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1U )
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <prvIdleTask+0x20>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d901      	bls.n	8001924 <prvIdleTask+0x18>
			{
				taskYIELD();
 8001920:	f000 ff2c 	bl	800277c <vPortYield>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8001924:	f7ff fa44 	bl	8000db0 <vApplicationIdleHook>
				}
				( void ) xTaskResumeAll();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8001928:	e7f4      	b.n	8001914 <prvIdleTask+0x8>
 800192a:	bf00      	nop
 800192c:	2000048c 	.word	0x2000048c

08001930 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
 800193c:	603b      	str	r3, [r7, #0]
unsigned portBASE_TYPE x;

	/* Store the task name in the TCB. */
	for( x = ( unsigned portBASE_TYPE ) 0; x < ( unsigned portBASE_TYPE ) configMAX_TASK_NAME_LEN; x++ )
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	e012      	b.n	800196a <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8001944:	68ba      	ldr	r2, [r7, #8]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	4413      	add	r3, r2
 800194a:	781a      	ldrb	r2, [r3, #0]
 800194c:	68f9      	ldr	r1, [r7, #12]
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	440b      	add	r3, r1
 8001952:	3330      	adds	r3, #48	; 0x30
 8001954:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	4413      	add	r3, r2
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d100      	bne.n	8001964 <prvInitialiseTCBVariables+0x34>
		{
			break;
 8001962:	e005      	b.n	8001970 <prvInitialiseTCBVariables+0x40>
static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
unsigned portBASE_TYPE x;

	/* Store the task name in the TCB. */
	for( x = ( unsigned portBASE_TYPE ) 0; x < ( unsigned portBASE_TYPE ) configMAX_TASK_NAME_LEN; x++ )
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	3301      	adds	r3, #1
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	2b09      	cmp	r3, #9
 800196e:	d9e9      	bls.n	8001944 <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = ( signed char ) '\0';
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( unsigned portBASE_TYPE ) configMAX_PRIORITIES )
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b04      	cmp	r3, #4
 800197c:	d901      	bls.n	8001982 <prvInitialiseTCBVariables+0x52>
	{
		uxPriority = ( unsigned portBASE_TYPE ) configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 800197e:	2304      	movs	r3, #4
 8001980:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	3304      	adds	r3, #4
 8001992:	4618      	mov	r0, r3
 8001994:	f000 fda0 	bl	80024d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	3318      	adds	r3, #24
 800199c:	4618      	mov	r0, r3
 800199e:	f000 fd9b 	bl	80024d8 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f1c3 0205 	rsb	r2, r3, #5
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop

080019c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < ( unsigned portBASE_TYPE ) configMAX_PRIORITIES; uxPriority++ )
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	e00c      	b.n	80019e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	4613      	mov	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4a11      	ldr	r2, [pc, #68]	; (8001a1c <prvInitialiseTaskLists+0x5c>)
 80019d8:	4413      	add	r3, r2
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 fd5c 	bl	8002498 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < ( unsigned portBASE_TYPE ) configMAX_PRIORITIES; uxPriority++ )
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3301      	adds	r3, #1
 80019e4:	607b      	str	r3, [r7, #4]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d9ef      	bls.n	80019cc <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 80019ec:	480c      	ldr	r0, [pc, #48]	; (8001a20 <prvInitialiseTaskLists+0x60>)
 80019ee:	f000 fd53 	bl	8002498 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80019f2:	480c      	ldr	r0, [pc, #48]	; (8001a24 <prvInitialiseTaskLists+0x64>)
 80019f4:	f000 fd50 	bl	8002498 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80019f8:	480b      	ldr	r0, [pc, #44]	; (8001a28 <prvInitialiseTaskLists+0x68>)
 80019fa:	f000 fd4d 	bl	8002498 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80019fe:	480b      	ldr	r0, [pc, #44]	; (8001a2c <prvInitialiseTaskLists+0x6c>)
 8001a00:	f000 fd4a 	bl	8002498 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001a04:	480a      	ldr	r0, [pc, #40]	; (8001a30 <prvInitialiseTaskLists+0x70>)
 8001a06:	f000 fd47 	bl	8002498 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <prvInitialiseTaskLists+0x74>)
 8001a0c:	4a04      	ldr	r2, [pc, #16]	; (8001a20 <prvInitialiseTaskLists+0x60>)
 8001a0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001a10:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <prvInitialiseTaskLists+0x78>)
 8001a12:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <prvInitialiseTaskLists+0x64>)
 8001a14:	601a      	str	r2, [r3, #0]
}
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	2000048c 	.word	0x2000048c
 8001a20:	200004f0 	.word	0x200004f0
 8001a24:	20000504 	.word	0x20000504
 8001a28:	20000520 	.word	0x20000520
 8001a2c:	20000534 	.word	0x20000534
 8001a30:	2000054c 	.word	0x2000054c
 8001a34:	20000518 	.word	0x20000518
 8001a38:	2000051c 	.word	0x2000051c

08001a3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8001a42:	e028      	b.n	8001a96 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8001a44:	f7ff fc3c 	bl	80012c0 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001a48:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <prvCheckTasksWaitingTermination+0x68>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	bf14      	ite	ne
 8001a50:	2300      	movne	r3, #0
 8001a52:	2301      	moveq	r3, #1
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	607b      	str	r3, [r7, #4]
			( void ) xTaskResumeAll();
 8001a58:	f7ff fc40 	bl	80012dc <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d119      	bne.n	8001a96 <prvCheckTasksWaitingTermination+0x5a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 8001a62:	f000 fe9b 	bl	800279c <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001a66:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <prvCheckTasksWaitingTermination+0x68>)
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	3304      	adds	r3, #4
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 fd98 	bl	80025a8 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8001a78:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <prvCheckTasksWaitingTermination+0x6c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	1e5a      	subs	r2, r3, #1
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <prvCheckTasksWaitingTermination+0x6c>)
 8001a80:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 8001a82:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <prvCheckTasksWaitingTermination+0x70>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	1e5a      	subs	r2, r3, #1
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <prvCheckTasksWaitingTermination+0x70>)
 8001a8a:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 8001a8c:	f000 fe96 	bl	80027bc <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8001a90:	6838      	ldr	r0, [r7, #0]
 8001a92:	f000 f875 	bl	8001b80 <prvDeleteTCB>
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8001a96:	4b05      	ldr	r3, [pc, #20]	; (8001aac <prvCheckTasksWaitingTermination+0x70>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1d2      	bne.n	8001a44 <prvCheckTasksWaitingTermination+0x8>
				prvDeleteTCB( pxTCB );
			}
		}
	}
	#endif /* vTaskDelete */
}
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000534 	.word	0x20000534
 8001aa8:	20000560 	.word	0x20000560
 8001aac:	20000548 	.word	0x20000548

08001ab0 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8001ab8:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <prvAddCurrentTaskToDelayedList+0x58>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <prvAddCurrentTaskToDelayedList+0x5c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d209      	bcs.n	8001ade <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8001aca:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <prvAddCurrentTaskToDelayedList+0x60>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <prvAddCurrentTaskToDelayedList+0x58>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	3304      	adds	r3, #4
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f000 fd2e 	bl	8002538 <vListInsert>
 8001adc:	e010      	b.n	8001b00 <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8001ade:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <prvAddCurrentTaskToDelayedList+0x64>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <prvAddCurrentTaskToDelayedList+0x58>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	3304      	adds	r3, #4
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	f000 fd24 	bl	8002538 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <prvAddCurrentTaskToDelayedList+0x68>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d202      	bcs.n	8001b00 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
 8001afa:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <prvAddCurrentTaskToDelayedList+0x68>)
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000488 	.word	0x20000488
 8001b0c:	20000564 	.word	0x20000564
 8001b10:	2000051c 	.word	0x2000051c
 8001b14:	20000518 	.word	0x20000518
 8001b18:	20000014 	.word	0x20000014

08001b1c <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	6039      	str	r1, [r7, #0]
 8001b26:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 8001b28:	204c      	movs	r0, #76	; 0x4c
 8001b2a:	f001 fb37 	bl	800319c <pvPortMalloc>
 8001b2e:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d01f      	beq.n	8001b76 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d106      	bne.n	8001b4a <prvAllocateTCBAndStack+0x2e>
 8001b3c:	88fb      	ldrh	r3, [r7, #6]
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4618      	mov	r0, r3
 8001b42:	f001 fb2b 	bl	800319c <pvPortMalloc>
 8001b46:	4603      	mov	r3, r0
 8001b48:	e000      	b.n	8001b4c <prvAllocateTCBAndStack+0x30>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d105      	bne.n	8001b64 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f001 fbab 	bl	80032b4 <vPortFree>
			pxNewTCB = NULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	e008      	b.n	8001b76 <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b68:	88fb      	ldrh	r3, [r7, #6]
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	21a5      	movs	r1, #165	; 0xa5
 8001b70:	461a      	mov	r2, r3
 8001b72:	f003 fdfd 	bl	8005770 <memset>
		}
	}

	return pxNewTCB;
 8001b76:	68fb      	ldr	r3, [r7, #12]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f001 fb91 	bl	80032b4 <vPortFree>
		vPortFree( pxTCB );
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f001 fb8e 	bl	80032b4 <vPortFree>
	}
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop

08001ba0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8001ba6:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <xTaskGetCurrentTaskHandle+0x1c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	607b      	str	r3, [r7, #4]

		return xReturn;
 8001bac:	687b      	ldr	r3, [r7, #4]
	}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000488 	.word	0x20000488

08001bc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <xTaskGetSchedulerState+0x34>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d102      	bne.n	8001bd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	607b      	str	r3, [r7, #4]
 8001bd2:	e008      	b.n	8001be6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <xTaskGetSchedulerState+0x38>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d102      	bne.n	8001be2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	607b      	str	r3, [r7, #4]
 8001be0:	e001      	b.n	8001be6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001be2:	2302      	movs	r3, #2
 8001be4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001be6:	687b      	ldr	r3, [r7, #4]
	}
 8001be8:	4618      	mov	r0, r3
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	2000056c 	.word	0x2000056c
 8001bf8:	20000570 	.word	0x20000570

08001bfc <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle const pxMutexHolder )
	{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d046      	beq.n	8001c9c <vTaskPriorityInherit+0xa0>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c12:	4b24      	ldr	r3, [pc, #144]	; (8001ca4 <vTaskPriorityInherit+0xa8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d23f      	bcs.n	8001c9c <vTaskPriorityInherit+0xa0>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c1c:	4b21      	ldr	r3, [pc, #132]	; (8001ca4 <vTaskPriorityInherit+0xa8>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c22:	f1c3 0205 	rsb	r2, r3, #5
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6959      	ldr	r1, [r3, #20]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4a1b      	ldr	r2, [pc, #108]	; (8001ca8 <vTaskPriorityInherit+0xac>)
 8001c3c:	4413      	add	r3, r2
 8001c3e:	4299      	cmp	r1, r3
 8001c40:	d101      	bne.n	8001c46 <vTaskPriorityInherit+0x4a>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <vTaskPriorityInherit+0x4c>
 8001c46:	2300      	movs	r3, #0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d022      	beq.n	8001c92 <vTaskPriorityInherit+0x96>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	3304      	adds	r3, #4
 8001c50:	4618      	mov	r0, r3
 8001c52:	f000 fca9 	bl	80025a8 <uxListRemove>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001c56:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <vTaskPriorityInherit+0xa8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c64:	4b11      	ldr	r3, [pc, #68]	; (8001cac <vTaskPriorityInherit+0xb0>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d903      	bls.n	8001c74 <vTaskPriorityInherit+0x78>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c70:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <vTaskPriorityInherit+0xb0>)
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4a09      	ldr	r2, [pc, #36]	; (8001ca8 <vTaskPriorityInherit+0xac>)
 8001c82:	441a      	add	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	3304      	adds	r3, #4
 8001c88:	4610      	mov	r0, r2
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	f000 fc30 	bl	80024f0 <vListInsertEnd>
 8001c90:	e004      	b.n	8001c9c <vTaskPriorityInherit+0xa0>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001c92:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <vTaskPriorityInherit+0xa8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000488 	.word	0x20000488
 8001ca8:	2000048c 	.word	0x2000048c
 8001cac:	20000568 	.word	0x20000568

08001cb0 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle const pxMutexHolder )
	{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d02c      	beq.n	8001d1c <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d026      	beq.n	8001d1c <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f000 fc68 	bl	80025a8 <uxListRemove>
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	f1c3 0205 	rsb	r2, r3, #5
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyList( pxTCB );
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <vTaskPriorityDisinherit+0x74>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d903      	bls.n	8001d00 <vTaskPriorityDisinherit+0x50>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cfc:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <vTaskPriorityDisinherit+0x74>)
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d04:	4613      	mov	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4a06      	ldr	r2, [pc, #24]	; (8001d28 <vTaskPriorityDisinherit+0x78>)
 8001d0e:	441a      	add	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	3304      	adds	r3, #4
 8001d14:	4610      	mov	r0, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	f000 fbea 	bl	80024f0 <vListInsertEnd>
			}
		}
	}
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000568 	.word	0x20000568
 8001d28:	2000048c 	.word	0x2000048c

08001d2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle xQueue, portBASE_TYPE xNewQueue )
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d102      	bne.n	8001d46 <xQueueGenericReset+0x1a>
 8001d40:	f000 fd4e 	bl	80027e0 <ulPortSetInterruptMask>
 8001d44:	e7fe      	b.n	8001d44 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 8001d46:	f000 fd29 	bl	800279c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d52:	68f9      	ldr	r1, [r7, #12]
 8001d54:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001d56:	fb01 f303 	mul.w	r3, r1, r3
 8001d5a:	441a      	add	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2200      	movs	r2, #0
 8001d64:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d76:	3b01      	subs	r3, #1
 8001d78:	68f9      	ldr	r1, [r7, #12]
 8001d7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001d7c:	fb01 f303 	mul.w	r3, r1, r3
 8001d80:	441a      	add	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d8c:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d94:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10e      	bne.n	8001dba <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d014      	beq.n	8001dce <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	3310      	adds	r3, #16
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff fcdd 	bl	8001768 <xTaskRemoveFromEventList>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d10c      	bne.n	8001dce <xQueueGenericReset+0xa2>
				{
					portYIELD_WITHIN_API();
 8001db4:	f000 fce2 	bl	800277c <vPortYield>
 8001db8:	e009      	b.n	8001dce <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	3310      	adds	r3, #16
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 fb6a 	bl	8002498 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	3324      	adds	r3, #36	; 0x24
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f000 fb65 	bl	8002498 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001dce:	f000 fcf5 	bl	80027bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001dd2:	2301      	movs	r3, #1
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b088      	sub	sp, #32
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	4613      	mov	r3, r2
 8001de8:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d02a      	beq.n	8001e4a <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 8001df4:	2050      	movs	r0, #80	; 0x50
 8001df6:	f001 f9d1 	bl	800319c <pvPortMalloc>
 8001dfa:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d023      	beq.n	8001e4a <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	fb02 f303 	mul.w	r3, r2, r3
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 8001e0e:	6978      	ldr	r0, [r7, #20]
 8001e10:	f001 f9c4 	bl	800319c <pvPortMalloc>
 8001e14:	4602      	mov	r2, r0
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d010      	beq.n	8001e44 <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001e2e:	69b8      	ldr	r0, [r7, #24]
 8001e30:	2101      	movs	r1, #1
 8001e32:	f7ff ff7b 	bl	8001d2c <xQueueGenericReset>

				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	79fa      	ldrb	r2, [r7, #7]
 8001e3a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	61fb      	str	r3, [r7, #28]
 8001e42:	e002      	b.n	8001e4a <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 8001e44:	69b8      	ldr	r0, [r7, #24]
 8001e46:	f001 fa35 	bl	80032b4 <vPortFree>
			}
		}
	}

	configASSERT( xReturn );
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d102      	bne.n	8001e56 <xQueueGenericCreate+0x7a>
 8001e50:	f000 fcc6 	bl	80027e0 <ulPortSetInterruptMask>
 8001e54:	e7fe      	b.n	8001e54 <xQueueGenericCreate+0x78>

	return xReturn;
 8001e56:	69fb      	ldr	r3, [r7, #28]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3720      	adds	r7, #32
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b088      	sub	sp, #32
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
 8001e6c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d102      	bne.n	8001e82 <xQueueGenericSend+0x22>
 8001e7c:	f000 fcb0 	bl	80027e0 <ulPortSetInterruptMask>
 8001e80:	e7fe      	b.n	8001e80 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d103      	bne.n	8001e90 <xQueueGenericSend+0x30>
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <xQueueGenericSend+0x34>
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <xQueueGenericSend+0x36>
 8001e94:	2300      	movs	r3, #0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <xQueueGenericSend+0x40>
 8001e9a:	f000 fca1 	bl	80027e0 <ulPortSetInterruptMask>
 8001e9e:	e7fe      	b.n	8001e9e <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d103      	bne.n	8001eae <xQueueGenericSend+0x4e>
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d101      	bne.n	8001eb2 <xQueueGenericSend+0x52>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <xQueueGenericSend+0x54>
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d102      	bne.n	8001ebe <xQueueGenericSend+0x5e>
 8001eb8:	f000 fc92 	bl	80027e0 <ulPortSetInterruptMask>
 8001ebc:	e7fe      	b.n	8001ebc <xQueueGenericSend+0x5c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001ebe:	f000 fc6d 	bl	800279c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d302      	bcc.n	8001ed4 <xQueueGenericSend+0x74>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d116      	bne.n	8001f02 <xQueueGenericSend+0xa2>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ed4:	69b8      	ldr	r0, [r7, #24]
 8001ed6:	68b9      	ldr	r1, [r7, #8]
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	f000 f9a9 	bl	8002230 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d009      	beq.n	8001efa <xQueueGenericSend+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	3324      	adds	r3, #36	; 0x24
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff fc3c 	bl	8001768 <xTaskRemoveFromEventList>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d101      	bne.n	8001efa <xQueueGenericSend+0x9a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							portYIELD_WITHIN_API();
 8001ef6:	f000 fc41 	bl	800277c <vPortYield>
						}
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001efa:	f000 fc5f 	bl	80027bc <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e059      	b.n	8001fb6 <xQueueGenericSend+0x156>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d103      	bne.n	8001f10 <xQueueGenericSend+0xb0>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001f08:	f000 fc58 	bl	80027bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	e052      	b.n	8001fb6 <xQueueGenericSend+0x156>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d106      	bne.n	8001f24 <xQueueGenericSend+0xc4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001f16:	f107 0310 	add.w	r3, r7, #16
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff fc80 	bl	8001820 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001f20:	2301      	movs	r3, #1
 8001f22:	61fb      	str	r3, [r7, #28]
				{
					/* Entry time was already set. */
				}
			}
		}
		taskEXIT_CRITICAL();
 8001f24:	f000 fc4a 	bl	80027bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001f28:	f7ff f9ca 	bl	80012c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001f2c:	f000 fc36 	bl	800279c <vPortEnterCritical>
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f38:	d102      	bne.n	8001f40 <xQueueGenericSend+0xe0>
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	645a      	str	r2, [r3, #68]	; 0x44
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f48:	d102      	bne.n	8001f50 <xQueueGenericSend+0xf0>
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	649a      	str	r2, [r3, #72]	; 0x48
 8001f50:	f000 fc34 	bl	80027bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001f54:	f107 0210 	add.w	r2, r7, #16
 8001f58:	1d3b      	adds	r3, r7, #4
 8001f5a:	4610      	mov	r0, r2
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f7ff fc79 	bl	8001854 <xTaskCheckForTimeOut>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d11e      	bne.n	8001fa6 <xQueueGenericSend+0x146>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001f68:	69b8      	ldr	r0, [r7, #24]
 8001f6a:	f000 fa51 	bl	8002410 <prvIsQueueFull>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d012      	beq.n	8001f9a <xQueueGenericSend+0x13a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	f103 0210 	add.w	r2, r3, #16
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f7ff fb94 	bl	80016ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001f84:	69b8      	ldr	r0, [r7, #24]
 8001f86:	f000 f9e1 	bl	800234c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001f8a:	f7ff f9a7 	bl	80012dc <xTaskResumeAll>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10f      	bne.n	8001fb4 <xQueueGenericSend+0x154>
				{
					portYIELD_WITHIN_API();
 8001f94:	f000 fbf2 	bl	800277c <vPortYield>
 8001f98:	e00c      	b.n	8001fb4 <xQueueGenericSend+0x154>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001f9a:	69b8      	ldr	r0, [r7, #24]
 8001f9c:	f000 f9d6 	bl	800234c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001fa0:	f7ff f99c 	bl	80012dc <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 8001fa4:	e78b      	b.n	8001ebe <xQueueGenericSend+0x5e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001fa6:	69b8      	ldr	r0, [r7, #24]
 8001fa8:	f000 f9d0 	bl	800234c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001fac:	f7ff f996 	bl	80012dc <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	e000      	b.n	8001fb6 <xQueueGenericSend+0x156>
		}
	}
 8001fb4:	e783      	b.n	8001ebe <xQueueGenericSend+0x5e>
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3720      	adds	r7, #32
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop

08001fc0 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle xQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b088      	sub	sp, #32
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d102      	bne.n	8001fde <xQueueGenericSendFromISR+0x1e>
 8001fd8:	f000 fc02 	bl	80027e0 <ulPortSetInterruptMask>
 8001fdc:	e7fe      	b.n	8001fdc <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d103      	bne.n	8001fec <xQueueGenericSendFromISR+0x2c>
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <xQueueGenericSendFromISR+0x30>
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <xQueueGenericSendFromISR+0x32>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d102      	bne.n	8001ffc <xQueueGenericSendFromISR+0x3c>
 8001ff6:	f000 fbf3 	bl	80027e0 <ulPortSetInterruptMask>
 8001ffa:	e7fe      	b.n	8001ffa <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d103      	bne.n	800200a <xQueueGenericSendFromISR+0x4a>
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <xQueueGenericSendFromISR+0x4e>
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <xQueueGenericSendFromISR+0x50>
 800200e:	2300      	movs	r3, #0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d102      	bne.n	800201a <xQueueGenericSendFromISR+0x5a>
 8002014:	f000 fbe4 	bl	80027e0 <ulPortSetInterruptMask>
 8002018:	e7fe      	b.n	8002018 <xQueueGenericSendFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800201a:	f000 fc4f 	bl	80028bc <vPortValidateInterruptPriority>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800201e:	f000 fbdf 	bl	80027e0 <ulPortSetInterruptMask>
 8002022:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202c:	429a      	cmp	r2, r3
 800202e:	d302      	bcc.n	8002036 <xQueueGenericSendFromISR+0x76>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d124      	bne.n	8002080 <xQueueGenericSendFromISR+0xc0>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002036:	69b8      	ldr	r0, [r7, #24]
 8002038:	68b9      	ldr	r1, [r7, #8]
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	f000 f8f8 	bl	8002230 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002044:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002048:	d112      	bne.n	8002070 <xQueueGenericSendFromISR+0xb0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	2b00      	cmp	r3, #0
 8002050:	d013      	beq.n	800207a <xQueueGenericSendFromISR+0xba>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	3324      	adds	r3, #36	; 0x24
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff fb86 	bl	8001768 <xTaskRemoveFromEventList>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00b      	beq.n	800207a <xQueueGenericSendFromISR+0xba>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d008      	beq.n	800207a <xQueueGenericSendFromISR+0xba>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	e004      	b.n	800207a <xQueueGenericSendFromISR+0xba>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002074:	1c5a      	adds	r2, r3, #1
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 800207a:	2301      	movs	r3, #1
 800207c:	61fb      	str	r3, [r7, #28]
 800207e:	e001      	b.n	8002084 <xQueueGenericSendFromISR+0xc4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002080:	2300      	movs	r3, #0
 8002082:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8002084:	6978      	ldr	r0, [r7, #20]
 8002086:	f000 fbb5 	bl	80027f4 <vPortClearInterruptMask>

	return xReturn;
 800208a:	69fb      	ldr	r3, [r7, #28]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3720      	adds	r7, #32
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle xQueue, const void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08a      	sub	sp, #40	; 0x28
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
 80020a0:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 80020a2:	2300      	movs	r3, #0
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d102      	bne.n	80020b6 <xQueueGenericReceive+0x22>
 80020b0:	f000 fb96 	bl	80027e0 <ulPortSetInterruptMask>
 80020b4:	e7fe      	b.n	80020b4 <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d103      	bne.n	80020c4 <xQueueGenericReceive+0x30>
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <xQueueGenericReceive+0x34>
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <xQueueGenericReceive+0x36>
 80020c8:	2300      	movs	r3, #0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d102      	bne.n	80020d4 <xQueueGenericReceive+0x40>
 80020ce:	f000 fb87 	bl	80027e0 <ulPortSetInterruptMask>
 80020d2:	e7fe      	b.n	80020d2 <xQueueGenericReceive+0x3e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80020d4:	f000 fb62 	bl	800279c <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 80020d8:	6a3b      	ldr	r3, [r7, #32]
 80020da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d03b      	beq.n	8002158 <xQueueGenericReceive+0xc4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80020e6:	6a38      	ldr	r0, [r7, #32]
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	f000 f909 	bl	8002300 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d11c      	bne.n	800212e <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 80020f4:	6a3b      	ldr	r3, [r7, #32]
 80020f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f8:	1e5a      	subs	r2, r3, #1
 80020fa:	6a3b      	ldr	r3, [r7, #32]
 80020fc:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80020fe:	6a3b      	ldr	r3, [r7, #32]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d104      	bne.n	8002110 <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( signed char * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as xTaskHandle is a typedef. */
 8002106:	f7ff fd4b 	bl	8001ba0 <xTaskGetCurrentTaskHandle>
 800210a:	4602      	mov	r2, r0
 800210c:	6a3b      	ldr	r3, [r7, #32]
 800210e:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d01b      	beq.n	8002150 <xQueueGenericReceive+0xbc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8002118:	6a3b      	ldr	r3, [r7, #32]
 800211a:	3310      	adds	r3, #16
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff fb23 	bl	8001768 <xTaskRemoveFromEventList>
 8002122:	4603      	mov	r3, r0
 8002124:	2b01      	cmp	r3, #1
 8002126:	d113      	bne.n	8002150 <xQueueGenericReceive+0xbc>
						{
							portYIELD_WITHIN_API();
 8002128:	f000 fb28 	bl	800277c <vPortYield>
 800212c:	e010      	b.n	8002150 <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	69fa      	ldr	r2, [r7, #28]
 8002132:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	2b00      	cmp	r3, #0
 800213a:	d009      	beq.n	8002150 <xQueueGenericReceive+0xbc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800213c:	6a3b      	ldr	r3, [r7, #32]
 800213e:	3324      	adds	r3, #36	; 0x24
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff fb11 	bl	8001768 <xTaskRemoveFromEventList>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <xQueueGenericReceive+0xbc>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 800214c:	f000 fb16 	bl	800277c <vPortYield>
						}
					}
				}

				taskEXIT_CRITICAL();
 8002150:	f000 fb34 	bl	80027bc <vPortExitCritical>
				return pdPASS;
 8002154:	2301      	movs	r3, #1
 8002156:	e066      	b.n	8002226 <xQueueGenericReceive+0x192>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d103      	bne.n	8002166 <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800215e:	f000 fb2d 	bl	80027bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002162:	2300      	movs	r3, #0
 8002164:	e05f      	b.n	8002226 <xQueueGenericReceive+0x192>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	2b00      	cmp	r3, #0
 800216a:	d106      	bne.n	800217a <xQueueGenericReceive+0xe6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff fb55 	bl	8001820 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002176:	2301      	movs	r3, #1
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
				{
					/* Entry time was already set. */
				}
			}
		}
		taskEXIT_CRITICAL();
 800217a:	f000 fb1f 	bl	80027bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800217e:	f7ff f89f 	bl	80012c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002182:	f000 fb0b 	bl	800279c <vPortEnterCritical>
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800218e:	d102      	bne.n	8002196 <xQueueGenericReceive+0x102>
 8002190:	6a3b      	ldr	r3, [r7, #32]
 8002192:	2200      	movs	r2, #0
 8002194:	645a      	str	r2, [r3, #68]	; 0x44
 8002196:	6a3b      	ldr	r3, [r7, #32]
 8002198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800219a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800219e:	d102      	bne.n	80021a6 <xQueueGenericReceive+0x112>
 80021a0:	6a3b      	ldr	r3, [r7, #32]
 80021a2:	2200      	movs	r2, #0
 80021a4:	649a      	str	r2, [r3, #72]	; 0x48
 80021a6:	f000 fb09 	bl	80027bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80021aa:	f107 0214 	add.w	r2, r7, #20
 80021ae:	1d3b      	adds	r3, r7, #4
 80021b0:	4610      	mov	r0, r2
 80021b2:	4619      	mov	r1, r3
 80021b4:	f7ff fb4e 	bl	8001854 <xTaskCheckForTimeOut>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d12b      	bne.n	8002216 <xQueueGenericReceive+0x182>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80021be:	6a38      	ldr	r0, [r7, #32]
 80021c0:	f000 f910 	bl	80023e4 <prvIsQueueEmpty>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d01f      	beq.n	800220a <xQueueGenericReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80021ca:	6a3b      	ldr	r3, [r7, #32]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d108      	bne.n	80021e4 <xQueueGenericReceive+0x150>
					{
						portENTER_CRITICAL();
 80021d2:	f000 fae3 	bl	800279c <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80021d6:	6a3b      	ldr	r3, [r7, #32]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff fd0e 	bl	8001bfc <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 80021e0:	f000 faec 	bl	80027bc <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80021e4:	6a3b      	ldr	r3, [r7, #32]
 80021e6:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4610      	mov	r0, r2
 80021ee:	4619      	mov	r1, r3
 80021f0:	f7ff fa5c 	bl	80016ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80021f4:	6a38      	ldr	r0, [r7, #32]
 80021f6:	f000 f8a9 	bl	800234c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80021fa:	f7ff f86f 	bl	80012dc <xTaskResumeAll>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10f      	bne.n	8002224 <xQueueGenericReceive+0x190>
				{
					portYIELD_WITHIN_API();
 8002204:	f000 faba 	bl	800277c <vPortYield>
 8002208:	e00c      	b.n	8002224 <xQueueGenericReceive+0x190>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800220a:	6a38      	ldr	r0, [r7, #32]
 800220c:	f000 f89e 	bl	800234c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002210:	f7ff f864 	bl	80012dc <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 8002214:	e75e      	b.n	80020d4 <xQueueGenericReceive+0x40>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8002216:	6a38      	ldr	r0, [r7, #32]
 8002218:	f000 f898 	bl	800234c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800221c:	f7ff f85e 	bl	80012dc <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8002220:	2300      	movs	r3, #0
 8002222:	e000      	b.n	8002226 <xQueueGenericReceive+0x192>
		}
	}
 8002224:	e756      	b.n	80020d4 <xQueueGenericReceive+0x40>
}
 8002226:	4618      	mov	r0, r3
 8002228:	3728      	adds	r7, #40	; 0x28
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop

08002230 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10c      	bne.n	800225e <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d151      	bne.n	80022f0 <prvCopyDataToQueue+0xc0>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff fd2d 	bl	8001cb0 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	605a      	str	r2, [r3, #4]
 800225c:	e048      	b.n	80022f0 <prvCopyDataToQueue+0xc0>
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d11a      	bne.n	800229a <prvCopyDataToQueue+0x6a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	4610      	mov	r0, r2
 800226e:	68b9      	ldr	r1, [r7, #8]
 8002270:	461a      	mov	r2, r3
 8002272:	f7fd ffb3 	bl	80001dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	441a      	add	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	429a      	cmp	r2, r3
 800228e:	d32f      	bcc.n	80022f0 <prvCopyDataToQueue+0xc0>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	e02a      	b.n	80022f0 <prvCopyDataToQueue+0xc0>
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	4610      	mov	r0, r2
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	461a      	mov	r2, r3
 80022a8:	f7fd ff98 	bl	80001dc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	68da      	ldr	r2, [r3, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	425b      	negs	r3, r3
 80022b6:	441a      	add	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d207      	bcs.n	80022d8 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	425b      	negs	r3, r3
 80022d2:	441a      	add	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	60da      	str	r2, [r3, #12]
		}

		if( xPosition == queueOVERWRITE )
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d108      	bne.n	80022f0 <prvCopyDataToQueue+0xc0>
		{
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d004      	beq.n	80022f0 <prvCopyDataToQueue+0xc0>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ea:	1e5a      	subs	r2, r3, #1
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}

	++( pxQueue->uxMessagesWaiting );
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void * const pvBuffer )
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d019      	beq.n	8002346 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	441a      	add	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	429a      	cmp	r2, r3
 800232a:	d303      	bcc.n	8002334 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	60da      	str	r2, [r3, #12]
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	6838      	ldr	r0, [r7, #0]
 800233e:	4611      	mov	r1, r2
 8002340:	461a      	mov	r2, r3
 8002342:	f7fd ff4b 	bl	80001dc <memcpy>
	}
}
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQUEUE *pxQueue )
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002354:	f000 fa22 	bl	800279c <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8002358:	e014      	b.n	8002384 <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3324      	adds	r3, #36	; 0x24
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff f9fe 	bl	8001768 <xTaskRemoveFromEventList>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <prvUnlockQueue+0x2e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 8002372:	f7ff fabf 	bl	80018f4 <vTaskMissedYield>
 8002376:	e000      	b.n	800237a <prvUnlockQueue+0x2e>
					}
				}
				else
				{
					break;
 8002378:	e008      	b.n	800238c <prvUnlockQueue+0x40>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800237e:	1e5a      	subs	r2, r3, #1
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002388:	2b00      	cmp	r3, #0
 800238a:	dce6      	bgt.n	800235a <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002392:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8002394:	f000 fa12 	bl	80027bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002398:	f000 fa00 	bl	800279c <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800239c:	e014      	b.n	80023c8 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00f      	beq.n	80023c6 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3310      	adds	r3, #16
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff f9dc 	bl	8001768 <xTaskRemoveFromEventList>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
 80023b6:	f7ff fa9d 	bl	80018f4 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	1e5a      	subs	r2, r3, #1
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	645a      	str	r2, [r3, #68]	; 0x44
 80023c4:	e000      	b.n	80023c8 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
 80023c6:	e003      	b.n	80023d0 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	dce6      	bgt.n	800239e <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023d6:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80023d8:	f000 f9f0 	bl	80027bc <vPortExitCritical>
}
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop

080023e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQUEUE *pxQueue )
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 80023ec:	f000 f9d6 	bl	800279c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE )  0 )
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d102      	bne.n	80023fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80023f8:	2301      	movs	r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	e001      	b.n	8002402 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002402:	f000 f9db 	bl	80027bc <vPortExitCritical>

	return xReturn;
 8002406:	68fb      	ldr	r3, [r7, #12]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQUEUE *pxQueue )
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8002418:	f000 f9c0 	bl	800279c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002424:	429a      	cmp	r2, r3
 8002426:	d102      	bne.n	800242e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002428:	2301      	movs	r3, #1
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	e001      	b.n	8002432 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800242e:	2300      	movs	r3, #0
 8002430:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002432:	f000 f9c3 	bl	80027bc <vPortExitCritical>

	return xReturn;
 8002436:	68fb      	ldr	r3, [r7, #12]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( xQueueHandle xQueue, portTickType xTicksToWait )
	{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
	xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800244e:	f000 f9a5 	bl	800279c <vPortEnterCritical>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002456:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800245a:	d102      	bne.n	8002462 <vQueueWaitForMessageRestricted+0x22>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	645a      	str	r2, [r3, #68]	; 0x44
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002466:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800246a:	d102      	bne.n	8002472 <vQueueWaitForMessageRestricted+0x32>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	649a      	str	r2, [r3, #72]	; 0x48
 8002472:	f000 f9a3 	bl	80027bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247a:	2b00      	cmp	r3, #0
 800247c:	d105      	bne.n	800248a <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	3324      	adds	r3, #36	; 0x24
 8002482:	4618      	mov	r0, r3
 8002484:	6839      	ldr	r1, [r7, #0]
 8002486:	f7ff f947 	bl	8001718 <vTaskPlaceOnEventListRestricted>
		}
		prvUnlockQueue( pxQueue );
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f7ff ff5e 	bl	800234c <prvUnlockQueue>
	}
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop

08002498 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList * const pxList )
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f103 0208 	add.w	r2, r3, #8
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f103 0208 	add.w	r2, r3, #8
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f103 0208 	add.w	r2, r3, #8
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
}
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop

080024d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem * const pxItem )
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	611a      	str	r2, [r3, #16]
}
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList * const pxList, xListItem * const pxNewListItem )
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
xListItem * pxIndex;

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry. */
	pxIndex = pxList->pxIndex;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	601a      	str	r2, [r3, #0]
}
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop

08002538 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList * const pxList, xListItem * const pxNewListItem )
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800254e:	d103      	bne.n	8002558 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	e00c      	b.n	8002572 <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3308      	adds	r3, #8
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	e002      	b.n	8002566 <vListInsert+0x2e>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	429a      	cmp	r2, r3
 8002570:	d9f6      	bls.n	8002560 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	601a      	str	r2, [r3, #0]
}
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem * const pxItemToRemove )
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6892      	ldr	r2, [r2, #8]
 80025b8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6852      	ldr	r2, [r2, #4]
 80025c2:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d103      	bne.n	80025dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	1e5a      	subs	r2, r3, #1
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	3b04      	subs	r3, #4
 800260c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002614:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	3b04      	subs	r3, #4
 800261a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	3b04      	subs	r3, #4
 8002626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) portTASK_RETURN_ADDRESS;	/* LR */
 8002628:	4a0c      	ldr	r2, [pc, #48]	; (800265c <pxPortInitialiseStack+0x60>)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	3b14      	subs	r3, #20
 8002632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	3b04      	subs	r3, #4
 800263e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f06f 0202 	mvn.w	r2, #2
 8002646:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	3b20      	subs	r3, #32
 800264c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800264e:	68fb      	ldr	r3, [r7, #12]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	08002661 	.word	0x08002661

08002660 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002664:	4b05      	ldr	r3, [pc, #20]	; (800267c <prvTaskExitError+0x1c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800266c:	d002      	beq.n	8002674 <prvTaskExitError+0x14>
 800266e:	f000 f8b7 	bl	80027e0 <ulPortSetInterruptMask>
 8002672:	e7fe      	b.n	8002672 <prvTaskExitError+0x12>
	portDISABLE_INTERRUPTS();
 8002674:	f000 f8b4 	bl	80027e0 <ulPortSetInterruptMask>
	for( ;; );
 8002678:	e7fe      	b.n	8002678 <prvTaskExitError+0x18>
 800267a:	bf00      	nop
 800267c:	20000018 	.word	0x20000018

08002680 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002680:	4b05      	ldr	r3, [pc, #20]	; (8002698 <pxCurrentTCBConst2>)
 8002682:	6819      	ldr	r1, [r3, #0]
 8002684:	6808      	ldr	r0, [r1, #0]
 8002686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800268a:	f380 8809 	msr	PSP, r0
 800268e:	f04f 0000 	mov.w	r0, #0
 8002692:	f380 8811 	msr	BASEPRI, r0
 8002696:	4770      	bx	lr

08002698 <pxCurrentTCBConst2>:
 8002698:	20000488 	.word	0x20000488

0800269c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800269c:	4803      	ldr	r0, [pc, #12]	; (80026ac <prvPortStartFirstTask+0x10>)
 800269e:	6800      	ldr	r0, [r0, #0]
 80026a0:	6800      	ldr	r0, [r0, #0]
 80026a2:	f380 8808 	msr	MSP, r0
 80026a6:	b662      	cpsie	i
 80026a8:	df00      	svc	0
 80026aa:	bf00      	nop
 80026ac:	e000ed08 	.word	0xe000ed08

080026b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile unsigned long ulOriginalPriority;
		volatile char * const pcFirstUserPriorityRegister = ( volatile char * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80026b6:	4b2b      	ldr	r3, [pc, #172]	; (8002764 <xPortStartScheduler+0xb4>)
 80026b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pcFirstUserPriorityRegister;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pcFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	22ff      	movs	r2, #255	; 0xff
 80026c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pcFirstUserPriorityRegister;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	4b23      	ldr	r3, [pc, #140]	; (8002768 <xPortStartScheduler+0xb8>)
 80026dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80026de:	4b23      	ldr	r3, [pc, #140]	; (800276c <xPortStartScheduler+0xbc>)
 80026e0:	2207      	movs	r2, #7
 80026e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80026e4:	e009      	b.n	80026fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80026e6:	4b21      	ldr	r3, [pc, #132]	; (800276c <xPortStartScheduler+0xbc>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	1e5a      	subs	r2, r3, #1
 80026ec:	4b1f      	ldr	r3, [pc, #124]	; (800276c <xPortStartScheduler+0xbc>)
 80026ee:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( unsigned char ) 0x01;
 80026f0:	79fb      	ldrb	r3, [r7, #7]
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	b25b      	sxtb	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	dbef      	blt.n	80026e6 <xPortStartScheduler+0x36>
			ucMaxPriorityValue <<= ( unsigned char ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002706:	4b19      	ldr	r3, [pc, #100]	; (800276c <xPortStartScheduler+0xbc>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	021a      	lsls	r2, r3, #8
 800270c:	4b17      	ldr	r3, [pc, #92]	; (800276c <xPortStartScheduler+0xbc>)
 800270e:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002710:	4b16      	ldr	r3, [pc, #88]	; (800276c <xPortStartScheduler+0xbc>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002718:	4b14      	ldr	r3, [pc, #80]	; (800276c <xPortStartScheduler+0xbc>)
 800271a:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pcFirstUserPriorityRegister = ulOriginalPriority;
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	b2da      	uxtb	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002724:	4b12      	ldr	r3, [pc, #72]	; (8002770 <xPortStartScheduler+0xc0>)
 8002726:	4a12      	ldr	r2, [pc, #72]	; (8002770 <xPortStartScheduler+0xc0>)
 8002728:	6812      	ldr	r2, [r2, #0]
 800272a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800272e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002730:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <xPortStartScheduler+0xc0>)
 8002732:	4a0f      	ldr	r2, [pc, #60]	; (8002770 <xPortStartScheduler+0xc0>)
 8002734:	6812      	ldr	r2, [r2, #0]
 8002736:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800273a:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800273c:	f000 f89a 	bl	8002874 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002740:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <xPortStartScheduler+0xc4>)
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002746:	f000 f8af 	bl	80028a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800274a:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <xPortStartScheduler+0xc8>)
 800274c:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <xPortStartScheduler+0xc8>)
 800274e:	6812      	ldr	r2, [r2, #0]
 8002750:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8002754:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002756:	f7ff ffa1 	bl	800269c <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	e000e400 	.word	0xe000e400
 8002768:	20000584 	.word	0x20000584
 800276c:	20000588 	.word	0x20000588
 8002770:	e000ed20 	.word	0xe000ed20
 8002774:	20000018 	.word	0x20000018
 8002778:	e000ef34 	.word	0xe000ef34

0800277c <vPortYield>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002780:	4b05      	ldr	r3, [pc, #20]	; (8002798 <vPortYield+0x1c>)
 8002782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002786:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 8002788:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800278c:	f3bf 8f6f 	isb	sy
}
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	e000ed04 	.word	0xe000ed04

0800279c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80027a0:	f000 f81e 	bl	80027e0 <ulPortSetInterruptMask>
	uxCriticalNesting++;
 80027a4:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <vPortEnterCritical+0x1c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	4b03      	ldr	r3, [pc, #12]	; (80027b8 <vPortEnterCritical+0x1c>)
 80027ac:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 80027ae:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80027b2:	f3bf 8f6f 	isb	sy
}
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20000018 	.word	0x20000018

080027bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <vPortExitCritical+0x20>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	1e5a      	subs	r2, r3, #1
 80027c6:	4b05      	ldr	r3, [pc, #20]	; (80027dc <vPortExitCritical+0x20>)
 80027c8:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 80027ca:	4b04      	ldr	r3, [pc, #16]	; (80027dc <vPortExitCritical+0x20>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d102      	bne.n	80027d8 <vPortExitCritical+0x1c>
	{
		portENABLE_INTERRUPTS();
 80027d2:	2000      	movs	r0, #0
 80027d4:	f000 f80e 	bl	80027f4 <vPortClearInterruptMask>
	}
}
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20000018 	.word	0x20000018

080027e0 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
 80027e0:	f3ef 8011 	mrs	r0, BASEPRI
 80027e4:	f04f 0150 	mov.w	r1, #80	; 0x50
 80027e8:	f381 8811 	msr	BASEPRI, r1
 80027ec:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	bf00      	nop

080027f4 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
 80027f4:	f380 8811 	msr	BASEPRI, r0
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop

080027fc <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80027fc:	f3ef 8009 	mrs	r0, PSP
 8002800:	4b11      	ldr	r3, [pc, #68]	; (8002848 <pxCurrentTCBConst>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	f01e 0f10 	tst.w	lr, #16
 8002808:	bf08      	it	eq
 800280a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800280e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002812:	6010      	str	r0, [r2, #0]
 8002814:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002818:	f04f 0050 	mov.w	r0, #80	; 0x50
 800281c:	f380 8811 	msr	BASEPRI, r0
 8002820:	f7fe feca 	bl	80015b8 <vTaskSwitchContext>
 8002824:	f04f 0000 	mov.w	r0, #0
 8002828:	f380 8811 	msr	BASEPRI, r0
 800282c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002830:	6819      	ldr	r1, [r3, #0]
 8002832:	6808      	ldr	r0, [r1, #0]
 8002834:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002838:	f01e 0f10 	tst.w	lr, #16
 800283c:	bf08      	it	eq
 800283e:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002842:	f380 8809 	msr	PSP, r0
 8002846:	4770      	bx	lr

08002848 <pxCurrentTCBConst>:
 8002848:	20000488 	.word	0x20000488

0800284c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 8002850:	f7ff ffc6 	bl	80027e0 <ulPortSetInterruptMask>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002854:	f7fe fdda 	bl	800140c <xTaskIncrementTick>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800285e:	4b04      	ldr	r3, [pc, #16]	; (8002870 <SysTick_Handler+0x24>)
 8002860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002864:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 8002866:	2000      	movs	r0, #0
 8002868:	f7ff ffc4 	bl	80027f4 <vPortClearInterruptMask>
}
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	e000ed04 	.word	0xe000ed04

08002874 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
 8002878:	4b07      	ldr	r3, [pc, #28]	; (8002898 <vPortSetupTimerInterrupt+0x24>)
 800287a:	4a08      	ldr	r2, [pc, #32]	; (800289c <vPortSetupTimerInterrupt+0x28>)
 800287c:	6811      	ldr	r1, [r2, #0]
 800287e:	4a08      	ldr	r2, [pc, #32]	; (80028a0 <vPortSetupTimerInterrupt+0x2c>)
 8002880:	fba2 0201 	umull	r0, r2, r2, r1
 8002884:	0992      	lsrs	r2, r2, #6
 8002886:	3a01      	subs	r2, #1
 8002888:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800288a:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <vPortSetupTimerInterrupt+0x30>)
 800288c:	2207      	movs	r2, #7
 800288e:	601a      	str	r2, [r3, #0]
}
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	e000e014 	.word	0xe000e014
 800289c:	20000000 	.word	0x20000000
 80028a0:	10624dd3 	.word	0x10624dd3
 80028a4:	e000e010 	.word	0xe000e010

080028a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80028a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80028b8 <vPortEnableVFP+0x10>
 80028ac:	6801      	ldr	r1, [r0, #0]
 80028ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80028b2:	6001      	str	r1, [r0, #0]
 80028b4:	4770      	bx	lr
 80028b6:	0000      	.short	0x0000
 80028b8:	e000ed88 	.word	0xe000ed88

080028bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
	unsigned long ulCurrentInterrupt;
	unsigned char ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80028c2:	f3ef 8305 	mrs	r3, IPSR
 80028c6:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b0f      	cmp	r3, #15
 80028cc:	d90c      	bls.n	80028e8 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80028ce:	4a0d      	ldr	r2, [pc, #52]	; (8002904 <vPortValidateInterruptPriority+0x48>)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4413      	add	r3, r2
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80028d8:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <vPortValidateInterruptPriority+0x4c>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	78fa      	ldrb	r2, [r7, #3]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d202      	bcs.n	80028e8 <vPortValidateInterruptPriority+0x2c>
 80028e2:	f7ff ff7d 	bl	80027e0 <ulPortSetInterruptMask>
 80028e6:	e7fe      	b.n	80028e6 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80028e8:	4b08      	ldr	r3, [pc, #32]	; (800290c <vPortValidateInterruptPriority+0x50>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80028f0:	4b07      	ldr	r3, [pc, #28]	; (8002910 <vPortValidateInterruptPriority+0x54>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d902      	bls.n	80028fe <vPortValidateInterruptPriority+0x42>
 80028f8:	f7ff ff72 	bl	80027e0 <ulPortSetInterruptMask>
 80028fc:	e7fe      	b.n	80028fc <vPortValidateInterruptPriority+0x40>
	}
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	e000e3f0 	.word	0xe000e3f0
 8002908:	20000584 	.word	0x20000584
 800290c:	e000ed0c 	.word	0xe000ed0c
 8002910:	20000588 	.word	0x20000588

08002914 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
 800291a:	2300      	movs	r3, #0
 800291c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800291e:	f000 fa45 	bl	8002dac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002922:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <xTimerCreateTimerTask+0x4c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00f      	beq.n	800294a <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800292a:	2302      	movs	r3, #2
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	2300      	movs	r3, #0
 8002930:	9301      	str	r3, [sp, #4]
 8002932:	2300      	movs	r3, #0
 8002934:	9302      	str	r3, [sp, #8]
 8002936:	2300      	movs	r3, #0
 8002938:	9303      	str	r3, [sp, #12]
 800293a:	480a      	ldr	r0, [pc, #40]	; (8002964 <xTimerCreateTimerTask+0x50>)
 800293c:	490a      	ldr	r1, [pc, #40]	; (8002968 <xTimerCreateTimerTask+0x54>)
 800293e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002942:	2300      	movs	r3, #0
 8002944:	f7fe fba8 	bl	8001098 <xTaskGenericCreate>
 8002948:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d102      	bne.n	8002956 <xTimerCreateTimerTask+0x42>
 8002950:	f7ff ff46 	bl	80027e0 <ulPortSetInterruptMask>
 8002954:	e7fe      	b.n	8002954 <xTimerCreateTimerTask+0x40>
	return xReturn;
 8002956:	687b      	ldr	r3, [r7, #4]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	200005bc 	.word	0x200005bc
 8002964:	08002a69 	.word	0x08002a69
 8002968:	08005990 	.word	0x08005990

0800296c <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b088      	sub	sp, #32
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
 8002978:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
 800297a:	2300      	movs	r3, #0
 800297c:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800297e:	4b1d      	ldr	r3, [pc, #116]	; (80029f4 <xTimerGenericCommand+0x88>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d030      	beq.n	80029e8 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d11c      	bne.n	80029d2 <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002998:	f7ff f912 	bl	8001bc0 <xTaskGetSchedulerState>
 800299c:	4603      	mov	r3, r0
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d10b      	bne.n	80029ba <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
 80029a2:	4b14      	ldr	r3, [pc, #80]	; (80029f4 <xTimerGenericCommand+0x88>)
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	f107 0310 	add.w	r3, r7, #16
 80029aa:	4610      	mov	r0, r2
 80029ac:	4619      	mov	r1, r3
 80029ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029b0:	2300      	movs	r3, #0
 80029b2:	f7ff fa55 	bl	8001e60 <xQueueGenericSend>
 80029b6:	61f8      	str	r0, [r7, #28]
 80029b8:	e016      	b.n	80029e8 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80029ba:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <xTimerGenericCommand+0x88>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	f107 0310 	add.w	r3, r7, #16
 80029c2:	4610      	mov	r0, r2
 80029c4:	4619      	mov	r1, r3
 80029c6:	2200      	movs	r2, #0
 80029c8:	2300      	movs	r3, #0
 80029ca:	f7ff fa49 	bl	8001e60 <xQueueGenericSend>
 80029ce:	61f8      	str	r0, [r7, #28]
 80029d0:	e00a      	b.n	80029e8 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80029d2:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <xTimerGenericCommand+0x88>)
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	f107 0310 	add.w	r3, r7, #16
 80029da:	4610      	mov	r0, r2
 80029dc:	4619      	mov	r1, r3
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	2300      	movs	r3, #0
 80029e2:	f7ff faed 	bl	8001fc0 <xQueueGenericSendFromISR>
 80029e6:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
 80029e8:	69fb      	ldr	r3, [r7, #28]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3720      	adds	r7, #32
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	200005bc 	.word	0x200005bc

080029f8 <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af02      	add	r7, sp, #8
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002a02:	4b18      	ldr	r3, [pc, #96]	; (8002a64 <prvProcessExpiredTimer+0x6c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	60fb      	str	r3, [r7, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	3304      	adds	r3, #4
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff fdc9 	bl	80025a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d11b      	bne.n	8002a56 <prvProcessExpiredTimer+0x5e>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	699a      	ldr	r2, [r3, #24]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4413      	add	r3, r2
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f000 f8a9 	bl	8002b84 <prvInsertTimerInActiveList>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d10e      	bne.n	8002a56 <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8002a38:	2300      	movs	r3, #0
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	2100      	movs	r1, #0
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	2300      	movs	r3, #0
 8002a44:	f7ff ff92 	bl	800296c <xTimerGenericCommand>
 8002a48:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d102      	bne.n	8002a56 <prvProcessExpiredTimer+0x5e>
 8002a50:	f7ff fec6 	bl	80027e0 <ulPortSetInterruptMask>
 8002a54:	e7fe      	b.n	8002a54 <prvProcessExpiredTimer+0x5c>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	4798      	blx	r3
}
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	200005b4 	.word	0x200005b4

08002a68 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002a70:	f107 0308 	add.w	r3, r7, #8
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 f83f 	bl	8002af8 <prvGetNextExpireTime>
 8002a7a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	4619      	mov	r1, r3
 8002a82:	f000 f803 	bl	8002a8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002a86:	f000 f8bf 	bl	8002c08 <prvProcessReceivedCommands>
	}
 8002a8a:	e7f1      	b.n	8002a70 <prvTimerTask+0x8>

08002a8c <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002a96:	f7fe fc13 	bl	80012c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002a9a:	f107 0308 	add.w	r3, r7, #8
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 f84e 	bl	8002b40 <prvSampleTimeNow>
 8002aa4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d11e      	bne.n	8002aea <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10a      	bne.n	8002ac8 <prvProcessTimerOrBlockTask+0x3c>
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d806      	bhi.n	8002ac8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002aba:	f7fe fc0f 	bl	80012dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	68f9      	ldr	r1, [r7, #12]
 8002ac2:	f7ff ff99 	bl	80029f8 <prvProcessExpiredTimer>
 8002ac6:	e012      	b.n	8002aee <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8002ac8:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <prvProcessTimerOrBlockTask+0x68>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	1acb      	subs	r3, r1, r3
 8002ad2:	4610      	mov	r0, r2
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	f7ff fcb3 	bl	8002440 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 8002ada:	f7fe fbff 	bl	80012dc <xTaskResumeAll>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d104      	bne.n	8002aee <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 8002ae4:	f7ff fe4a 	bl	800277c <vPortYield>
 8002ae8:	e001      	b.n	8002aee <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 8002aea:	f7fe fbf7 	bl	80012dc <xTaskResumeAll>
		}
	}
}
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	200005bc 	.word	0x200005bc

08002af8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002b00:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <prvGetNextExpireTime+0x44>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	bf14      	ite	ne
 8002b0a:	2300      	movne	r3, #0
 8002b0c:	2301      	moveq	r3, #1
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	461a      	mov	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d105      	bne.n	8002b2a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002b1e:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <prvGetNextExpireTime+0x44>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	e001      	b.n	8002b2e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	200005b4 	.word	0x200005b4

08002b40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002b48:	f7fe fc4e 	bl	80013e8 <xTaskGetTickCount>
 8002b4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002b4e:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <prvSampleTimeNow+0x40>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d208      	bcs.n	8002b6a <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
 8002b58:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <prvSampleTimeNow+0x40>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 f8cb 	bl	8002cf8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	e002      	b.n	8002b70 <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002b70:	4b03      	ldr	r3, [pc, #12]	; (8002b80 <prvSampleTimeNow+0x40>)
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8002b76:	68fb      	ldr	r3, [r7, #12]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	200005c0 	.word	0x200005c0

08002b84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
 8002b90:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
 8002b92:	2300      	movs	r3, #0
 8002b94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d812      	bhi.n	8002bd0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	1ad2      	subs	r2, r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d302      	bcc.n	8002bbe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	e01b      	b.n	8002bf6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002bbe:	4b10      	ldr	r3, [pc, #64]	; (8002c00 <prvInsertTimerInActiveList+0x7c>)
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	4619      	mov	r1, r3
 8002bca:	f7ff fcb5 	bl	8002538 <vListInsert>
 8002bce:	e012      	b.n	8002bf6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d206      	bcs.n	8002be6 <prvInsertTimerInActiveList+0x62>
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d302      	bcc.n	8002be6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002be0:	2301      	movs	r3, #1
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	e007      	b.n	8002bf6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002be6:	4b07      	ldr	r3, [pc, #28]	; (8002c04 <prvInsertTimerInActiveList+0x80>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	3304      	adds	r3, #4
 8002bee:	4610      	mov	r0, r2
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	f7ff fca1 	bl	8002538 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002bf6:	697b      	ldr	r3, [r7, #20]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	200005b8 	.word	0x200005b8
 8002c04:	200005b4 	.word	0x200005b4

08002c08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b08a      	sub	sp, #40	; 0x28
 8002c0c:	af02      	add	r7, sp, #8
xTIMER_MESSAGE xMessage;
xTIMER *pxTimer;
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002c0e:	e060      	b.n	8002cd2 <prvProcessReceivedCommands+0xca>
	{
		pxTimer = xMessage.pxTimer;
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	61fb      	str	r3, [r7, #28]

		if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d004      	beq.n	8002c26 <prvProcessReceivedCommands+0x1e>
		{
			/* The timer is in a list, remove it. */
			( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	3304      	adds	r3, #4
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff fcc1 	bl	80025a8 <uxListRemove>
		it must be present in the function call.  prvSampleTimeNow() must be 
		called after the message is received from xTimerQueue so there is no 
		possibility of a higher priority task adding a message to the message
		queue with a time that is ahead of the timer daemon task (because it
		pre-empted the timer daemon task after the xTimeNow value was set). */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002c26:	1d3b      	adds	r3, r7, #4
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff ff89 	bl	8002b40 <prvSampleTimeNow>
 8002c2e:	61b8      	str	r0, [r7, #24]

		switch( xMessage.xMessageID )
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d84c      	bhi.n	8002cd0 <prvProcessReceivedCommands+0xc8>
 8002c36:	a201      	add	r2, pc, #4	; (adr r2, 8002c3c <prvProcessReceivedCommands+0x34>)
 8002c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3c:	08002c4d 	.word	0x08002c4d
 8002c40:	08002cd1 	.word	0x08002cd1
 8002c44:	08002c9f 	.word	0x08002c9f
 8002c48:	08002cc9 	.word	0x08002cc9
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	441a      	add	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	69f8      	ldr	r0, [r7, #28]
 8002c58:	4611      	mov	r1, r2
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	f7ff ff92 	bl	8002b84 <prvInsertTimerInActiveList>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d11a      	bne.n	8002c9c <prvProcessReceivedCommands+0x94>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	69f8      	ldr	r0, [r7, #28]
 8002c6c:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d112      	bne.n	8002c9c <prvProcessReceivedCommands+0x94>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	2200      	movs	r2, #0
 8002c80:	9200      	str	r2, [sp, #0]
 8002c82:	69f8      	ldr	r0, [r7, #28]
 8002c84:	2100      	movs	r1, #0
 8002c86:	461a      	mov	r2, r3
 8002c88:	2300      	movs	r3, #0
 8002c8a:	f7ff fe6f 	bl	800296c <xTimerGenericCommand>
 8002c8e:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d102      	bne.n	8002c9c <prvProcessReceivedCommands+0x94>
 8002c96:	f7ff fda3 	bl	80027e0 <ulPortSetInterruptMask>
 8002c9a:	e7fe      	b.n	8002c9a <prvProcessReceivedCommands+0x92>
						( void ) xResult;
					}
				}
				break;
 8002c9c:	e019      	b.n	8002cd2 <prvProcessReceivedCommands+0xca>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d102      	bne.n	8002cb2 <prvProcessReceivedCommands+0xaa>
 8002cac:	f7ff fd98 	bl	80027e0 <ulPortSetInterruptMask>
 8002cb0:	e7fe      	b.n	8002cb0 <prvProcessReceivedCommands+0xa8>
				longer or shorter than the old one.  The command time is 
				therefore set to the current time, and as the period cannot be
				zero the next expiry time can only be in the future, meaning
				(unlike for the xTimerStart() case above) there is no fail case
				that needs to be handled here. */
				( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	699a      	ldr	r2, [r3, #24]
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	4413      	add	r3, r2
 8002cba:	69f8      	ldr	r0, [r7, #28]
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	f7ff ff5f 	bl	8002b84 <prvInsertTimerInActiveList>
				break;
 8002cc6:	e004      	b.n	8002cd2 <prvProcessReceivedCommands+0xca>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
 8002cc8:	69f8      	ldr	r0, [r7, #28]
 8002cca:	f000 faf3 	bl	80032b4 <vPortFree>
				break;
 8002cce:	e000      	b.n	8002cd2 <prvProcessReceivedCommands+0xca>

			default	:
				/* Don't expect to get here. */
				break;
 8002cd0:	bf00      	nop
xTIMER_MESSAGE xMessage;
xTIMER *pxTimer;
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002cd2:	4b08      	ldr	r3, [pc, #32]	; (8002cf4 <prvProcessReceivedCommands+0xec>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	f107 0308 	add.w	r3, r7, #8
 8002cda:	4610      	mov	r0, r2
 8002cdc:	4619      	mov	r1, r3
 8002cde:	2200      	movs	r2, #0
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	f7ff f9d7 	bl	8002094 <xQueueGenericReceive>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d191      	bne.n	8002c10 <prvProcessReceivedCommands+0x8>
			default	:
				/* Don't expect to get here. */
				break;
		}
	}
}
 8002cec:	3720      	adds	r7, #32
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	200005bc 	.word	0x200005bc

08002cf8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08a      	sub	sp, #40	; 0x28
 8002cfc:	af02      	add	r7, sp, #8
 8002cfe:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002d00:	e03d      	b.n	8002d7e <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002d02:	4b28      	ldr	r3, [pc, #160]	; (8002da4 <prvSwitchTimerLists+0xac>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002d0c:	4b25      	ldr	r3, [pc, #148]	; (8002da4 <prvSwitchTimerLists+0xac>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	61bb      	str	r3, [r7, #24]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	3304      	adds	r3, #4
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff fc44 	bl	80025a8 <uxListRemove>

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	69b8      	ldr	r0, [r7, #24]
 8002d26:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d126      	bne.n	8002d7e <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	699a      	ldr	r2, [r3, #24]
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	4413      	add	r3, r2
 8002d38:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d90e      	bls.n	8002d60 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002d4e:	4b15      	ldr	r3, [pc, #84]	; (8002da4 <prvSwitchTimerLists+0xac>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	3304      	adds	r3, #4
 8002d56:	4610      	mov	r0, r2
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f7ff fbed 	bl	8002538 <vListInsert>
 8002d5e:	e00e      	b.n	8002d7e <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8002d60:	2300      	movs	r3, #0
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	69b8      	ldr	r0, [r7, #24]
 8002d66:	2100      	movs	r1, #0
 8002d68:	69fa      	ldr	r2, [r7, #28]
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f7ff fdfe 	bl	800296c <xTimerGenericCommand>
 8002d70:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d102      	bne.n	8002d7e <prvSwitchTimerLists+0x86>
 8002d78:	f7ff fd32 	bl	80027e0 <ulPortSetInterruptMask>
 8002d7c:	e7fe      	b.n	8002d7c <prvSwitchTimerLists+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002d7e:	4b09      	ldr	r3, [pc, #36]	; (8002da4 <prvSwitchTimerLists+0xac>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1bc      	bne.n	8002d02 <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
 8002d88:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <prvSwitchTimerLists+0xac>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
 8002d8e:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <prvSwitchTimerLists+0xb0>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	4b04      	ldr	r3, [pc, #16]	; (8002da4 <prvSwitchTimerLists+0xac>)
 8002d94:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8002d96:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <prvSwitchTimerLists+0xb0>)
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	601a      	str	r2, [r3, #0]
}
 8002d9c:	3720      	adds	r7, #32
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	200005b4 	.word	0x200005b4
 8002da8:	200005b8 	.word	0x200005b8

08002dac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002db0:	f7ff fcf4 	bl	800279c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002db4:	4b0d      	ldr	r3, [pc, #52]	; (8002dec <prvCheckForValidListAndQueue+0x40>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d113      	bne.n	8002de4 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 8002dbc:	480c      	ldr	r0, [pc, #48]	; (8002df0 <prvCheckForValidListAndQueue+0x44>)
 8002dbe:	f7ff fb6b 	bl	8002498 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002dc2:	480c      	ldr	r0, [pc, #48]	; (8002df4 <prvCheckForValidListAndQueue+0x48>)
 8002dc4:	f7ff fb68 	bl	8002498 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <prvCheckForValidListAndQueue+0x4c>)
 8002dca:	4a09      	ldr	r2, [pc, #36]	; (8002df0 <prvCheckForValidListAndQueue+0x44>)
 8002dcc:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002dce:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <prvCheckForValidListAndQueue+0x50>)
 8002dd0:	4a08      	ldr	r2, [pc, #32]	; (8002df4 <prvCheckForValidListAndQueue+0x48>)
 8002dd2:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
 8002dd4:	200a      	movs	r0, #10
 8002dd6:	210c      	movs	r1, #12
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f7fe ffff 	bl	8001ddc <xQueueGenericCreate>
 8002dde:	4602      	mov	r2, r0
 8002de0:	4b02      	ldr	r3, [pc, #8]	; (8002dec <prvCheckForValidListAndQueue+0x40>)
 8002de2:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
 8002de4:	f7ff fcea 	bl	80027bc <vPortExitCritical>
}
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	200005bc 	.word	0x200005bc
 8002df0:	2000058c 	.word	0x2000058c
 8002df4:	200005a0 	.word	0x200005a0
 8002df8:	200005b4 	.word	0x200005b4
 8002dfc:	200005b8 	.word	0x200005b8

08002e00 <ITM_SendChar>:

    \param [in]     ch  Character to transmit
    \return             Character to transmit
 */
static __INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 8002e08:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <ITM_SendChar+0x58>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d01a      	beq.n	8002e4a <ITM_SendChar+0x4a>
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8002e14:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002e18:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002e1c:	f003 0301 	and.w	r3, r3, #1
    \param [in]     ch  Character to transmit
    \return             Character to transmit
 */
static __INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d012      	beq.n	8002e4a <ITM_SendChar+0x4a>
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 8002e24:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002e28:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002e2c:	f003 0301 	and.w	r3, r3, #1
    \return             Character to transmit
 */
static __INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <ITM_SendChar+0x4a>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0].u32 == 0);
 8002e34:	bf00      	nop
 8002e36:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0fa      	beq.n	8002e36 <ITM_SendChar+0x36>
    ITM->PORT[0].u8 = (uint8_t) ch;
 8002e40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002e4a:	687b      	ldr	r3, [r7, #4]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	e000edf0 	.word	0xe000edf0

08002e5c <out>:
static char buf[12];
static unsigned int num;
static char uc;
static char zs;

static void out(char c) {
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	71fb      	strb	r3, [r7, #7]
  *bf++ = c;
 8002e66:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <out+0x24>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	1c59      	adds	r1, r3, #1
 8002e6c:	4a04      	ldr	r2, [pc, #16]	; (8002e80 <out+0x24>)
 8002e6e:	6011      	str	r1, [r2, #0]
 8002e70:	79fa      	ldrb	r2, [r7, #7]
 8002e72:	701a      	strb	r2, [r3, #0]
}
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	200005c4 	.word	0x200005c4

08002e84 <outDgt>:

static void outDgt(char dgt) {
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	71fb      	strb	r3, [r7, #7]
  out(dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10));
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	2b09      	cmp	r3, #9
 8002e92:	d907      	bls.n	8002ea4 <outDgt+0x20>
 8002e94:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <outDgt+0x3c>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <outDgt+0x1c>
 8002e9c:	2337      	movs	r3, #55	; 0x37
 8002e9e:	e002      	b.n	8002ea6 <outDgt+0x22>
 8002ea0:	2357      	movs	r3, #87	; 0x57
 8002ea2:	e000      	b.n	8002ea6 <outDgt+0x22>
 8002ea4:	2330      	movs	r3, #48	; 0x30
 8002ea6:	79fa      	ldrb	r2, [r7, #7]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff ffd5 	bl	8002e5c <out>
  zs=1;
 8002eb2:	4b04      	ldr	r3, [pc, #16]	; (8002ec4 <outDgt+0x40>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	701a      	strb	r2, [r3, #0]
}
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	200005d8 	.word	0x200005d8
 8002ec4:	200005d9 	.word	0x200005d9

08002ec8 <divOut>:

static void divOut(unsigned int div) {
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  unsigned char dgt=0;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	73fb      	strb	r3, [r7, #15]
  num &= 0xffffffff;
 8002ed4:	4b10      	ldr	r3, [pc, #64]	; (8002f18 <divOut+0x50>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	4b0f      	ldr	r3, [pc, #60]	; (8002f18 <divOut+0x50>)
 8002eda:	601a      	str	r2, [r3, #0]
  while (num>=div) {
 8002edc:	e008      	b.n	8002ef0 <divOut+0x28>
    num -= div;
 8002ede:	4b0e      	ldr	r3, [pc, #56]	; (8002f18 <divOut+0x50>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	1ad2      	subs	r2, r2, r3
 8002ee6:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <divOut+0x50>)
 8002ee8:	601a      	str	r2, [r3, #0]
    dgt++;
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
 8002eec:	3301      	adds	r3, #1
 8002eee:	73fb      	strb	r3, [r7, #15]
}

static void divOut(unsigned int div) {
  unsigned char dgt=0;
  num &= 0xffffffff;
  while (num>=div) {
 8002ef0:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <divOut+0x50>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d2f1      	bcs.n	8002ede <divOut+0x16>
    num -= div;
    dgt++;
  }
  if (zs || dgt>0)
 8002efa:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <divOut+0x54>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d102      	bne.n	8002f08 <divOut+0x40>
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <divOut+0x48>
    outDgt(dgt);
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff ffba 	bl	8002e84 <outDgt>
}
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	200005d4 	.word	0x200005d4
 8002f1c:	200005d9 	.word	0x200005d9

08002f20 <t_printf>:
#endif
  return 1;
}

void t_printf(const char *fmt, ...)
{
 8002f20:	b40f      	push	{r0, r1, r2, r3}
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b084      	sub	sp, #16
 8002f26:	af00      	add	r7, sp, #0
  va_list va;
  char ch;
  char* p;

  va_start(va,fmt);
 8002f28:	f107 031c 	add.w	r3, r7, #28
 8002f2c:	603b      	str	r3, [r7, #0]

  while ((ch=*(fmt++))) {
 8002f2e:	e10f      	b.n	8003150 <t_printf+0x230>
    if (ch!='%') {
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
 8002f32:	2b25      	cmp	r3, #37	; 0x25
 8002f34:	d004      	beq.n	8002f40 <t_printf+0x20>
#ifdef ITM_TRACE
      ITM_SendChar ((uint32_t) ch);
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff ff61 	bl	8002e00 <ITM_SendChar>
 8002f3e:	e107      	b.n	8003150 <t_printf+0x230>
#else
      putchar(ch);
#endif
    }
    else {
      char lz=0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	71fb      	strb	r3, [r7, #7]
      char w=0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	71bb      	strb	r3, [r7, #6]
      ch=*(fmt++);
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	61ba      	str	r2, [r7, #24]
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	73fb      	strb	r3, [r7, #15]
      if (ch=='0') {
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
 8002f54:	2b30      	cmp	r3, #48	; 0x30
 8002f56:	d106      	bne.n	8002f66 <t_printf+0x46>
	ch=*(fmt++);
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	1c5a      	adds	r2, r3, #1
 8002f5c:	61ba      	str	r2, [r7, #24]
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	73fb      	strb	r3, [r7, #15]
	lz=1;
 8002f62:	2301      	movs	r3, #1
 8002f64:	71fb      	strb	r3, [r7, #7]
      }
      if (ch>='0' && ch<='9') {
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	2b2f      	cmp	r3, #47	; 0x2f
 8002f6a:	d91d      	bls.n	8002fa8 <t_printf+0x88>
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
 8002f6e:	2b39      	cmp	r3, #57	; 0x39
 8002f70:	d81a      	bhi.n	8002fa8 <t_printf+0x88>
	w=0;
 8002f72:	2300      	movs	r3, #0
 8002f74:	71bb      	strb	r3, [r7, #6]
	while (ch>='0' && ch<='9') {
 8002f76:	e011      	b.n	8002f9c <t_printf+0x7c>
	  w=(((w<<2)+w)<<1)+ch-'0';
 8002f78:	79bb      	ldrb	r3, [r7, #6]
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	79bb      	ldrb	r3, [r7, #6]
 8002f80:	4413      	add	r3, r2
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	3b30      	subs	r3, #48	; 0x30
 8002f90:	71bb      	strb	r3, [r7, #6]
	  ch=*fmt++;
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	61ba      	str	r2, [r7, #24]
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	73fb      	strb	r3, [r7, #15]
	ch=*(fmt++);
	lz=1;
      }
      if (ch>='0' && ch<='9') {
	w=0;
	while (ch>='0' && ch<='9') {
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
 8002f9e:	2b2f      	cmp	r3, #47	; 0x2f
 8002fa0:	d902      	bls.n	8002fa8 <t_printf+0x88>
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
 8002fa4:	2b39      	cmp	r3, #57	; 0x39
 8002fa6:	d9e7      	bls.n	8002f78 <t_printf+0x58>
	  w=(((w<<2)+w)<<1)+ch-'0';
	  ch=*fmt++;
	}
      }
      bf=buf;
 8002fa8:	4b72      	ldr	r3, [pc, #456]	; (8003174 <t_printf+0x254>)
 8002faa:	4a73      	ldr	r2, [pc, #460]	; (8003178 <t_printf+0x258>)
 8002fac:	601a      	str	r2, [r3, #0]
      p=bf;
 8002fae:	4b71      	ldr	r3, [pc, #452]	; (8003174 <t_printf+0x254>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	60bb      	str	r3, [r7, #8]
      zs=0;
 8002fb4:	4b71      	ldr	r3, [pc, #452]	; (800317c <t_printf+0x25c>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	701a      	strb	r2, [r3, #0]
      switch (ch) {
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
 8002fbc:	2b63      	cmp	r3, #99	; 0x63
 8002fbe:	f000 8082 	beq.w	80030c6 <t_printf+0x1a6>
 8002fc2:	2b63      	cmp	r3, #99	; 0x63
 8002fc4:	dc08      	bgt.n	8002fd8 <t_printf+0xb8>
 8002fc6:	2b25      	cmp	r3, #37	; 0x25
 8002fc8:	f000 808c 	beq.w	80030e4 <t_printf+0x1c4>
 8002fcc:	2b58      	cmp	r3, #88	; 0x58
 8002fce:	d049      	beq.n	8003064 <t_printf+0x144>
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 80c7 	beq.w	8003164 <t_printf+0x244>
	p=va_arg(va, char*);
	break;
      case '%' :
	out('%');
      default:
	break;
 8002fd6:	e088      	b.n	80030ea <t_printf+0x1ca>
	}
      }
      bf=buf;
      p=bf;
      zs=0;
      switch (ch) {
 8002fd8:	2b73      	cmp	r3, #115	; 0x73
 8002fda:	d07d      	beq.n	80030d8 <t_printf+0x1b8>
 8002fdc:	2b73      	cmp	r3, #115	; 0x73
 8002fde:	dc02      	bgt.n	8002fe6 <t_printf+0xc6>
 8002fe0:	2b64      	cmp	r3, #100	; 0x64
 8002fe2:	d005      	beq.n	8002ff0 <t_printf+0xd0>
	p=va_arg(va, char*);
	break;
      case '%' :
	out('%');
      default:
	break;
 8002fe4:	e081      	b.n	80030ea <t_printf+0x1ca>
	}
      }
      bf=buf;
      p=bf;
      zs=0;
      switch (ch) {
 8002fe6:	2b75      	cmp	r3, #117	; 0x75
 8002fe8:	d002      	beq.n	8002ff0 <t_printf+0xd0>
 8002fea:	2b78      	cmp	r3, #120	; 0x78
 8002fec:	d03a      	beq.n	8003064 <t_printf+0x144>
	p=va_arg(va, char*);
	break;
      case '%' :
	out('%');
      default:
	break;
 8002fee:	e07c      	b.n	80030ea <t_printf+0x1ca>
      switch (ch) {
      case 0:
	goto abort;
      case 'u':
      case 'd' :
	num=va_arg(va, unsigned int);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	1d1a      	adds	r2, r3, #4
 8002ff4:	603a      	str	r2, [r7, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	4b61      	ldr	r3, [pc, #388]	; (8003180 <t_printf+0x260>)
 8002ffa:	601a      	str	r2, [r3, #0]
	if (ch=='d' && (int)num<0) {
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
 8002ffe:	2b64      	cmp	r3, #100	; 0x64
 8003000:	d10c      	bne.n	800301c <t_printf+0xfc>
 8003002:	4b5f      	ldr	r3, [pc, #380]	; (8003180 <t_printf+0x260>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	da08      	bge.n	800301c <t_printf+0xfc>
	  num = -(int)num;
 800300a:	4b5d      	ldr	r3, [pc, #372]	; (8003180 <t_printf+0x260>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	425b      	negs	r3, r3
 8003010:	461a      	mov	r2, r3
 8003012:	4b5b      	ldr	r3, [pc, #364]	; (8003180 <t_printf+0x260>)
 8003014:	601a      	str	r2, [r3, #0]
	  out('-');
 8003016:	202d      	movs	r0, #45	; 0x2d
 8003018:	f7ff ff20 	bl	8002e5c <out>
	}
	divOut(1000000000);
 800301c:	4859      	ldr	r0, [pc, #356]	; (8003184 <t_printf+0x264>)
 800301e:	f7ff ff53 	bl	8002ec8 <divOut>
	divOut(100000000);
 8003022:	4859      	ldr	r0, [pc, #356]	; (8003188 <t_printf+0x268>)
 8003024:	f7ff ff50 	bl	8002ec8 <divOut>
	divOut(10000000);
 8003028:	4858      	ldr	r0, [pc, #352]	; (800318c <t_printf+0x26c>)
 800302a:	f7ff ff4d 	bl	8002ec8 <divOut>
	divOut(1000000);
 800302e:	4858      	ldr	r0, [pc, #352]	; (8003190 <t_printf+0x270>)
 8003030:	f7ff ff4a 	bl	8002ec8 <divOut>
	divOut(100000);
 8003034:	4857      	ldr	r0, [pc, #348]	; (8003194 <t_printf+0x274>)
 8003036:	f7ff ff47 	bl	8002ec8 <divOut>
	divOut(10000);
 800303a:	f242 7010 	movw	r0, #10000	; 0x2710
 800303e:	f7ff ff43 	bl	8002ec8 <divOut>
	divOut(1000);
 8003042:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003046:	f7ff ff3f 	bl	8002ec8 <divOut>
	divOut(100);
 800304a:	2064      	movs	r0, #100	; 0x64
 800304c:	f7ff ff3c 	bl	8002ec8 <divOut>
	divOut(10);
 8003050:	200a      	movs	r0, #10
 8003052:	f7ff ff39 	bl	8002ec8 <divOut>
	outDgt(num);
 8003056:	4b4a      	ldr	r3, [pc, #296]	; (8003180 <t_printf+0x260>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	b2db      	uxtb	r3, r3
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff ff11 	bl	8002e84 <outDgt>
	break;
 8003062:	e043      	b.n	80030ec <t_printf+0x1cc>
      case 'x':
      case 'X' :
	uc= ch=='X';
 8003064:	7bfb      	ldrb	r3, [r7, #15]
 8003066:	2b58      	cmp	r3, #88	; 0x58
 8003068:	bf14      	ite	ne
 800306a:	2300      	movne	r3, #0
 800306c:	2301      	moveq	r3, #1
 800306e:	b2db      	uxtb	r3, r3
 8003070:	461a      	mov	r2, r3
 8003072:	4b49      	ldr	r3, [pc, #292]	; (8003198 <t_printf+0x278>)
 8003074:	701a      	strb	r2, [r3, #0]
	num=va_arg(va, unsigned int);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	1d1a      	adds	r2, r3, #4
 800307a:	603a      	str	r2, [r7, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	4b40      	ldr	r3, [pc, #256]	; (8003180 <t_printf+0x260>)
 8003080:	601a      	str	r2, [r3, #0]
	divOut(0x10000000);
 8003082:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003086:	f7ff ff1f 	bl	8002ec8 <divOut>
	divOut(0x1000000);
 800308a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800308e:	f7ff ff1b 	bl	8002ec8 <divOut>
	divOut(0x100000);
 8003092:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003096:	f7ff ff17 	bl	8002ec8 <divOut>
	divOut(0x10000);
 800309a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800309e:	f7ff ff13 	bl	8002ec8 <divOut>
	divOut(0x1000);
 80030a2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80030a6:	f7ff ff0f 	bl	8002ec8 <divOut>
	divOut(0x100);
 80030aa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80030ae:	f7ff ff0b 	bl	8002ec8 <divOut>
	divOut(0x10);
 80030b2:	2010      	movs	r0, #16
 80030b4:	f7ff ff08 	bl	8002ec8 <divOut>
	outDgt(num);
 80030b8:	4b31      	ldr	r3, [pc, #196]	; (8003180 <t_printf+0x260>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff fee0 	bl	8002e84 <outDgt>
	break;
 80030c4:	e012      	b.n	80030ec <t_printf+0x1cc>
      case 'c' :
	out((char)(va_arg(va, int)));
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	1d1a      	adds	r2, r3, #4
 80030ca:	603a      	str	r2, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff fec3 	bl	8002e5c <out>
	break;
 80030d6:	e009      	b.n	80030ec <t_printf+0x1cc>
      case 's' :
	p=va_arg(va, char*);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	1d1a      	adds	r2, r3, #4
 80030dc:	603a      	str	r2, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	60bb      	str	r3, [r7, #8]
	break;
 80030e2:	e003      	b.n	80030ec <t_printf+0x1cc>
      case '%' :
	out('%');
 80030e4:	2025      	movs	r0, #37	; 0x25
 80030e6:	f7ff feb9 	bl	8002e5c <out>
      default:
	break;
 80030ea:	bf00      	nop
      }
      *bf=0;
 80030ec:	4b21      	ldr	r3, [pc, #132]	; (8003174 <t_printf+0x254>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2200      	movs	r2, #0
 80030f2:	701a      	strb	r2, [r3, #0]
      bf=p;
 80030f4:	4b1f      	ldr	r3, [pc, #124]	; (8003174 <t_printf+0x254>)
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	601a      	str	r2, [r3, #0]
      while (*bf++ && w > 0)
 80030fa:	e002      	b.n	8003102 <t_printf+0x1e2>
	w--;
 80030fc:	79bb      	ldrb	r3, [r7, #6]
 80030fe:	3b01      	subs	r3, #1
 8003100:	71bb      	strb	r3, [r7, #6]
      default:
	break;
      }
      *bf=0;
      bf=p;
      while (*bf++ && w > 0)
 8003102:	4b1c      	ldr	r3, [pc, #112]	; (8003174 <t_printf+0x254>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	1c59      	adds	r1, r3, #1
 8003108:	4a1a      	ldr	r2, [pc, #104]	; (8003174 <t_printf+0x254>)
 800310a:	6011      	str	r1, [r2, #0]
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <t_printf+0x1f8>
 8003112:	79bb      	ldrb	r3, [r7, #6]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1f1      	bne.n	80030fc <t_printf+0x1dc>
	w--;
      while (w-- > 0)
 8003118:	e008      	b.n	800312c <t_printf+0x20c>
	{
#ifdef ITM_TRACE
	  ITM_SendChar ((uint32_t) (lz ? '0' : ' '));
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <t_printf+0x204>
 8003120:	2330      	movs	r3, #48	; 0x30
 8003122:	e000      	b.n	8003126 <t_printf+0x206>
 8003124:	2320      	movs	r3, #32
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff fe6a 	bl	8002e00 <ITM_SendChar>
      }
      *bf=0;
      bf=p;
      while (*bf++ && w > 0)
	w--;
      while (w-- > 0)
 800312c:	79bb      	ldrb	r3, [r7, #6]
 800312e:	1e5a      	subs	r2, r3, #1
 8003130:	71ba      	strb	r2, [r7, #6]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f1      	bne.n	800311a <t_printf+0x1fa>
#else
	  putchar(lz ? '0' : ' ');
#endif
	}

      while ((ch= *p++))
 8003136:	e003      	b.n	8003140 <t_printf+0x220>
	{
#ifdef ITM_TRACE
	  ITM_SendChar ((uint32_t) ch);
 8003138:	7bfb      	ldrb	r3, [r7, #15]
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff fe60 	bl	8002e00 <ITM_SendChar>
#else
	  putchar(lz ? '0' : ' ');
#endif
	}

      while ((ch= *p++))
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	1c5a      	adds	r2, r3, #1
 8003144:	60ba      	str	r2, [r7, #8]
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	73fb      	strb	r3, [r7, #15]
 800314a:	7bfb      	ldrb	r3, [r7, #15]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1f3      	bne.n	8003138 <t_printf+0x218>
  char ch;
  char* p;

  va_start(va,fmt);

  while ((ch=*(fmt++))) {
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	61ba      	str	r2, [r7, #24]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	73fb      	strb	r3, [r7, #15]
 800315a:	7bfb      	ldrb	r3, [r7, #15]
 800315c:	2b00      	cmp	r3, #0
 800315e:	f47f aee7 	bne.w	8002f30 <t_printf+0x10>
 8003162:	e000      	b.n	8003166 <t_printf+0x246>
      bf=buf;
      p=bf;
      zs=0;
      switch (ch) {
      case 0:
	goto abort;
 8003164:	bf00      	nop
	}
    }
  }
 abort:;
  va_end(va);
}
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800316e:	b004      	add	sp, #16
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	200005c4 	.word	0x200005c4
 8003178:	200005c8 	.word	0x200005c8
 800317c:	200005d9 	.word	0x200005d9
 8003180:	200005d4 	.word	0x200005d4
 8003184:	3b9aca00 	.word	0x3b9aca00
 8003188:	05f5e100 	.word	0x05f5e100
 800318c:	00989680 	.word	0x00989680
 8003190:	000f4240 	.word	0x000f4240
 8003194:	000186a0 	.word	0x000186a0
 8003198:	200005d8 	.word	0x200005d8

0800319c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80031a8:	f7fe f88a 	bl	80012c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80031ac:	4b3d      	ldr	r3, [pc, #244]	; (80032a4 <pvPortMalloc+0x108>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80031b4:	f000 f8c8 	bl	8003348 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the xBlockLink structure 
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80031b8:	4b3b      	ldr	r3, [pc, #236]	; (80032a8 <pvPortMalloc+0x10c>)
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4013      	ands	r3, r2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d163      	bne.n	800328c <pvPortMalloc+0xf0>
		{
			/* The wanted size is increased so it can contain a xBlockLink
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00d      	beq.n	80031e6 <pvPortMalloc+0x4a>
			{
				xWantedSize += heapSTRUCT_SIZE;
 80031ca:	2308      	movs	r3, #8
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	4413      	add	r3, r2
 80031d0:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number 
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d004      	beq.n	80031e6 <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f023 0307 	bic.w	r3, r3, #7
 80031e2:	3308      	adds	r3, #8
 80031e4:	607b      	str	r3, [r7, #4]
				}
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d04f      	beq.n	800328c <pvPortMalloc+0xf0>
 80031ec:	4b2f      	ldr	r3, [pc, #188]	; (80032ac <pvPortMalloc+0x110>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d84a      	bhi.n	800328c <pvPortMalloc+0xf0>
			{
				/* Traverse the list from the start	(lowest address) block until 
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80031f6:	4b2e      	ldr	r3, [pc, #184]	; (80032b0 <pvPortMalloc+0x114>)
 80031f8:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80031fa:	4b2d      	ldr	r3, [pc, #180]	; (80032b0 <pvPortMalloc+0x114>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003200:	e004      	b.n	800320c <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until 
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	429a      	cmp	r2, r3
 8003214:	d203      	bcs.n	800321e <pvPortMalloc+0x82>
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1f1      	bne.n	8003202 <pvPortMalloc+0x66>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size 
				was	not found. */
				if( pxBlock != pxEnd )
 800321e:	4b21      	ldr	r3, [pc, #132]	; (80032a4 <pvPortMalloc+0x108>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	429a      	cmp	r2, r3
 8003226:	d031      	beq.n	800328c <pvPortMalloc+0xf0>
				{
					/* Return the memory space pointed to - jumping over the 
					xBlockLink structure at its start. */
					pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	2308      	movs	r3, #8
 800322e:	4413      	add	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out 
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into 
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	1ad2      	subs	r2, r2, r3
 8003242:	2308      	movs	r3, #8
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	429a      	cmp	r2, r3
 8003248:	d90f      	bls.n	800326a <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new 
						block following the number of bytes requested. The void 
						cast is used to prevent byte alignment warnings from the 
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4413      	add	r3, r2
 8003250:	60bb      	str	r3, [r7, #8]

						/* Calculate the sizes of two blocks split from the 
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	1ad2      	subs	r2, r2, r3
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8003264:	68b8      	ldr	r0, [r7, #8]
 8003266:	f000 f8bd 	bl	80033e4 <prvInsertBlockIntoFreeList>
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800326a:	4b10      	ldr	r3, [pc, #64]	; (80032ac <pvPortMalloc+0x110>)
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	1ad2      	subs	r2, r2, r3
 8003274:	4b0d      	ldr	r3, [pc, #52]	; (80032ac <pvPortMalloc+0x110>)
 8003276:	601a      	str	r2, [r3, #0]

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <pvPortMalloc+0x10c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	431a      	orrs	r2, r3
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	xTaskResumeAll();
 800328c:	f7fe f826 	bl	80012dc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <pvPortMalloc+0xfe>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8003296:	f7fd fd85 	bl	8000da4 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 800329a:	68fb      	ldr	r3, [r7, #12]
}
 800329c:	4618      	mov	r0, r3
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	200131e4 	.word	0x200131e4
 80032a8:	200131e8 	.word	0x200131e8
 80032ac:	2000001c 	.word	0x2000001c
 80032b0:	200131dc 	.word	0x200131dc

080032b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	60fb      	str	r3, [r7, #12]
xBlockLink *pxLink;

	if( pv != NULL )
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d038      	beq.n	8003338 <vPortFree+0x84>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 80032c6:	2308      	movs	r3, #8
 80032c8:	425b      	negs	r3, r3
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4413      	add	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	4b19      	ldr	r3, [pc, #100]	; (8003340 <vPortFree+0x8c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4013      	ands	r3, r2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d102      	bne.n	80032e8 <vPortFree+0x34>
 80032e2:	f7ff fa7d 	bl	80027e0 <ulPortSetInterruptMask>
 80032e6:	e7fe      	b.n	80032e6 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <vPortFree+0x42>
 80032f0:	f7ff fa76 	bl	80027e0 <ulPortSetInterruptMask>
 80032f4:	e7fe      	b.n	80032f4 <vPortFree+0x40>
		
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	4b11      	ldr	r3, [pc, #68]	; (8003340 <vPortFree+0x8c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4013      	ands	r3, r2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d019      	beq.n	8003338 <vPortFree+0x84>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d115      	bne.n	8003338 <vPortFree+0x84>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <vPortFree+0x8c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	43db      	mvns	r3, r3
 8003316:	401a      	ands	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800331c:	f7fd ffd0 	bl	80012c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	4b07      	ldr	r3, [pc, #28]	; (8003344 <vPortFree+0x90>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	441a      	add	r2, r3
 800332a:	4b06      	ldr	r3, [pc, #24]	; (8003344 <vPortFree+0x90>)
 800332c:	601a      	str	r2, [r3, #0]
					prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
 800332e:	68b8      	ldr	r0, [r7, #8]
 8003330:	f000 f858 	bl	80033e4 <prvInsertBlockIntoFreeList>
					traceFREE( pv, pxLink->xBlockSize );
				}
				xTaskResumeAll();
 8003334:	f7fd ffd2 	bl	80012dc <xTaskResumeAll>
			}
		}
	}
}
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	200131e8 	.word	0x200131e8
 8003344:	2000001c 	.word	0x2000001c

08003348 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
xBlockLink *pxFirstFreeBlock;
unsigned char *pucHeapEnd, *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
 800334e:	4b1f      	ldr	r3, [pc, #124]	; (80033cc <prvHeapInit+0x84>)
 8003350:	f023 0307 	bic.w	r3, r3, #7
 8003354:	60fb      	str	r3, [r7, #12]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003356:	4b1e      	ldr	r3, [pc, #120]	; (80033d0 <prvHeapInit+0x88>)
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800335c:	4b1c      	ldr	r3, [pc, #112]	; (80033d0 <prvHeapInit+0x88>)
 800335e:	2200      	movs	r2, #0
 8003360:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = pucAlignedHeap + xTotalHeapSize;
 8003362:	4b1c      	ldr	r3, [pc, #112]	; (80033d4 <prvHeapInit+0x8c>)
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4413      	add	r3, r2
 8003368:	60bb      	str	r3, [r7, #8]
	pucHeapEnd -= heapSTRUCT_SIZE;
 800336a:	2308      	movs	r3, #8
 800336c:	425b      	negs	r3, r3
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	4413      	add	r3, r2
 8003372:	60bb      	str	r3, [r7, #8]
	pxEnd = ( void * ) pucHeapEnd;
 8003374:	4b18      	ldr	r3, [pc, #96]	; (80033d8 <prvHeapInit+0x90>)
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	601a      	str	r2, [r3, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
 800337a:	4b17      	ldr	r3, [pc, #92]	; (80033d8 <prvHeapInit+0x90>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <prvHeapInit+0x44>
 8003386:	f7ff fa2b 	bl	80027e0 <ulPortSetInterruptMask>
 800338a:	e7fe      	b.n	800338a <prvHeapInit+0x42>
	pxEnd->xBlockSize = 0;
 800338c:	4b12      	ldr	r3, [pc, #72]	; (80033d8 <prvHeapInit+0x90>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2200      	movs	r2, #0
 8003392:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003394:	4b10      	ldr	r3, [pc, #64]	; (80033d8 <prvHeapInit+0x90>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	607b      	str	r3, [r7, #4]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
 80033a0:	4a0c      	ldr	r2, [pc, #48]	; (80033d4 <prvHeapInit+0x8c>)
 80033a2:	2308      	movs	r3, #8
 80033a4:	1ad2      	subs	r2, r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80033aa:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <prvHeapInit+0x90>)
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	601a      	str	r2, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
 80033b2:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <prvHeapInit+0x94>)
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	2308      	movs	r3, #8
 80033b8:	1ad2      	subs	r2, r2, r3
 80033ba:	4b08      	ldr	r3, [pc, #32]	; (80033dc <prvHeapInit+0x94>)
 80033bc:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80033be:	4b08      	ldr	r3, [pc, #32]	; (80033e0 <prvHeapInit+0x98>)
 80033c0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80033c4:	601a      	str	r2, [r3, #0]
}
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	200005e4 	.word	0x200005e4
 80033d0:	200131dc 	.word	0x200131dc
 80033d4:	00012bf8 	.word	0x00012bf8
 80033d8:	200131e4 	.word	0x200131e4
 80033dc:	2000001c 	.word	0x2000001c
 80033e0:	200131e8 	.word	0x200131e8

080033e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80033ec:	4b27      	ldr	r3, [pc, #156]	; (800348c <prvInsertBlockIntoFreeList+0xa8>)
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	e002      	b.n	80033f8 <prvInsertBlockIntoFreeList+0x14>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d3f7      	bcc.n	80033f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	441a      	add	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	429a      	cmp	r2, r3
 8003412:	d108      	bne.n	8003426 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	441a      	add	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	607b      	str	r3, [r7, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	441a      	add	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d118      	bne.n	800346c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	4b14      	ldr	r3, [pc, #80]	; (8003490 <prvInsertBlockIntoFreeList+0xac>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d00d      	beq.n	8003462 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	441a      	add	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	e008      	b.n	8003474 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003462:	4b0b      	ldr	r3, [pc, #44]	; (8003490 <prvInsertBlockIntoFreeList+0xac>)
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	e003      	b.n	8003474 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	429a      	cmp	r2, r3
 800347a:	d002      	beq.n	8003482 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	601a      	str	r2, [r3, #0]
	}
}
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	200131dc 	.word	0x200131dc
 8003490:	200131e4 	.word	0x200131e4

08003494 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034a2:	d013      	beq.n	80034cc <NVIC_PriorityGroupConfig+0x38>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80034aa:	d00f      	beq.n	80034cc <NVIC_PriorityGroupConfig+0x38>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80034b2:	d00b      	beq.n	80034cc <NVIC_PriorityGroupConfig+0x38>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ba:	d007      	beq.n	80034cc <NVIC_PriorityGroupConfig+0x38>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034c2:	d003      	beq.n	80034cc <NVIC_PriorityGroupConfig+0x38>
 80034c4:	4806      	ldr	r0, [pc, #24]	; (80034e0 <NVIC_PriorityGroupConfig+0x4c>)
 80034c6:	2173      	movs	r1, #115	; 0x73
 80034c8:	f7fd fc80 	bl	8000dcc <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80034cc:	4a05      	ldr	r2, [pc, #20]	; (80034e4 <NVIC_PriorityGroupConfig+0x50>)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034d8:	60d3      	str	r3, [r2, #12]
}
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	08005998 	.word	0x08005998
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80034f0:	2300      	movs	r3, #0
 80034f2:	73fb      	strb	r3, [r7, #15]
 80034f4:	2300      	movs	r3, #0
 80034f6:	73bb      	strb	r3, [r7, #14]
 80034f8:	230f      	movs	r3, #15
 80034fa:	737b      	strb	r3, [r7, #13]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	78db      	ldrb	r3, [r3, #3]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d007      	beq.n	8003514 <NVIC_Init+0x2c>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	78db      	ldrb	r3, [r3, #3]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d003      	beq.n	8003514 <NVIC_Init+0x2c>
 800350c:	4830      	ldr	r0, [pc, #192]	; (80035d0 <NVIC_Init+0xe8>)
 800350e:	2187      	movs	r1, #135	; 0x87
 8003510:	f7fd fc5c 	bl	8000dcc <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	785b      	ldrb	r3, [r3, #1]
 8003518:	2b0f      	cmp	r3, #15
 800351a:	d903      	bls.n	8003524 <NVIC_Init+0x3c>
 800351c:	482c      	ldr	r0, [pc, #176]	; (80035d0 <NVIC_Init+0xe8>)
 800351e:	2188      	movs	r1, #136	; 0x88
 8003520:	f7fd fc54 	bl	8000dcc <assert_failed>
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	789b      	ldrb	r3, [r3, #2]
 8003528:	2b0f      	cmp	r3, #15
 800352a:	d903      	bls.n	8003534 <NVIC_Init+0x4c>
 800352c:	4828      	ldr	r0, [pc, #160]	; (80035d0 <NVIC_Init+0xe8>)
 800352e:	2189      	movs	r1, #137	; 0x89
 8003530:	f7fd fc4c 	bl	8000dcc <assert_failed>
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	78db      	ldrb	r3, [r3, #3]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d037      	beq.n	80035ac <NVIC_Init+0xc4>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800353c:	4b25      	ldr	r3, [pc, #148]	; (80035d4 <NVIC_Init+0xec>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	43db      	mvns	r3, r3
 8003542:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003546:	0a1b      	lsrs	r3, r3, #8
 8003548:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800354a:	7bfb      	ldrb	r3, [r7, #15]
 800354c:	f1c3 0304 	rsb	r3, r3, #4
 8003550:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8003552:	7b7a      	ldrb	r2, [r7, #13]
 8003554:	7bfb      	ldrb	r3, [r7, #15]
 8003556:	fa42 f303 	asr.w	r3, r2, r3
 800355a:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	785b      	ldrb	r3, [r3, #1]
 8003560:	461a      	mov	r2, r3
 8003562:	7bbb      	ldrb	r3, [r7, #14]
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	789a      	ldrb	r2, [r3, #2]
 800356e:	7b7b      	ldrb	r3, [r7, #13]
 8003570:	4013      	ands	r3, r2
 8003572:	b2da      	uxtb	r2, r3
 8003574:	7bfb      	ldrb	r3, [r7, #15]
 8003576:	4313      	orrs	r3, r2
 8003578:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 800357a:	7bfb      	ldrb	r3, [r7, #15]
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8003580:	4a15      	ldr	r2, [pc, #84]	; (80035d8 <NVIC_Init+0xf0>)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	4413      	add	r3, r2
 8003588:	7bfa      	ldrb	r2, [r7, #15]
 800358a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800358e:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <NVIC_Init+0xf0>)
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	7812      	ldrb	r2, [r2, #0]
 8003594:	0952      	lsrs	r2, r2, #5
 8003596:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	7809      	ldrb	r1, [r1, #0]
 800359c:	f001 011f 	and.w	r1, r1, #31
 80035a0:	2001      	movs	r0, #1
 80035a2:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80035a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80035aa:	e00e      	b.n	80035ca <NVIC_Init+0xe2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80035ac:	4b0a      	ldr	r3, [pc, #40]	; (80035d8 <NVIC_Init+0xf0>)
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	7812      	ldrb	r2, [r2, #0]
 80035b2:	0952      	lsrs	r2, r2, #5
 80035b4:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	7809      	ldrb	r1, [r1, #0]
 80035ba:	f001 011f 	and.w	r1, r1, #31
 80035be:	2001      	movs	r0, #1
 80035c0:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80035c4:	3220      	adds	r2, #32
 80035c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	08005998 	.word	0x08005998
 80035d4:	e000ed00 	.word	0xe000ed00
 80035d8:	e000e100 	.word	0xe000e100

080035dc <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	4b72      	ldr	r3, [pc, #456]	; (80037b0 <DMA_DeInit+0x1d4>)
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d03f      	beq.n	800366c <DMA_DeInit+0x90>
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	4b71      	ldr	r3, [pc, #452]	; (80037b4 <DMA_DeInit+0x1d8>)
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d03b      	beq.n	800366c <DMA_DeInit+0x90>
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	4b70      	ldr	r3, [pc, #448]	; (80037b8 <DMA_DeInit+0x1dc>)
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d037      	beq.n	800366c <DMA_DeInit+0x90>
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	4b6f      	ldr	r3, [pc, #444]	; (80037bc <DMA_DeInit+0x1e0>)
 8003600:	429a      	cmp	r2, r3
 8003602:	d033      	beq.n	800366c <DMA_DeInit+0x90>
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	4b6e      	ldr	r3, [pc, #440]	; (80037c0 <DMA_DeInit+0x1e4>)
 8003608:	429a      	cmp	r2, r3
 800360a:	d02f      	beq.n	800366c <DMA_DeInit+0x90>
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	4b6d      	ldr	r3, [pc, #436]	; (80037c4 <DMA_DeInit+0x1e8>)
 8003610:	429a      	cmp	r2, r3
 8003612:	d02b      	beq.n	800366c <DMA_DeInit+0x90>
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	4b6c      	ldr	r3, [pc, #432]	; (80037c8 <DMA_DeInit+0x1ec>)
 8003618:	429a      	cmp	r2, r3
 800361a:	d027      	beq.n	800366c <DMA_DeInit+0x90>
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	4b6b      	ldr	r3, [pc, #428]	; (80037cc <DMA_DeInit+0x1f0>)
 8003620:	429a      	cmp	r2, r3
 8003622:	d023      	beq.n	800366c <DMA_DeInit+0x90>
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	4b6a      	ldr	r3, [pc, #424]	; (80037d0 <DMA_DeInit+0x1f4>)
 8003628:	429a      	cmp	r2, r3
 800362a:	d01f      	beq.n	800366c <DMA_DeInit+0x90>
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	4b69      	ldr	r3, [pc, #420]	; (80037d4 <DMA_DeInit+0x1f8>)
 8003630:	429a      	cmp	r2, r3
 8003632:	d01b      	beq.n	800366c <DMA_DeInit+0x90>
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	4b68      	ldr	r3, [pc, #416]	; (80037d8 <DMA_DeInit+0x1fc>)
 8003638:	429a      	cmp	r2, r3
 800363a:	d017      	beq.n	800366c <DMA_DeInit+0x90>
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	4b67      	ldr	r3, [pc, #412]	; (80037dc <DMA_DeInit+0x200>)
 8003640:	429a      	cmp	r2, r3
 8003642:	d013      	beq.n	800366c <DMA_DeInit+0x90>
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	4b66      	ldr	r3, [pc, #408]	; (80037e0 <DMA_DeInit+0x204>)
 8003648:	429a      	cmp	r2, r3
 800364a:	d00f      	beq.n	800366c <DMA_DeInit+0x90>
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	4b65      	ldr	r3, [pc, #404]	; (80037e4 <DMA_DeInit+0x208>)
 8003650:	429a      	cmp	r2, r3
 8003652:	d00b      	beq.n	800366c <DMA_DeInit+0x90>
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	4b64      	ldr	r3, [pc, #400]	; (80037e8 <DMA_DeInit+0x20c>)
 8003658:	429a      	cmp	r2, r3
 800365a:	d007      	beq.n	800366c <DMA_DeInit+0x90>
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	4b63      	ldr	r3, [pc, #396]	; (80037ec <DMA_DeInit+0x210>)
 8003660:	429a      	cmp	r2, r3
 8003662:	d003      	beq.n	800366c <DMA_DeInit+0x90>
 8003664:	4862      	ldr	r0, [pc, #392]	; (80037f0 <DMA_DeInit+0x214>)
 8003666:	21bf      	movs	r1, #191	; 0xbf
 8003668:	f7fd fbb0 	bl	8000dcc <assert_failed>

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f023 0201 	bic.w	r2, r3, #1
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2221      	movs	r2, #33	; 0x21
 800369a:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	4b44      	ldr	r3, [pc, #272]	; (80037b0 <DMA_DeInit+0x1d4>)
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d103      	bne.n	80036ac <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 80036a4:	4b53      	ldr	r3, [pc, #332]	; (80037f4 <DMA_DeInit+0x218>)
 80036a6:	223d      	movs	r2, #61	; 0x3d
 80036a8:	609a      	str	r2, [r3, #8]
 80036aa:	e07e      	b.n	80037aa <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	4b41      	ldr	r3, [pc, #260]	; (80037b4 <DMA_DeInit+0x1d8>)
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d104      	bne.n	80036be <DMA_DeInit+0xe2>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 80036b4:	4b4f      	ldr	r3, [pc, #316]	; (80037f4 <DMA_DeInit+0x218>)
 80036b6:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80036ba:	609a      	str	r2, [r3, #8]
 80036bc:	e075      	b.n	80037aa <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	4b3d      	ldr	r3, [pc, #244]	; (80037b8 <DMA_DeInit+0x1dc>)
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d104      	bne.n	80036d0 <DMA_DeInit+0xf4>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 80036c6:	4b4b      	ldr	r3, [pc, #300]	; (80037f4 <DMA_DeInit+0x218>)
 80036c8:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80036cc:	609a      	str	r2, [r3, #8]
 80036ce:	e06c      	b.n	80037aa <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	4b3a      	ldr	r3, [pc, #232]	; (80037bc <DMA_DeInit+0x1e0>)
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d104      	bne.n	80036e2 <DMA_DeInit+0x106>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 80036d8:	4b46      	ldr	r3, [pc, #280]	; (80037f4 <DMA_DeInit+0x218>)
 80036da:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80036de:	609a      	str	r2, [r3, #8]
 80036e0:	e063      	b.n	80037aa <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	4b36      	ldr	r3, [pc, #216]	; (80037c0 <DMA_DeInit+0x1e4>)
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d103      	bne.n	80036f2 <DMA_DeInit+0x116>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 80036ea:	4b42      	ldr	r3, [pc, #264]	; (80037f4 <DMA_DeInit+0x218>)
 80036ec:	4a42      	ldr	r2, [pc, #264]	; (80037f8 <DMA_DeInit+0x21c>)
 80036ee:	60da      	str	r2, [r3, #12]
 80036f0:	e05b      	b.n	80037aa <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	4b33      	ldr	r3, [pc, #204]	; (80037c4 <DMA_DeInit+0x1e8>)
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d103      	bne.n	8003702 <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 80036fa:	4b3e      	ldr	r3, [pc, #248]	; (80037f4 <DMA_DeInit+0x218>)
 80036fc:	4a3f      	ldr	r2, [pc, #252]	; (80037fc <DMA_DeInit+0x220>)
 80036fe:	60da      	str	r2, [r3, #12]
 8003700:	e053      	b.n	80037aa <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	4b30      	ldr	r3, [pc, #192]	; (80037c8 <DMA_DeInit+0x1ec>)
 8003706:	429a      	cmp	r2, r3
 8003708:	d103      	bne.n	8003712 <DMA_DeInit+0x136>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 800370a:	4b3a      	ldr	r3, [pc, #232]	; (80037f4 <DMA_DeInit+0x218>)
 800370c:	4a3c      	ldr	r2, [pc, #240]	; (8003800 <DMA_DeInit+0x224>)
 800370e:	60da      	str	r2, [r3, #12]
 8003710:	e04b      	b.n	80037aa <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	4b2d      	ldr	r3, [pc, #180]	; (80037cc <DMA_DeInit+0x1f0>)
 8003716:	429a      	cmp	r2, r3
 8003718:	d104      	bne.n	8003724 <DMA_DeInit+0x148>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 800371a:	4b36      	ldr	r3, [pc, #216]	; (80037f4 <DMA_DeInit+0x218>)
 800371c:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8003720:	60da      	str	r2, [r3, #12]
 8003722:	e042      	b.n	80037aa <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	4b2a      	ldr	r3, [pc, #168]	; (80037d0 <DMA_DeInit+0x1f4>)
 8003728:	429a      	cmp	r2, r3
 800372a:	d103      	bne.n	8003734 <DMA_DeInit+0x158>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 800372c:	4b35      	ldr	r3, [pc, #212]	; (8003804 <DMA_DeInit+0x228>)
 800372e:	223d      	movs	r2, #61	; 0x3d
 8003730:	609a      	str	r2, [r3, #8]
 8003732:	e03a      	b.n	80037aa <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	4b27      	ldr	r3, [pc, #156]	; (80037d4 <DMA_DeInit+0x1f8>)
 8003738:	429a      	cmp	r2, r3
 800373a:	d104      	bne.n	8003746 <DMA_DeInit+0x16a>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 800373c:	4b31      	ldr	r3, [pc, #196]	; (8003804 <DMA_DeInit+0x228>)
 800373e:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	e031      	b.n	80037aa <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	4b23      	ldr	r3, [pc, #140]	; (80037d8 <DMA_DeInit+0x1fc>)
 800374a:	429a      	cmp	r2, r3
 800374c:	d104      	bne.n	8003758 <DMA_DeInit+0x17c>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 800374e:	4b2d      	ldr	r3, [pc, #180]	; (8003804 <DMA_DeInit+0x228>)
 8003750:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8003754:	609a      	str	r2, [r3, #8]
 8003756:	e028      	b.n	80037aa <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	4b20      	ldr	r3, [pc, #128]	; (80037dc <DMA_DeInit+0x200>)
 800375c:	429a      	cmp	r2, r3
 800375e:	d104      	bne.n	800376a <DMA_DeInit+0x18e>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8003760:	4b28      	ldr	r3, [pc, #160]	; (8003804 <DMA_DeInit+0x228>)
 8003762:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8003766:	609a      	str	r2, [r3, #8]
 8003768:	e01f      	b.n	80037aa <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	4b1c      	ldr	r3, [pc, #112]	; (80037e0 <DMA_DeInit+0x204>)
 800376e:	429a      	cmp	r2, r3
 8003770:	d103      	bne.n	800377a <DMA_DeInit+0x19e>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8003772:	4b24      	ldr	r3, [pc, #144]	; (8003804 <DMA_DeInit+0x228>)
 8003774:	4a20      	ldr	r2, [pc, #128]	; (80037f8 <DMA_DeInit+0x21c>)
 8003776:	60da      	str	r2, [r3, #12]
 8003778:	e017      	b.n	80037aa <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	4b19      	ldr	r3, [pc, #100]	; (80037e4 <DMA_DeInit+0x208>)
 800377e:	429a      	cmp	r2, r3
 8003780:	d103      	bne.n	800378a <DMA_DeInit+0x1ae>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8003782:	4b20      	ldr	r3, [pc, #128]	; (8003804 <DMA_DeInit+0x228>)
 8003784:	4a1d      	ldr	r2, [pc, #116]	; (80037fc <DMA_DeInit+0x220>)
 8003786:	60da      	str	r2, [r3, #12]
 8003788:	e00f      	b.n	80037aa <DMA_DeInit+0x1ce>
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	4b16      	ldr	r3, [pc, #88]	; (80037e8 <DMA_DeInit+0x20c>)
 800378e:	429a      	cmp	r2, r3
 8003790:	d103      	bne.n	800379a <DMA_DeInit+0x1be>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8003792:	4b1c      	ldr	r3, [pc, #112]	; (8003804 <DMA_DeInit+0x228>)
 8003794:	4a1a      	ldr	r2, [pc, #104]	; (8003800 <DMA_DeInit+0x224>)
 8003796:	60da      	str	r2, [r3, #12]
 8003798:	e007      	b.n	80037aa <DMA_DeInit+0x1ce>
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	4b13      	ldr	r3, [pc, #76]	; (80037ec <DMA_DeInit+0x210>)
 800379e:	429a      	cmp	r2, r3
 80037a0:	d103      	bne.n	80037aa <DMA_DeInit+0x1ce>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 80037a2:	4b18      	ldr	r3, [pc, #96]	; (8003804 <DMA_DeInit+0x228>)
 80037a4:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 80037a8:	60da      	str	r2, [r3, #12]
    }
  }
}
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40026010 	.word	0x40026010
 80037b4:	40026028 	.word	0x40026028
 80037b8:	40026040 	.word	0x40026040
 80037bc:	40026058 	.word	0x40026058
 80037c0:	40026070 	.word	0x40026070
 80037c4:	40026088 	.word	0x40026088
 80037c8:	400260a0 	.word	0x400260a0
 80037cc:	400260b8 	.word	0x400260b8
 80037d0:	40026410 	.word	0x40026410
 80037d4:	40026428 	.word	0x40026428
 80037d8:	40026440 	.word	0x40026440
 80037dc:	40026458 	.word	0x40026458
 80037e0:	40026470 	.word	0x40026470
 80037e4:	40026488 	.word	0x40026488
 80037e8:	400264a0 	.word	0x400264a0
 80037ec:	400264b8 	.word	0x400264b8
 80037f0:	080059e0 	.word	0x080059e0
 80037f4:	40026000 	.word	0x40026000
 80037f8:	2000003d 	.word	0x2000003d
 80037fc:	20000f40 	.word	0x20000f40
 8003800:	203d0000 	.word	0x203d0000
 8003804:	40026400 	.word	0x40026400

08003808 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003812:	2300      	movs	r3, #0
 8003814:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	4b98      	ldr	r3, [pc, #608]	; (8003a7c <DMA_Init+0x274>)
 800381a:	429a      	cmp	r2, r3
 800381c:	d040      	beq.n	80038a0 <DMA_Init+0x98>
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	4b97      	ldr	r3, [pc, #604]	; (8003a80 <DMA_Init+0x278>)
 8003822:	429a      	cmp	r2, r3
 8003824:	d03c      	beq.n	80038a0 <DMA_Init+0x98>
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	4b96      	ldr	r3, [pc, #600]	; (8003a84 <DMA_Init+0x27c>)
 800382a:	429a      	cmp	r2, r3
 800382c:	d038      	beq.n	80038a0 <DMA_Init+0x98>
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	4b95      	ldr	r3, [pc, #596]	; (8003a88 <DMA_Init+0x280>)
 8003832:	429a      	cmp	r2, r3
 8003834:	d034      	beq.n	80038a0 <DMA_Init+0x98>
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	4b94      	ldr	r3, [pc, #592]	; (8003a8c <DMA_Init+0x284>)
 800383a:	429a      	cmp	r2, r3
 800383c:	d030      	beq.n	80038a0 <DMA_Init+0x98>
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	4b93      	ldr	r3, [pc, #588]	; (8003a90 <DMA_Init+0x288>)
 8003842:	429a      	cmp	r2, r3
 8003844:	d02c      	beq.n	80038a0 <DMA_Init+0x98>
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	4b92      	ldr	r3, [pc, #584]	; (8003a94 <DMA_Init+0x28c>)
 800384a:	429a      	cmp	r2, r3
 800384c:	d028      	beq.n	80038a0 <DMA_Init+0x98>
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	4b91      	ldr	r3, [pc, #580]	; (8003a98 <DMA_Init+0x290>)
 8003852:	429a      	cmp	r2, r3
 8003854:	d024      	beq.n	80038a0 <DMA_Init+0x98>
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	4b90      	ldr	r3, [pc, #576]	; (8003a9c <DMA_Init+0x294>)
 800385a:	429a      	cmp	r2, r3
 800385c:	d020      	beq.n	80038a0 <DMA_Init+0x98>
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	4b8f      	ldr	r3, [pc, #572]	; (8003aa0 <DMA_Init+0x298>)
 8003862:	429a      	cmp	r2, r3
 8003864:	d01c      	beq.n	80038a0 <DMA_Init+0x98>
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	4b8e      	ldr	r3, [pc, #568]	; (8003aa4 <DMA_Init+0x29c>)
 800386a:	429a      	cmp	r2, r3
 800386c:	d018      	beq.n	80038a0 <DMA_Init+0x98>
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	4b8d      	ldr	r3, [pc, #564]	; (8003aa8 <DMA_Init+0x2a0>)
 8003872:	429a      	cmp	r2, r3
 8003874:	d014      	beq.n	80038a0 <DMA_Init+0x98>
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	4b8c      	ldr	r3, [pc, #560]	; (8003aac <DMA_Init+0x2a4>)
 800387a:	429a      	cmp	r2, r3
 800387c:	d010      	beq.n	80038a0 <DMA_Init+0x98>
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	4b8b      	ldr	r3, [pc, #556]	; (8003ab0 <DMA_Init+0x2a8>)
 8003882:	429a      	cmp	r2, r3
 8003884:	d00c      	beq.n	80038a0 <DMA_Init+0x98>
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	4b8a      	ldr	r3, [pc, #552]	; (8003ab4 <DMA_Init+0x2ac>)
 800388a:	429a      	cmp	r2, r3
 800388c:	d008      	beq.n	80038a0 <DMA_Init+0x98>
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	4b89      	ldr	r3, [pc, #548]	; (8003ab8 <DMA_Init+0x2b0>)
 8003892:	429a      	cmp	r2, r3
 8003894:	d004      	beq.n	80038a0 <DMA_Init+0x98>
 8003896:	4889      	ldr	r0, [pc, #548]	; (8003abc <DMA_Init+0x2b4>)
 8003898:	f44f 719e 	mov.w	r1, #316	; 0x13c
 800389c:	f7fd fa96 	bl	8000dcc <assert_failed>
  assert_param(IS_DMA_CHANNEL(DMA_InitStruct->DMA_Channel));
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d027      	beq.n	80038f8 <DMA_Init+0xf0>
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038b0:	d022      	beq.n	80038f8 <DMA_Init+0xf0>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038ba:	d01d      	beq.n	80038f8 <DMA_Init+0xf0>
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80038c4:	d018      	beq.n	80038f8 <DMA_Init+0xf0>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038ce:	d013      	beq.n	80038f8 <DMA_Init+0xf0>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80038d8:	d00e      	beq.n	80038f8 <DMA_Init+0xf0>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80038e2:	d009      	beq.n	80038f8 <DMA_Init+0xf0>
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80038ec:	d004      	beq.n	80038f8 <DMA_Init+0xf0>
 80038ee:	4873      	ldr	r0, [pc, #460]	; (8003abc <DMA_Init+0x2b4>)
 80038f0:	f240 113d 	movw	r1, #317	; 0x13d
 80038f4:	f7fd fa6a 	bl	8000dcc <assert_failed>
  assert_param(IS_DMA_DIRECTION(DMA_InitStruct->DMA_DIR));
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00c      	beq.n	800391a <DMA_Init+0x112>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	2b40      	cmp	r3, #64	; 0x40
 8003906:	d008      	beq.n	800391a <DMA_Init+0x112>
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	2b80      	cmp	r3, #128	; 0x80
 800390e:	d004      	beq.n	800391a <DMA_Init+0x112>
 8003910:	486a      	ldr	r0, [pc, #424]	; (8003abc <DMA_Init+0x2b4>)
 8003912:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8003916:	f7fd fa59 	bl	8000dcc <assert_failed>
  assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d004      	beq.n	800392c <DMA_Init+0x124>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800392a:	d304      	bcc.n	8003936 <DMA_Init+0x12e>
 800392c:	4863      	ldr	r0, [pc, #396]	; (8003abc <DMA_Init+0x2b4>)
 800392e:	f240 113f 	movw	r1, #319	; 0x13f
 8003932:	f7fd fa4b 	bl	8000dcc <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800393e:	d008      	beq.n	8003952 <DMA_Init+0x14a>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d004      	beq.n	8003952 <DMA_Init+0x14a>
 8003948:	485c      	ldr	r0, [pc, #368]	; (8003abc <DMA_Init+0x2b4>)
 800394a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800394e:	f7fd fa3d 	bl	8000dcc <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800395a:	d008      	beq.n	800396e <DMA_Init+0x166>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d004      	beq.n	800396e <DMA_Init+0x166>
 8003964:	4855      	ldr	r0, [pc, #340]	; (8003abc <DMA_Init+0x2b4>)
 8003966:	f240 1141 	movw	r1, #321	; 0x141
 800396a:	f7fd fa2f 	bl	8000dcc <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00e      	beq.n	8003994 <DMA_Init+0x18c>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800397e:	d009      	beq.n	8003994 <DMA_Init+0x18c>
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003988:	d004      	beq.n	8003994 <DMA_Init+0x18c>
 800398a:	484c      	ldr	r0, [pc, #304]	; (8003abc <DMA_Init+0x2b4>)
 800398c:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8003990:	f7fd fa1c 	bl	8000dcc <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00e      	beq.n	80039ba <DMA_Init+0x1b2>
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039a4:	d009      	beq.n	80039ba <DMA_Init+0x1b2>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039ae:	d004      	beq.n	80039ba <DMA_Init+0x1b2>
 80039b0:	4842      	ldr	r0, [pc, #264]	; (8003abc <DMA_Init+0x2b4>)
 80039b2:	f240 1143 	movw	r1, #323	; 0x143
 80039b6:	f7fd fa09 	bl	8000dcc <assert_failed>
  assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d009      	beq.n	80039d6 <DMA_Init+0x1ce>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ca:	d004      	beq.n	80039d6 <DMA_Init+0x1ce>
 80039cc:	483b      	ldr	r0, [pc, #236]	; (8003abc <DMA_Init+0x2b4>)
 80039ce:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80039d2:	f7fd f9fb 	bl	8000dcc <assert_failed>
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d013      	beq.n	8003a06 <DMA_Init+0x1fe>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039e6:	d00e      	beq.n	8003a06 <DMA_Init+0x1fe>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039f0:	d009      	beq.n	8003a06 <DMA_Init+0x1fe>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039fa:	d004      	beq.n	8003a06 <DMA_Init+0x1fe>
 80039fc:	482f      	ldr	r0, [pc, #188]	; (8003abc <DMA_Init+0x2b4>)
 80039fe:	f240 1145 	movw	r1, #325	; 0x145
 8003a02:	f7fd f9e3 	bl	8000dcc <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(DMA_InitStruct->DMA_FIFOMode));
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d008      	beq.n	8003a20 <DMA_Init+0x218>
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d004      	beq.n	8003a20 <DMA_Init+0x218>
 8003a16:	4829      	ldr	r0, [pc, #164]	; (8003abc <DMA_Init+0x2b4>)
 8003a18:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8003a1c:	f7fd f9d6 	bl	8000dcc <assert_failed>
  assert_param(IS_DMA_FIFO_THRESHOLD(DMA_InitStruct->DMA_FIFOThreshold));
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d010      	beq.n	8003a4a <DMA_Init+0x242>
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d00c      	beq.n	8003a4a <DMA_Init+0x242>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d008      	beq.n	8003a4a <DMA_Init+0x242>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3c:	2b03      	cmp	r3, #3
 8003a3e:	d004      	beq.n	8003a4a <DMA_Init+0x242>
 8003a40:	481e      	ldr	r0, [pc, #120]	; (8003abc <DMA_Init+0x2b4>)
 8003a42:	f240 1147 	movw	r1, #327	; 0x147
 8003a46:	f7fd f9c1 	bl	8000dcc <assert_failed>
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d036      	beq.n	8003ac0 <DMA_Init+0x2b8>
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a5a:	d031      	beq.n	8003ac0 <DMA_Init+0x2b8>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a64:	d02c      	beq.n	8003ac0 <DMA_Init+0x2b8>
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a6e:	d027      	beq.n	8003ac0 <DMA_Init+0x2b8>
 8003a70:	4812      	ldr	r0, [pc, #72]	; (8003abc <DMA_Init+0x2b4>)
 8003a72:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003a76:	f7fd f9a9 	bl	8000dcc <assert_failed>
 8003a7a:	e021      	b.n	8003ac0 <DMA_Init+0x2b8>
 8003a7c:	40026010 	.word	0x40026010
 8003a80:	40026028 	.word	0x40026028
 8003a84:	40026040 	.word	0x40026040
 8003a88:	40026058 	.word	0x40026058
 8003a8c:	40026070 	.word	0x40026070
 8003a90:	40026088 	.word	0x40026088
 8003a94:	400260a0 	.word	0x400260a0
 8003a98:	400260b8 	.word	0x400260b8
 8003a9c:	40026410 	.word	0x40026410
 8003aa0:	40026428 	.word	0x40026428
 8003aa4:	40026440 	.word	0x40026440
 8003aa8:	40026458 	.word	0x40026458
 8003aac:	40026470 	.word	0x40026470
 8003ab0:	40026488 	.word	0x40026488
 8003ab4:	400264a0 	.word	0x400264a0
 8003ab8:	400264b8 	.word	0x400264b8
 8003abc:	080059e0 	.word	0x080059e0
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d013      	beq.n	8003af0 <DMA_Init+0x2e8>
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003acc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ad0:	d00e      	beq.n	8003af0 <DMA_Init+0x2e8>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ada:	d009      	beq.n	8003af0 <DMA_Init+0x2e8>
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003ae4:	d004      	beq.n	8003af0 <DMA_Init+0x2e8>
 8003ae6:	4828      	ldr	r0, [pc, #160]	; (8003b88 <DMA_Init+0x380>)
 8003ae8:	f240 1149 	movw	r1, #329	; 0x149
 8003aec:	f7fd f96e 	bl	8000dcc <assert_failed>

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	4b24      	ldr	r3, [pc, #144]	; (8003b8c <DMA_Init+0x384>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8003b0c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003b18:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003b24:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8003b30:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b36:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f023 0307 	bic.w	r3, r3, #7
 8003b50:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	691a      	ldr	r2, [r3, #16]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	60da      	str	r2, [r3, #12]
}
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	080059e0 	.word	0x080059e0
 8003b8c:	f01c803f 	.word	0xf01c803f

08003b90 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	460b      	mov	r3, r1
 8003c06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	4b31      	ldr	r3, [pc, #196]	; (8003cd0 <DMA_Cmd+0xd4>)
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d040      	beq.n	8003c92 <DMA_Cmd+0x96>
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	4b30      	ldr	r3, [pc, #192]	; (8003cd4 <DMA_Cmd+0xd8>)
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d03c      	beq.n	8003c92 <DMA_Cmd+0x96>
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	4b2f      	ldr	r3, [pc, #188]	; (8003cd8 <DMA_Cmd+0xdc>)
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d038      	beq.n	8003c92 <DMA_Cmd+0x96>
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	4b2e      	ldr	r3, [pc, #184]	; (8003cdc <DMA_Cmd+0xe0>)
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d034      	beq.n	8003c92 <DMA_Cmd+0x96>
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	4b2d      	ldr	r3, [pc, #180]	; (8003ce0 <DMA_Cmd+0xe4>)
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d030      	beq.n	8003c92 <DMA_Cmd+0x96>
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	4b2c      	ldr	r3, [pc, #176]	; (8003ce4 <DMA_Cmd+0xe8>)
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d02c      	beq.n	8003c92 <DMA_Cmd+0x96>
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	4b2b      	ldr	r3, [pc, #172]	; (8003ce8 <DMA_Cmd+0xec>)
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d028      	beq.n	8003c92 <DMA_Cmd+0x96>
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	4b2a      	ldr	r3, [pc, #168]	; (8003cec <DMA_Cmd+0xf0>)
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d024      	beq.n	8003c92 <DMA_Cmd+0x96>
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	4b29      	ldr	r3, [pc, #164]	; (8003cf0 <DMA_Cmd+0xf4>)
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d020      	beq.n	8003c92 <DMA_Cmd+0x96>
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	4b28      	ldr	r3, [pc, #160]	; (8003cf4 <DMA_Cmd+0xf8>)
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d01c      	beq.n	8003c92 <DMA_Cmd+0x96>
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	4b27      	ldr	r3, [pc, #156]	; (8003cf8 <DMA_Cmd+0xfc>)
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d018      	beq.n	8003c92 <DMA_Cmd+0x96>
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	4b26      	ldr	r3, [pc, #152]	; (8003cfc <DMA_Cmd+0x100>)
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d014      	beq.n	8003c92 <DMA_Cmd+0x96>
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	4b25      	ldr	r3, [pc, #148]	; (8003d00 <DMA_Cmd+0x104>)
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d010      	beq.n	8003c92 <DMA_Cmd+0x96>
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	4b24      	ldr	r3, [pc, #144]	; (8003d04 <DMA_Cmd+0x108>)
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d00c      	beq.n	8003c92 <DMA_Cmd+0x96>
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	4b23      	ldr	r3, [pc, #140]	; (8003d08 <DMA_Cmd+0x10c>)
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d008      	beq.n	8003c92 <DMA_Cmd+0x96>
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	4b22      	ldr	r3, [pc, #136]	; (8003d0c <DMA_Cmd+0x110>)
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d004      	beq.n	8003c92 <DMA_Cmd+0x96>
 8003c88:	4821      	ldr	r0, [pc, #132]	; (8003d10 <DMA_Cmd+0x114>)
 8003c8a:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003c8e:	f7fd f89d 	bl	8000dcc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8003c92:	78fb      	ldrb	r3, [r7, #3]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d007      	beq.n	8003ca8 <DMA_Cmd+0xac>
 8003c98:	78fb      	ldrb	r3, [r7, #3]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d004      	beq.n	8003ca8 <DMA_Cmd+0xac>
 8003c9e:	481c      	ldr	r0, [pc, #112]	; (8003d10 <DMA_Cmd+0x114>)
 8003ca0:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8003ca4:	f7fd f892 	bl	8000dcc <assert_failed>

  if (NewState != DISABLE)
 8003ca8:	78fb      	ldrb	r3, [r7, #3]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d006      	beq.n	8003cbc <DMA_Cmd+0xc0>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f043 0201 	orr.w	r2, r3, #1
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	e005      	b.n	8003cc8 <DMA_Cmd+0xcc>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f023 0201 	bic.w	r2, r3, #1
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	601a      	str	r2, [r3, #0]
  }
}
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	40026010 	.word	0x40026010
 8003cd4:	40026028 	.word	0x40026028
 8003cd8:	40026040 	.word	0x40026040
 8003cdc:	40026058 	.word	0x40026058
 8003ce0:	40026070 	.word	0x40026070
 8003ce4:	40026088 	.word	0x40026088
 8003ce8:	400260a0 	.word	0x400260a0
 8003cec:	400260b8 	.word	0x400260b8
 8003cf0:	40026410 	.word	0x40026410
 8003cf4:	40026428 	.word	0x40026428
 8003cf8:	40026440 	.word	0x40026440
 8003cfc:	40026458 	.word	0x40026458
 8003d00:	40026470 	.word	0x40026470
 8003d04:	40026488 	.word	0x40026488
 8003d08:	400264a0 	.word	0x400264a0
 8003d0c:	400264b8 	.word	0x400264b8
 8003d10:	080059e0 	.word	0x080059e0

08003d14 <DMA_SetCurrDataCounter>:
  *         DMAy_SxPAR register is considered as Peripheral.
  *      
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	4b25      	ldr	r3, [pc, #148]	; (8003db8 <DMA_SetCurrDataCounter+0xa4>)
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d040      	beq.n	8003daa <DMA_SetCurrDataCounter+0x96>
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	4b24      	ldr	r3, [pc, #144]	; (8003dbc <DMA_SetCurrDataCounter+0xa8>)
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d03c      	beq.n	8003daa <DMA_SetCurrDataCounter+0x96>
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	4b23      	ldr	r3, [pc, #140]	; (8003dc0 <DMA_SetCurrDataCounter+0xac>)
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d038      	beq.n	8003daa <DMA_SetCurrDataCounter+0x96>
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	4b22      	ldr	r3, [pc, #136]	; (8003dc4 <DMA_SetCurrDataCounter+0xb0>)
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d034      	beq.n	8003daa <DMA_SetCurrDataCounter+0x96>
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	4b21      	ldr	r3, [pc, #132]	; (8003dc8 <DMA_SetCurrDataCounter+0xb4>)
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d030      	beq.n	8003daa <DMA_SetCurrDataCounter+0x96>
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	4b20      	ldr	r3, [pc, #128]	; (8003dcc <DMA_SetCurrDataCounter+0xb8>)
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d02c      	beq.n	8003daa <DMA_SetCurrDataCounter+0x96>
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	4b1f      	ldr	r3, [pc, #124]	; (8003dd0 <DMA_SetCurrDataCounter+0xbc>)
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d028      	beq.n	8003daa <DMA_SetCurrDataCounter+0x96>
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	4b1e      	ldr	r3, [pc, #120]	; (8003dd4 <DMA_SetCurrDataCounter+0xc0>)
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d024      	beq.n	8003daa <DMA_SetCurrDataCounter+0x96>
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	4b1d      	ldr	r3, [pc, #116]	; (8003dd8 <DMA_SetCurrDataCounter+0xc4>)
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d020      	beq.n	8003daa <DMA_SetCurrDataCounter+0x96>
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	4b1c      	ldr	r3, [pc, #112]	; (8003ddc <DMA_SetCurrDataCounter+0xc8>)
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d01c      	beq.n	8003daa <DMA_SetCurrDataCounter+0x96>
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	4b1b      	ldr	r3, [pc, #108]	; (8003de0 <DMA_SetCurrDataCounter+0xcc>)
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d018      	beq.n	8003daa <DMA_SetCurrDataCounter+0x96>
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	4b1a      	ldr	r3, [pc, #104]	; (8003de4 <DMA_SetCurrDataCounter+0xd0>)
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d014      	beq.n	8003daa <DMA_SetCurrDataCounter+0x96>
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	4b19      	ldr	r3, [pc, #100]	; (8003de8 <DMA_SetCurrDataCounter+0xd4>)
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d010      	beq.n	8003daa <DMA_SetCurrDataCounter+0x96>
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	4b18      	ldr	r3, [pc, #96]	; (8003dec <DMA_SetCurrDataCounter+0xd8>)
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d00c      	beq.n	8003daa <DMA_SetCurrDataCounter+0x96>
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	4b17      	ldr	r3, [pc, #92]	; (8003df0 <DMA_SetCurrDataCounter+0xdc>)
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d008      	beq.n	8003daa <DMA_SetCurrDataCounter+0x96>
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	4b16      	ldr	r3, [pc, #88]	; (8003df4 <DMA_SetCurrDataCounter+0xe0>)
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d004      	beq.n	8003daa <DMA_SetCurrDataCounter+0x96>
 8003da0:	4815      	ldr	r0, [pc, #84]	; (8003df8 <DMA_SetCurrDataCounter+0xe4>)
 8003da2:	f240 2175 	movw	r1, #629	; 0x275
 8003da6:	f7fd f811 	bl	8000dcc <assert_failed>

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 8003daa:	887a      	ldrh	r2, [r7, #2]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	605a      	str	r2, [r3, #4]
}
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40026010 	.word	0x40026010
 8003dbc:	40026028 	.word	0x40026028
 8003dc0:	40026040 	.word	0x40026040
 8003dc4:	40026058 	.word	0x40026058
 8003dc8:	40026070 	.word	0x40026070
 8003dcc:	40026088 	.word	0x40026088
 8003dd0:	400260a0 	.word	0x400260a0
 8003dd4:	400260b8 	.word	0x400260b8
 8003dd8:	40026410 	.word	0x40026410
 8003ddc:	40026428 	.word	0x40026428
 8003de0:	40026440 	.word	0x40026440
 8003de4:	40026458 	.word	0x40026458
 8003de8:	40026470 	.word	0x40026470
 8003dec:	40026488 	.word	0x40026488
 8003df0:	400264a0 	.word	0x400264a0
 8003df4:	400264b8 	.word	0x400264b8
 8003df8:	080059e0 	.word	0x080059e0

08003dfc <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8003e04:	2300      	movs	r3, #0
 8003e06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	4b2a      	ldr	r3, [pc, #168]	; (8003eb4 <DMA_GetCmdStatus+0xb8>)
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d040      	beq.n	8003e92 <DMA_GetCmdStatus+0x96>
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	4b29      	ldr	r3, [pc, #164]	; (8003eb8 <DMA_GetCmdStatus+0xbc>)
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d03c      	beq.n	8003e92 <DMA_GetCmdStatus+0x96>
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	4b28      	ldr	r3, [pc, #160]	; (8003ebc <DMA_GetCmdStatus+0xc0>)
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d038      	beq.n	8003e92 <DMA_GetCmdStatus+0x96>
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	4b27      	ldr	r3, [pc, #156]	; (8003ec0 <DMA_GetCmdStatus+0xc4>)
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d034      	beq.n	8003e92 <DMA_GetCmdStatus+0x96>
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	4b26      	ldr	r3, [pc, #152]	; (8003ec4 <DMA_GetCmdStatus+0xc8>)
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d030      	beq.n	8003e92 <DMA_GetCmdStatus+0x96>
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	4b25      	ldr	r3, [pc, #148]	; (8003ec8 <DMA_GetCmdStatus+0xcc>)
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d02c      	beq.n	8003e92 <DMA_GetCmdStatus+0x96>
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	4b24      	ldr	r3, [pc, #144]	; (8003ecc <DMA_GetCmdStatus+0xd0>)
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d028      	beq.n	8003e92 <DMA_GetCmdStatus+0x96>
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	4b23      	ldr	r3, [pc, #140]	; (8003ed0 <DMA_GetCmdStatus+0xd4>)
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d024      	beq.n	8003e92 <DMA_GetCmdStatus+0x96>
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	4b22      	ldr	r3, [pc, #136]	; (8003ed4 <DMA_GetCmdStatus+0xd8>)
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d020      	beq.n	8003e92 <DMA_GetCmdStatus+0x96>
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	4b21      	ldr	r3, [pc, #132]	; (8003ed8 <DMA_GetCmdStatus+0xdc>)
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d01c      	beq.n	8003e92 <DMA_GetCmdStatus+0x96>
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	4b20      	ldr	r3, [pc, #128]	; (8003edc <DMA_GetCmdStatus+0xe0>)
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d018      	beq.n	8003e92 <DMA_GetCmdStatus+0x96>
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	4b1f      	ldr	r3, [pc, #124]	; (8003ee0 <DMA_GetCmdStatus+0xe4>)
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d014      	beq.n	8003e92 <DMA_GetCmdStatus+0x96>
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	4b1e      	ldr	r3, [pc, #120]	; (8003ee4 <DMA_GetCmdStatus+0xe8>)
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d010      	beq.n	8003e92 <DMA_GetCmdStatus+0x96>
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	4b1d      	ldr	r3, [pc, #116]	; (8003ee8 <DMA_GetCmdStatus+0xec>)
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d00c      	beq.n	8003e92 <DMA_GetCmdStatus+0x96>
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	4b1c      	ldr	r3, [pc, #112]	; (8003eec <DMA_GetCmdStatus+0xf0>)
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d008      	beq.n	8003e92 <DMA_GetCmdStatus+0x96>
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	4b1b      	ldr	r3, [pc, #108]	; (8003ef0 <DMA_GetCmdStatus+0xf4>)
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d004      	beq.n	8003e92 <DMA_GetCmdStatus+0x96>
 8003e88:	481a      	ldr	r0, [pc, #104]	; (8003ef4 <DMA_GetCmdStatus+0xf8>)
 8003e8a:	f240 31a2 	movw	r1, #930	; 0x3a2
 8003e8e:	f7fc ff9d 	bl	8000dcc <assert_failed>

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <DMA_GetCmdStatus+0xa8>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	73fb      	strb	r3, [r7, #15]
 8003ea2:	e001      	b.n	8003ea8 <DMA_GetCmdStatus+0xac>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40026010 	.word	0x40026010
 8003eb8:	40026028 	.word	0x40026028
 8003ebc:	40026040 	.word	0x40026040
 8003ec0:	40026058 	.word	0x40026058
 8003ec4:	40026070 	.word	0x40026070
 8003ec8:	40026088 	.word	0x40026088
 8003ecc:	400260a0 	.word	0x400260a0
 8003ed0:	400260b8 	.word	0x400260b8
 8003ed4:	40026410 	.word	0x40026410
 8003ed8:	40026428 	.word	0x40026428
 8003edc:	40026440 	.word	0x40026440
 8003ee0:	40026458 	.word	0x40026458
 8003ee4:	40026470 	.word	0x40026470
 8003ee8:	40026488 	.word	0x40026488
 8003eec:	400264a0 	.word	0x400264a0
 8003ef0:	400264b8 	.word	0x400264b8
 8003ef4:	080059e0 	.word	0x080059e0

08003ef8 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	4613      	mov	r3, r2
 8003f04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4b45      	ldr	r3, [pc, #276]	; (8004020 <DMA_ITConfig+0x128>)
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d040      	beq.n	8003f90 <DMA_ITConfig+0x98>
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	4b44      	ldr	r3, [pc, #272]	; (8004024 <DMA_ITConfig+0x12c>)
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d03c      	beq.n	8003f90 <DMA_ITConfig+0x98>
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	4b43      	ldr	r3, [pc, #268]	; (8004028 <DMA_ITConfig+0x130>)
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d038      	beq.n	8003f90 <DMA_ITConfig+0x98>
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	4b42      	ldr	r3, [pc, #264]	; (800402c <DMA_ITConfig+0x134>)
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d034      	beq.n	8003f90 <DMA_ITConfig+0x98>
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	4b41      	ldr	r3, [pc, #260]	; (8004030 <DMA_ITConfig+0x138>)
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d030      	beq.n	8003f90 <DMA_ITConfig+0x98>
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	4b40      	ldr	r3, [pc, #256]	; (8004034 <DMA_ITConfig+0x13c>)
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d02c      	beq.n	8003f90 <DMA_ITConfig+0x98>
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	4b3f      	ldr	r3, [pc, #252]	; (8004038 <DMA_ITConfig+0x140>)
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d028      	beq.n	8003f90 <DMA_ITConfig+0x98>
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	4b3e      	ldr	r3, [pc, #248]	; (800403c <DMA_ITConfig+0x144>)
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d024      	beq.n	8003f90 <DMA_ITConfig+0x98>
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	4b3d      	ldr	r3, [pc, #244]	; (8004040 <DMA_ITConfig+0x148>)
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d020      	beq.n	8003f90 <DMA_ITConfig+0x98>
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4b3c      	ldr	r3, [pc, #240]	; (8004044 <DMA_ITConfig+0x14c>)
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d01c      	beq.n	8003f90 <DMA_ITConfig+0x98>
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	4b3b      	ldr	r3, [pc, #236]	; (8004048 <DMA_ITConfig+0x150>)
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d018      	beq.n	8003f90 <DMA_ITConfig+0x98>
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	4b3a      	ldr	r3, [pc, #232]	; (800404c <DMA_ITConfig+0x154>)
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d014      	beq.n	8003f90 <DMA_ITConfig+0x98>
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	4b39      	ldr	r3, [pc, #228]	; (8004050 <DMA_ITConfig+0x158>)
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d010      	beq.n	8003f90 <DMA_ITConfig+0x98>
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	4b38      	ldr	r3, [pc, #224]	; (8004054 <DMA_ITConfig+0x15c>)
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d00c      	beq.n	8003f90 <DMA_ITConfig+0x98>
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	4b37      	ldr	r3, [pc, #220]	; (8004058 <DMA_ITConfig+0x160>)
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d008      	beq.n	8003f90 <DMA_ITConfig+0x98>
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	4b36      	ldr	r3, [pc, #216]	; (800405c <DMA_ITConfig+0x164>)
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d004      	beq.n	8003f90 <DMA_ITConfig+0x98>
 8003f86:	4836      	ldr	r0, [pc, #216]	; (8004060 <DMA_ITConfig+0x168>)
 8003f88:	f240 414f 	movw	r1, #1103	; 0x44f
 8003f8c:	f7fc ff1e 	bl	8000dcc <assert_failed>
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	f023 039e 	bic.w	r3, r3, #158	; 0x9e
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d102      	bne.n	8003fa0 <DMA_ITConfig+0xa8>
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d104      	bne.n	8003faa <DMA_ITConfig+0xb2>
 8003fa0:	482f      	ldr	r0, [pc, #188]	; (8004060 <DMA_ITConfig+0x168>)
 8003fa2:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8003fa6:	f7fc ff11 	bl	8000dcc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8003faa:	79fb      	ldrb	r3, [r7, #7]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d007      	beq.n	8003fc0 <DMA_ITConfig+0xc8>
 8003fb0:	79fb      	ldrb	r3, [r7, #7]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d004      	beq.n	8003fc0 <DMA_ITConfig+0xc8>
 8003fb6:	482a      	ldr	r0, [pc, #168]	; (8004060 <DMA_ITConfig+0x168>)
 8003fb8:	f240 4151 	movw	r1, #1105	; 0x451
 8003fbc:	f7fc ff06 	bl	8000dcc <assert_failed>

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00f      	beq.n	8003fea <DMA_ITConfig+0xf2>
  {
    if (NewState != DISABLE)
 8003fca:	79fb      	ldrb	r3, [r7, #7]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d006      	beq.n	8003fde <DMA_ITConfig+0xe6>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	615a      	str	r2, [r3, #20]
 8003fdc:	e005      	b.n	8003fea <DMA_ITConfig+0xf2>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2b80      	cmp	r3, #128	; 0x80
 8003fee:	d014      	beq.n	800401a <DMA_ITConfig+0x122>
  {
    if (NewState != DISABLE)
 8003ff0:	79fb      	ldrb	r3, [r7, #7]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d008      	beq.n	8004008 <DMA_ITConfig+0x110>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	f003 031e 	and.w	r3, r3, #30
 8004000:	431a      	orrs	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	e008      	b.n	800401a <DMA_ITConfig+0x122>
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	f003 031e 	and.w	r3, r3, #30
 8004012:	43db      	mvns	r3, r3
 8004014:	401a      	ands	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	601a      	str	r2, [r3, #0]
    }    
  }
}
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40026010 	.word	0x40026010
 8004024:	40026028 	.word	0x40026028
 8004028:	40026040 	.word	0x40026040
 800402c:	40026058 	.word	0x40026058
 8004030:	40026070 	.word	0x40026070
 8004034:	40026088 	.word	0x40026088
 8004038:	400260a0 	.word	0x400260a0
 800403c:	400260b8 	.word	0x400260b8
 8004040:	40026410 	.word	0x40026410
 8004044:	40026428 	.word	0x40026428
 8004048:	40026440 	.word	0x40026440
 800404c:	40026458 	.word	0x40026458
 8004050:	40026470 	.word	0x40026470
 8004054:	40026488 	.word	0x40026488
 8004058:	400264a0 	.word	0x400264a0
 800405c:	400264b8 	.word	0x400264b8
 8004060:	080059e0 	.word	0x080059e0

08004064 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800406e:	2300      	movs	r3, #0
 8004070:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 8004072:	2300      	movs	r3, #0
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	2300      	movs	r3, #0
 8004078:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	4b97      	ldr	r3, [pc, #604]	; (80042dc <DMA_GetITStatus+0x278>)
 800407e:	429a      	cmp	r2, r3
 8004080:	d040      	beq.n	8004104 <DMA_GetITStatus+0xa0>
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	4b96      	ldr	r3, [pc, #600]	; (80042e0 <DMA_GetITStatus+0x27c>)
 8004086:	429a      	cmp	r2, r3
 8004088:	d03c      	beq.n	8004104 <DMA_GetITStatus+0xa0>
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	4b95      	ldr	r3, [pc, #596]	; (80042e4 <DMA_GetITStatus+0x280>)
 800408e:	429a      	cmp	r2, r3
 8004090:	d038      	beq.n	8004104 <DMA_GetITStatus+0xa0>
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	4b94      	ldr	r3, [pc, #592]	; (80042e8 <DMA_GetITStatus+0x284>)
 8004096:	429a      	cmp	r2, r3
 8004098:	d034      	beq.n	8004104 <DMA_GetITStatus+0xa0>
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	4b93      	ldr	r3, [pc, #588]	; (80042ec <DMA_GetITStatus+0x288>)
 800409e:	429a      	cmp	r2, r3
 80040a0:	d030      	beq.n	8004104 <DMA_GetITStatus+0xa0>
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	4b92      	ldr	r3, [pc, #584]	; (80042f0 <DMA_GetITStatus+0x28c>)
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d02c      	beq.n	8004104 <DMA_GetITStatus+0xa0>
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	4b91      	ldr	r3, [pc, #580]	; (80042f4 <DMA_GetITStatus+0x290>)
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d028      	beq.n	8004104 <DMA_GetITStatus+0xa0>
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	4b90      	ldr	r3, [pc, #576]	; (80042f8 <DMA_GetITStatus+0x294>)
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d024      	beq.n	8004104 <DMA_GetITStatus+0xa0>
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	4b8f      	ldr	r3, [pc, #572]	; (80042fc <DMA_GetITStatus+0x298>)
 80040be:	429a      	cmp	r2, r3
 80040c0:	d020      	beq.n	8004104 <DMA_GetITStatus+0xa0>
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	4b8e      	ldr	r3, [pc, #568]	; (8004300 <DMA_GetITStatus+0x29c>)
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d01c      	beq.n	8004104 <DMA_GetITStatus+0xa0>
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	4b8d      	ldr	r3, [pc, #564]	; (8004304 <DMA_GetITStatus+0x2a0>)
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d018      	beq.n	8004104 <DMA_GetITStatus+0xa0>
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	4b8c      	ldr	r3, [pc, #560]	; (8004308 <DMA_GetITStatus+0x2a4>)
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d014      	beq.n	8004104 <DMA_GetITStatus+0xa0>
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	4b8b      	ldr	r3, [pc, #556]	; (800430c <DMA_GetITStatus+0x2a8>)
 80040de:	429a      	cmp	r2, r3
 80040e0:	d010      	beq.n	8004104 <DMA_GetITStatus+0xa0>
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	4b8a      	ldr	r3, [pc, #552]	; (8004310 <DMA_GetITStatus+0x2ac>)
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d00c      	beq.n	8004104 <DMA_GetITStatus+0xa0>
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	4b89      	ldr	r3, [pc, #548]	; (8004314 <DMA_GetITStatus+0x2b0>)
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d008      	beq.n	8004104 <DMA_GetITStatus+0xa0>
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	4b88      	ldr	r3, [pc, #544]	; (8004318 <DMA_GetITStatus+0x2b4>)
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d004      	beq.n	8004104 <DMA_GetITStatus+0xa0>
 80040fa:	4888      	ldr	r0, [pc, #544]	; (800431c <DMA_GetITStatus+0x2b8>)
 80040fc:	f240 4187 	movw	r1, #1159	; 0x487
 8004100:	f7fc fe64 	bl	8000dcc <assert_failed>
  assert_param(IS_DMA_GET_IT(DMA_IT));
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	4b86      	ldr	r3, [pc, #536]	; (8004320 <DMA_GetITStatus+0x2bc>)
 8004108:	429a      	cmp	r2, r3
 800410a:	f000 80a9 	beq.w	8004260 <DMA_GetITStatus+0x1fc>
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	4b84      	ldr	r3, [pc, #528]	; (8004324 <DMA_GetITStatus+0x2c0>)
 8004112:	429a      	cmp	r2, r3
 8004114:	f000 80a4 	beq.w	8004260 <DMA_GetITStatus+0x1fc>
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	4b83      	ldr	r3, [pc, #524]	; (8004328 <DMA_GetITStatus+0x2c4>)
 800411c:	429a      	cmp	r2, r3
 800411e:	f000 809f 	beq.w	8004260 <DMA_GetITStatus+0x1fc>
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	4b81      	ldr	r3, [pc, #516]	; (800432c <DMA_GetITStatus+0x2c8>)
 8004126:	429a      	cmp	r2, r3
 8004128:	f000 809a 	beq.w	8004260 <DMA_GetITStatus+0x1fc>
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	4b80      	ldr	r3, [pc, #512]	; (8004330 <DMA_GetITStatus+0x2cc>)
 8004130:	429a      	cmp	r2, r3
 8004132:	f000 8095 	beq.w	8004260 <DMA_GetITStatus+0x1fc>
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	4b7e      	ldr	r3, [pc, #504]	; (8004334 <DMA_GetITStatus+0x2d0>)
 800413a:	429a      	cmp	r2, r3
 800413c:	f000 8090 	beq.w	8004260 <DMA_GetITStatus+0x1fc>
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	4b7d      	ldr	r3, [pc, #500]	; (8004338 <DMA_GetITStatus+0x2d4>)
 8004144:	429a      	cmp	r2, r3
 8004146:	f000 808b 	beq.w	8004260 <DMA_GetITStatus+0x1fc>
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	4b7b      	ldr	r3, [pc, #492]	; (800433c <DMA_GetITStatus+0x2d8>)
 800414e:	429a      	cmp	r2, r3
 8004150:	f000 8086 	beq.w	8004260 <DMA_GetITStatus+0x1fc>
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	4b7a      	ldr	r3, [pc, #488]	; (8004340 <DMA_GetITStatus+0x2dc>)
 8004158:	429a      	cmp	r2, r3
 800415a:	f000 8081 	beq.w	8004260 <DMA_GetITStatus+0x1fc>
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	4b78      	ldr	r3, [pc, #480]	; (8004344 <DMA_GetITStatus+0x2e0>)
 8004162:	429a      	cmp	r2, r3
 8004164:	d07c      	beq.n	8004260 <DMA_GetITStatus+0x1fc>
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	4b77      	ldr	r3, [pc, #476]	; (8004348 <DMA_GetITStatus+0x2e4>)
 800416a:	429a      	cmp	r2, r3
 800416c:	d078      	beq.n	8004260 <DMA_GetITStatus+0x1fc>
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	4b76      	ldr	r3, [pc, #472]	; (800434c <DMA_GetITStatus+0x2e8>)
 8004172:	429a      	cmp	r2, r3
 8004174:	d074      	beq.n	8004260 <DMA_GetITStatus+0x1fc>
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	4b75      	ldr	r3, [pc, #468]	; (8004350 <DMA_GetITStatus+0x2ec>)
 800417a:	429a      	cmp	r2, r3
 800417c:	d070      	beq.n	8004260 <DMA_GetITStatus+0x1fc>
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	4b74      	ldr	r3, [pc, #464]	; (8004354 <DMA_GetITStatus+0x2f0>)
 8004182:	429a      	cmp	r2, r3
 8004184:	d06c      	beq.n	8004260 <DMA_GetITStatus+0x1fc>
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	4b73      	ldr	r3, [pc, #460]	; (8004358 <DMA_GetITStatus+0x2f4>)
 800418a:	429a      	cmp	r2, r3
 800418c:	d068      	beq.n	8004260 <DMA_GetITStatus+0x1fc>
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	4b72      	ldr	r3, [pc, #456]	; (800435c <DMA_GetITStatus+0x2f8>)
 8004192:	429a      	cmp	r2, r3
 8004194:	d064      	beq.n	8004260 <DMA_GetITStatus+0x1fc>
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	4b71      	ldr	r3, [pc, #452]	; (8004360 <DMA_GetITStatus+0x2fc>)
 800419a:	429a      	cmp	r2, r3
 800419c:	d060      	beq.n	8004260 <DMA_GetITStatus+0x1fc>
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	4b70      	ldr	r3, [pc, #448]	; (8004364 <DMA_GetITStatus+0x300>)
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d05c      	beq.n	8004260 <DMA_GetITStatus+0x1fc>
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	4b6f      	ldr	r3, [pc, #444]	; (8004368 <DMA_GetITStatus+0x304>)
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d058      	beq.n	8004260 <DMA_GetITStatus+0x1fc>
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	4b6e      	ldr	r3, [pc, #440]	; (800436c <DMA_GetITStatus+0x308>)
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d054      	beq.n	8004260 <DMA_GetITStatus+0x1fc>
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	4b6d      	ldr	r3, [pc, #436]	; (8004370 <DMA_GetITStatus+0x30c>)
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d050      	beq.n	8004260 <DMA_GetITStatus+0x1fc>
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	4b6c      	ldr	r3, [pc, #432]	; (8004374 <DMA_GetITStatus+0x310>)
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d04c      	beq.n	8004260 <DMA_GetITStatus+0x1fc>
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	4b6b      	ldr	r3, [pc, #428]	; (8004378 <DMA_GetITStatus+0x314>)
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d048      	beq.n	8004260 <DMA_GetITStatus+0x1fc>
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	4b6a      	ldr	r3, [pc, #424]	; (800437c <DMA_GetITStatus+0x318>)
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d044      	beq.n	8004260 <DMA_GetITStatus+0x1fc>
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	4b69      	ldr	r3, [pc, #420]	; (8004380 <DMA_GetITStatus+0x31c>)
 80041da:	429a      	cmp	r2, r3
 80041dc:	d040      	beq.n	8004260 <DMA_GetITStatus+0x1fc>
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	4b68      	ldr	r3, [pc, #416]	; (8004384 <DMA_GetITStatus+0x320>)
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d03c      	beq.n	8004260 <DMA_GetITStatus+0x1fc>
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	4b67      	ldr	r3, [pc, #412]	; (8004388 <DMA_GetITStatus+0x324>)
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d038      	beq.n	8004260 <DMA_GetITStatus+0x1fc>
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	4b66      	ldr	r3, [pc, #408]	; (800438c <DMA_GetITStatus+0x328>)
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d034      	beq.n	8004260 <DMA_GetITStatus+0x1fc>
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	4b65      	ldr	r3, [pc, #404]	; (8004390 <DMA_GetITStatus+0x32c>)
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d030      	beq.n	8004260 <DMA_GetITStatus+0x1fc>
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	4b64      	ldr	r3, [pc, #400]	; (8004394 <DMA_GetITStatus+0x330>)
 8004202:	429a      	cmp	r2, r3
 8004204:	d02c      	beq.n	8004260 <DMA_GetITStatus+0x1fc>
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	4b63      	ldr	r3, [pc, #396]	; (8004398 <DMA_GetITStatus+0x334>)
 800420a:	429a      	cmp	r2, r3
 800420c:	d028      	beq.n	8004260 <DMA_GetITStatus+0x1fc>
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	4b62      	ldr	r3, [pc, #392]	; (800439c <DMA_GetITStatus+0x338>)
 8004212:	429a      	cmp	r2, r3
 8004214:	d024      	beq.n	8004260 <DMA_GetITStatus+0x1fc>
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	4b61      	ldr	r3, [pc, #388]	; (80043a0 <DMA_GetITStatus+0x33c>)
 800421a:	429a      	cmp	r2, r3
 800421c:	d020      	beq.n	8004260 <DMA_GetITStatus+0x1fc>
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	4b60      	ldr	r3, [pc, #384]	; (80043a4 <DMA_GetITStatus+0x340>)
 8004222:	429a      	cmp	r2, r3
 8004224:	d01c      	beq.n	8004260 <DMA_GetITStatus+0x1fc>
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	4b5f      	ldr	r3, [pc, #380]	; (80043a8 <DMA_GetITStatus+0x344>)
 800422a:	429a      	cmp	r2, r3
 800422c:	d018      	beq.n	8004260 <DMA_GetITStatus+0x1fc>
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	4b5e      	ldr	r3, [pc, #376]	; (80043ac <DMA_GetITStatus+0x348>)
 8004232:	429a      	cmp	r2, r3
 8004234:	d014      	beq.n	8004260 <DMA_GetITStatus+0x1fc>
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	4b5d      	ldr	r3, [pc, #372]	; (80043b0 <DMA_GetITStatus+0x34c>)
 800423a:	429a      	cmp	r2, r3
 800423c:	d010      	beq.n	8004260 <DMA_GetITStatus+0x1fc>
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	4b5c      	ldr	r3, [pc, #368]	; (80043b4 <DMA_GetITStatus+0x350>)
 8004242:	429a      	cmp	r2, r3
 8004244:	d00c      	beq.n	8004260 <DMA_GetITStatus+0x1fc>
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	4b5b      	ldr	r3, [pc, #364]	; (80043b8 <DMA_GetITStatus+0x354>)
 800424a:	429a      	cmp	r2, r3
 800424c:	d008      	beq.n	8004260 <DMA_GetITStatus+0x1fc>
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	4b5a      	ldr	r3, [pc, #360]	; (80043bc <DMA_GetITStatus+0x358>)
 8004252:	429a      	cmp	r2, r3
 8004254:	d004      	beq.n	8004260 <DMA_GetITStatus+0x1fc>
 8004256:	4831      	ldr	r0, [pc, #196]	; (800431c <DMA_GetITStatus+0x2b8>)
 8004258:	f44f 6191 	mov.w	r1, #1160	; 0x488
 800425c:	f7fc fdb6 	bl	8000dcc <assert_failed>
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	4b57      	ldr	r3, [pc, #348]	; (80043c0 <DMA_GetITStatus+0x35c>)
 8004264:	429a      	cmp	r2, r3
 8004266:	d802      	bhi.n	800426e <DMA_GetITStatus+0x20a>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8004268:	4b56      	ldr	r3, [pc, #344]	; (80043c4 <DMA_GetITStatus+0x360>)
 800426a:	613b      	str	r3, [r7, #16]
 800426c:	e001      	b.n	8004272 <DMA_GetITStatus+0x20e>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800426e:	4b56      	ldr	r3, [pc, #344]	; (80043c8 <DMA_GetITStatus+0x364>)
 8004270:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8004278:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <DMA_GetITStatus+0x232>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	0adb      	lsrs	r3, r3, #11
 8004284:	f003 031e 	and.w	r3, r3, #30
 8004288:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	4013      	ands	r3, r2
 8004292:	60bb      	str	r3, [r7, #8]
 8004294:	e004      	b.n	80042a0 <DMA_GetITStatus+0x23c>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429e:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <DMA_GetITStatus+0x24e>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	e002      	b.n	80042b8 <DMA_GetITStatus+0x254>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80042be:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	4013      	ands	r3, r2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d07e      	beq.n	80043cc <DMA_GetITStatus+0x368>
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d07b      	beq.n	80043cc <DMA_GetITStatus+0x368>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 80042d4:	2301      	movs	r3, #1
 80042d6:	75fb      	strb	r3, [r7, #23]
 80042d8:	e07a      	b.n	80043d0 <DMA_GetITStatus+0x36c>
 80042da:	bf00      	nop
 80042dc:	40026010 	.word	0x40026010
 80042e0:	40026028 	.word	0x40026028
 80042e4:	40026040 	.word	0x40026040
 80042e8:	40026058 	.word	0x40026058
 80042ec:	40026070 	.word	0x40026070
 80042f0:	40026088 	.word	0x40026088
 80042f4:	400260a0 	.word	0x400260a0
 80042f8:	400260b8 	.word	0x400260b8
 80042fc:	40026410 	.word	0x40026410
 8004300:	40026428 	.word	0x40026428
 8004304:	40026440 	.word	0x40026440
 8004308:	40026458 	.word	0x40026458
 800430c:	40026470 	.word	0x40026470
 8004310:	40026488 	.word	0x40026488
 8004314:	400264a0 	.word	0x400264a0
 8004318:	400264b8 	.word	0x400264b8
 800431c:	080059e0 	.word	0x080059e0
 8004320:	10008020 	.word	0x10008020
 8004324:	10004010 	.word	0x10004010
 8004328:	10002008 	.word	0x10002008
 800432c:	10001004 	.word	0x10001004
 8004330:	90000001 	.word	0x90000001
 8004334:	10008800 	.word	0x10008800
 8004338:	10004400 	.word	0x10004400
 800433c:	10002200 	.word	0x10002200
 8004340:	10001100 	.word	0x10001100
 8004344:	90000040 	.word	0x90000040
 8004348:	10208000 	.word	0x10208000
 800434c:	10104000 	.word	0x10104000
 8004350:	10082000 	.word	0x10082000
 8004354:	10041000 	.word	0x10041000
 8004358:	90010000 	.word	0x90010000
 800435c:	18008000 	.word	0x18008000
 8004360:	14004000 	.word	0x14004000
 8004364:	12002000 	.word	0x12002000
 8004368:	11001000 	.word	0x11001000
 800436c:	90400000 	.word	0x90400000
 8004370:	20008020 	.word	0x20008020
 8004374:	20004010 	.word	0x20004010
 8004378:	20002008 	.word	0x20002008
 800437c:	20001004 	.word	0x20001004
 8004380:	a0000001 	.word	0xa0000001
 8004384:	20008800 	.word	0x20008800
 8004388:	20004400 	.word	0x20004400
 800438c:	20002200 	.word	0x20002200
 8004390:	20001100 	.word	0x20001100
 8004394:	a0000040 	.word	0xa0000040
 8004398:	20208000 	.word	0x20208000
 800439c:	20104000 	.word	0x20104000
 80043a0:	20082000 	.word	0x20082000
 80043a4:	20041000 	.word	0x20041000
 80043a8:	a0010000 	.word	0xa0010000
 80043ac:	28008000 	.word	0x28008000
 80043b0:	24004000 	.word	0x24004000
 80043b4:	22002000 	.word	0x22002000
 80043b8:	21001000 	.word	0x21001000
 80043bc:	a0400000 	.word	0xa0400000
 80043c0:	4002640f 	.word	0x4002640f
 80043c4:	40026000 	.word	0x40026000
 80043c8:	40026400 	.word	0x40026400
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 80043cc:	2300      	movs	r3, #0
 80043ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 80043d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3718      	adds	r7, #24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop

080043dc <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  DMA_TypeDef* DMAy;

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	4b3d      	ldr	r3, [pc, #244]	; (80044e0 <DMA_ClearITPendingBit+0x104>)
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d040      	beq.n	8004470 <DMA_ClearITPendingBit+0x94>
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	4b3c      	ldr	r3, [pc, #240]	; (80044e4 <DMA_ClearITPendingBit+0x108>)
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d03c      	beq.n	8004470 <DMA_ClearITPendingBit+0x94>
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	4b3b      	ldr	r3, [pc, #236]	; (80044e8 <DMA_ClearITPendingBit+0x10c>)
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d038      	beq.n	8004470 <DMA_ClearITPendingBit+0x94>
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	4b3a      	ldr	r3, [pc, #232]	; (80044ec <DMA_ClearITPendingBit+0x110>)
 8004402:	429a      	cmp	r2, r3
 8004404:	d034      	beq.n	8004470 <DMA_ClearITPendingBit+0x94>
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	4b39      	ldr	r3, [pc, #228]	; (80044f0 <DMA_ClearITPendingBit+0x114>)
 800440a:	429a      	cmp	r2, r3
 800440c:	d030      	beq.n	8004470 <DMA_ClearITPendingBit+0x94>
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	4b38      	ldr	r3, [pc, #224]	; (80044f4 <DMA_ClearITPendingBit+0x118>)
 8004412:	429a      	cmp	r2, r3
 8004414:	d02c      	beq.n	8004470 <DMA_ClearITPendingBit+0x94>
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	4b37      	ldr	r3, [pc, #220]	; (80044f8 <DMA_ClearITPendingBit+0x11c>)
 800441a:	429a      	cmp	r2, r3
 800441c:	d028      	beq.n	8004470 <DMA_ClearITPendingBit+0x94>
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	4b36      	ldr	r3, [pc, #216]	; (80044fc <DMA_ClearITPendingBit+0x120>)
 8004422:	429a      	cmp	r2, r3
 8004424:	d024      	beq.n	8004470 <DMA_ClearITPendingBit+0x94>
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	4b35      	ldr	r3, [pc, #212]	; (8004500 <DMA_ClearITPendingBit+0x124>)
 800442a:	429a      	cmp	r2, r3
 800442c:	d020      	beq.n	8004470 <DMA_ClearITPendingBit+0x94>
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	4b34      	ldr	r3, [pc, #208]	; (8004504 <DMA_ClearITPendingBit+0x128>)
 8004432:	429a      	cmp	r2, r3
 8004434:	d01c      	beq.n	8004470 <DMA_ClearITPendingBit+0x94>
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	4b33      	ldr	r3, [pc, #204]	; (8004508 <DMA_ClearITPendingBit+0x12c>)
 800443a:	429a      	cmp	r2, r3
 800443c:	d018      	beq.n	8004470 <DMA_ClearITPendingBit+0x94>
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	4b32      	ldr	r3, [pc, #200]	; (800450c <DMA_ClearITPendingBit+0x130>)
 8004442:	429a      	cmp	r2, r3
 8004444:	d014      	beq.n	8004470 <DMA_ClearITPendingBit+0x94>
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	4b31      	ldr	r3, [pc, #196]	; (8004510 <DMA_ClearITPendingBit+0x134>)
 800444a:	429a      	cmp	r2, r3
 800444c:	d010      	beq.n	8004470 <DMA_ClearITPendingBit+0x94>
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	4b30      	ldr	r3, [pc, #192]	; (8004514 <DMA_ClearITPendingBit+0x138>)
 8004452:	429a      	cmp	r2, r3
 8004454:	d00c      	beq.n	8004470 <DMA_ClearITPendingBit+0x94>
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	4b2f      	ldr	r3, [pc, #188]	; (8004518 <DMA_ClearITPendingBit+0x13c>)
 800445a:	429a      	cmp	r2, r3
 800445c:	d008      	beq.n	8004470 <DMA_ClearITPendingBit+0x94>
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	4b2e      	ldr	r3, [pc, #184]	; (800451c <DMA_ClearITPendingBit+0x140>)
 8004462:	429a      	cmp	r2, r3
 8004464:	d004      	beq.n	8004470 <DMA_ClearITPendingBit+0x94>
 8004466:	482e      	ldr	r0, [pc, #184]	; (8004520 <DMA_ClearITPendingBit+0x144>)
 8004468:	f240 41d7 	movw	r1, #1239	; 0x4d7
 800446c:	f7fc fcae 	bl	8000dcc <assert_failed>
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004476:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800447a:	d00c      	beq.n	8004496 <DMA_ClearITPendingBit+0xba>
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d007      	beq.n	8004496 <DMA_ClearITPendingBit+0xba>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d004      	beq.n	8004496 <DMA_ClearITPendingBit+0xba>
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	4b25      	ldr	r3, [pc, #148]	; (8004524 <DMA_ClearITPendingBit+0x148>)
 8004490:	4013      	ands	r3, r2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d004      	beq.n	80044a0 <DMA_ClearITPendingBit+0xc4>
 8004496:	4822      	ldr	r0, [pc, #136]	; (8004520 <DMA_ClearITPendingBit+0x144>)
 8004498:	f44f 619b 	mov.w	r1, #1240	; 0x4d8
 800449c:	f7fc fc96 	bl	8000dcc <assert_failed>

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	4b21      	ldr	r3, [pc, #132]	; (8004528 <DMA_ClearITPendingBit+0x14c>)
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d802      	bhi.n	80044ae <DMA_ClearITPendingBit+0xd2>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80044a8:	4b20      	ldr	r3, [pc, #128]	; (800452c <DMA_ClearITPendingBit+0x150>)
 80044aa:	60fb      	str	r3, [r7, #12]
 80044ac:	e001      	b.n	80044b2 <DMA_ClearITPendingBit+0xd6>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80044ae:	4b20      	ldr	r3, [pc, #128]	; (8004530 <DMA_ClearITPendingBit+0x154>)
 80044b0:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d007      	beq.n	80044cc <DMA_ClearITPendingBit+0xf0>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80044c2:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	60d3      	str	r3, [r2, #12]
 80044ca:	e006      	b.n	80044da <DMA_ClearITPendingBit+0xfe>
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80044d2:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	6093      	str	r3, [r2, #8]
  }   
}
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	40026010 	.word	0x40026010
 80044e4:	40026028 	.word	0x40026028
 80044e8:	40026040 	.word	0x40026040
 80044ec:	40026058 	.word	0x40026058
 80044f0:	40026070 	.word	0x40026070
 80044f4:	40026088 	.word	0x40026088
 80044f8:	400260a0 	.word	0x400260a0
 80044fc:	400260b8 	.word	0x400260b8
 8004500:	40026410 	.word	0x40026410
 8004504:	40026428 	.word	0x40026428
 8004508:	40026440 	.word	0x40026440
 800450c:	40026458 	.word	0x40026458
 8004510:	40026470 	.word	0x40026470
 8004514:	40026488 	.word	0x40026488
 8004518:	400264a0 	.word	0x400264a0
 800451c:	400264b8 	.word	0x400264b8
 8004520:	080059e0 	.word	0x080059e0
 8004524:	40820082 	.word	0x40820082
 8004528:	4002640f 	.word	0x4002640f
 800452c:	40026000 	.word	0x40026000
 8004530:	40026400 	.word	0x40026400

08004534 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800453e:	2300      	movs	r3, #0
 8004540:	617b      	str	r3, [r7, #20]
 8004542:	2300      	movs	r3, #0
 8004544:	613b      	str	r3, [r7, #16]
 8004546:	2300      	movs	r3, #0
 8004548:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	4b7a      	ldr	r3, [pc, #488]	; (8004738 <GPIO_Init+0x204>)
 800454e:	429a      	cmp	r2, r3
 8004550:	d023      	beq.n	800459a <GPIO_Init+0x66>
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	4b79      	ldr	r3, [pc, #484]	; (800473c <GPIO_Init+0x208>)
 8004556:	429a      	cmp	r2, r3
 8004558:	d01f      	beq.n	800459a <GPIO_Init+0x66>
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	4b78      	ldr	r3, [pc, #480]	; (8004740 <GPIO_Init+0x20c>)
 800455e:	429a      	cmp	r2, r3
 8004560:	d01b      	beq.n	800459a <GPIO_Init+0x66>
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	4b77      	ldr	r3, [pc, #476]	; (8004744 <GPIO_Init+0x210>)
 8004566:	429a      	cmp	r2, r3
 8004568:	d017      	beq.n	800459a <GPIO_Init+0x66>
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	4b76      	ldr	r3, [pc, #472]	; (8004748 <GPIO_Init+0x214>)
 800456e:	429a      	cmp	r2, r3
 8004570:	d013      	beq.n	800459a <GPIO_Init+0x66>
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	4b75      	ldr	r3, [pc, #468]	; (800474c <GPIO_Init+0x218>)
 8004576:	429a      	cmp	r2, r3
 8004578:	d00f      	beq.n	800459a <GPIO_Init+0x66>
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	4b74      	ldr	r3, [pc, #464]	; (8004750 <GPIO_Init+0x21c>)
 800457e:	429a      	cmp	r2, r3
 8004580:	d00b      	beq.n	800459a <GPIO_Init+0x66>
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	4b73      	ldr	r3, [pc, #460]	; (8004754 <GPIO_Init+0x220>)
 8004586:	429a      	cmp	r2, r3
 8004588:	d007      	beq.n	800459a <GPIO_Init+0x66>
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	4b72      	ldr	r3, [pc, #456]	; (8004758 <GPIO_Init+0x224>)
 800458e:	429a      	cmp	r2, r3
 8004590:	d003      	beq.n	800459a <GPIO_Init+0x66>
 8004592:	4872      	ldr	r0, [pc, #456]	; (800475c <GPIO_Init+0x228>)
 8004594:	21bb      	movs	r1, #187	; 0xbb
 8004596:	f7fc fc19 	bl	8000dcc <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d103      	bne.n	80045aa <GPIO_Init+0x76>
 80045a2:	486e      	ldr	r0, [pc, #440]	; (800475c <GPIO_Init+0x228>)
 80045a4:	21bc      	movs	r1, #188	; 0xbc
 80045a6:	f7fc fc11 	bl	8000dcc <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	791b      	ldrb	r3, [r3, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00f      	beq.n	80045d2 <GPIO_Init+0x9e>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	791b      	ldrb	r3, [r3, #4]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d00b      	beq.n	80045d2 <GPIO_Init+0x9e>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	791b      	ldrb	r3, [r3, #4]
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d007      	beq.n	80045d2 <GPIO_Init+0x9e>
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	791b      	ldrb	r3, [r3, #4]
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	d003      	beq.n	80045d2 <GPIO_Init+0x9e>
 80045ca:	4864      	ldr	r0, [pc, #400]	; (800475c <GPIO_Init+0x228>)
 80045cc:	21bd      	movs	r1, #189	; 0xbd
 80045ce:	f7fc fbfd 	bl	8000dcc <assert_failed>
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	79db      	ldrb	r3, [r3, #7]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00b      	beq.n	80045f2 <GPIO_Init+0xbe>
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	79db      	ldrb	r3, [r3, #7]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d007      	beq.n	80045f2 <GPIO_Init+0xbe>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	79db      	ldrb	r3, [r3, #7]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d003      	beq.n	80045f2 <GPIO_Init+0xbe>
 80045ea:	485c      	ldr	r0, [pc, #368]	; (800475c <GPIO_Init+0x228>)
 80045ec:	21be      	movs	r1, #190	; 0xbe
 80045ee:	f7fc fbed 	bl	8000dcc <assert_failed>

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80045f2:	2300      	movs	r3, #0
 80045f4:	617b      	str	r3, [r7, #20]
 80045f6:	e097      	b.n	8004728 <GPIO_Init+0x1f4>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	2201      	movs	r2, #1
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	4013      	ands	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	429a      	cmp	r2, r3
 8004612:	f040 8086 	bne.w	8004722 <GPIO_Init+0x1ee>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	2103      	movs	r1, #3
 8004620:	fa01 f303 	lsl.w	r3, r1, r3
 8004624:	43db      	mvns	r3, r3
 8004626:	401a      	ands	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	791b      	ldrb	r3, [r3, #4]
 8004634:	4619      	mov	r1, r3
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	fa01 f303 	lsl.w	r3, r1, r3
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	791b      	ldrb	r3, [r3, #4]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d003      	beq.n	8004654 <GPIO_Init+0x120>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	791b      	ldrb	r3, [r3, #4]
 8004650:	2b02      	cmp	r3, #2
 8004652:	d14e      	bne.n	80046f2 <GPIO_Init+0x1be>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	795b      	ldrb	r3, [r3, #5]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00f      	beq.n	800467c <GPIO_Init+0x148>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	795b      	ldrb	r3, [r3, #5]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d00b      	beq.n	800467c <GPIO_Init+0x148>
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	795b      	ldrb	r3, [r3, #5]
 8004668:	2b02      	cmp	r3, #2
 800466a:	d007      	beq.n	800467c <GPIO_Init+0x148>
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	795b      	ldrb	r3, [r3, #5]
 8004670:	2b03      	cmp	r3, #3
 8004672:	d003      	beq.n	800467c <GPIO_Init+0x148>
 8004674:	4839      	ldr	r0, [pc, #228]	; (800475c <GPIO_Init+0x228>)
 8004676:	21d0      	movs	r1, #208	; 0xd0
 8004678:	f7fc fba8 	bl	8000dcc <assert_failed>

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	2103      	movs	r1, #3
 8004686:	fa01 f303 	lsl.w	r3, r1, r3
 800468a:	43db      	mvns	r3, r3
 800468c:	401a      	ands	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689a      	ldr	r2, [r3, #8]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	795b      	ldrb	r3, [r3, #5]
 800469a:	4619      	mov	r1, r3
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	fa01 f303 	lsl.w	r3, r1, r3
 80046a4:	431a      	orrs	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	799b      	ldrb	r3, [r3, #6]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d007      	beq.n	80046c2 <GPIO_Init+0x18e>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	799b      	ldrb	r3, [r3, #6]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d003      	beq.n	80046c2 <GPIO_Init+0x18e>
 80046ba:	4828      	ldr	r0, [pc, #160]	; (800475c <GPIO_Init+0x228>)
 80046bc:	21d7      	movs	r1, #215	; 0xd7
 80046be:	f7fc fb85 	bl	8000dcc <assert_failed>

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	2101      	movs	r1, #1
 80046cc:	fa01 f303 	lsl.w	r3, r1, r3
 80046d0:	43db      	mvns	r3, r3
 80046d2:	401a      	ands	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	799b      	ldrb	r3, [r3, #6]
 80046e0:	4619      	mov	r1, r3
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	fa01 f303 	lsl.w	r3, r1, r3
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	431a      	orrs	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	2103      	movs	r1, #3
 80046fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004702:	43db      	mvns	r3, r3
 8004704:	401a      	ands	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68da      	ldr	r2, [r3, #12]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	79db      	ldrb	r3, [r3, #7]
 8004712:	4619      	mov	r1, r3
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	fa01 f303 	lsl.w	r3, r1, r3
 800471c:	431a      	orrs	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	3301      	adds	r3, #1
 8004726:	617b      	str	r3, [r7, #20]
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	2b0f      	cmp	r3, #15
 800472c:	f67f af64 	bls.w	80045f8 <GPIO_Init+0xc4>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	40020000 	.word	0x40020000
 800473c:	40020400 	.word	0x40020400
 8004740:	40020800 	.word	0x40020800
 8004744:	40020c00 	.word	0x40020c00
 8004748:	40021000 	.word	0x40021000
 800474c:	40021400 	.word	0x40021400
 8004750:	40021800 	.word	0x40021800
 8004754:	40021c00 	.word	0x40021c00
 8004758:	40022000 	.word	0x40022000
 800475c:	08005a30 	.word	0x08005a30

08004760 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	4613      	mov	r3, r2
 800476a:	460a      	mov	r2, r1
 800476c:	807a      	strh	r2, [r7, #2]
 800476e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8004770:	2300      	movs	r3, #0
 8004772:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8004774:	2300      	movs	r3, #0
 8004776:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	4b83      	ldr	r3, [pc, #524]	; (8004988 <GPIO_PinAFConfig+0x228>)
 800477c:	429a      	cmp	r2, r3
 800477e:	d024      	beq.n	80047ca <GPIO_PinAFConfig+0x6a>
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	4b82      	ldr	r3, [pc, #520]	; (800498c <GPIO_PinAFConfig+0x22c>)
 8004784:	429a      	cmp	r2, r3
 8004786:	d020      	beq.n	80047ca <GPIO_PinAFConfig+0x6a>
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	4b81      	ldr	r3, [pc, #516]	; (8004990 <GPIO_PinAFConfig+0x230>)
 800478c:	429a      	cmp	r2, r3
 800478e:	d01c      	beq.n	80047ca <GPIO_PinAFConfig+0x6a>
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	4b80      	ldr	r3, [pc, #512]	; (8004994 <GPIO_PinAFConfig+0x234>)
 8004794:	429a      	cmp	r2, r3
 8004796:	d018      	beq.n	80047ca <GPIO_PinAFConfig+0x6a>
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	4b7f      	ldr	r3, [pc, #508]	; (8004998 <GPIO_PinAFConfig+0x238>)
 800479c:	429a      	cmp	r2, r3
 800479e:	d014      	beq.n	80047ca <GPIO_PinAFConfig+0x6a>
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	4b7e      	ldr	r3, [pc, #504]	; (800499c <GPIO_PinAFConfig+0x23c>)
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d010      	beq.n	80047ca <GPIO_PinAFConfig+0x6a>
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	4b7d      	ldr	r3, [pc, #500]	; (80049a0 <GPIO_PinAFConfig+0x240>)
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d00c      	beq.n	80047ca <GPIO_PinAFConfig+0x6a>
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	4b7c      	ldr	r3, [pc, #496]	; (80049a4 <GPIO_PinAFConfig+0x244>)
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d008      	beq.n	80047ca <GPIO_PinAFConfig+0x6a>
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	4b7b      	ldr	r3, [pc, #492]	; (80049a8 <GPIO_PinAFConfig+0x248>)
 80047bc:	429a      	cmp	r2, r3
 80047be:	d004      	beq.n	80047ca <GPIO_PinAFConfig+0x6a>
 80047c0:	487a      	ldr	r0, [pc, #488]	; (80049ac <GPIO_PinAFConfig+0x24c>)
 80047c2:	f240 2117 	movw	r1, #535	; 0x217
 80047c6:	f7fc fb01 	bl	8000dcc <assert_failed>
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
 80047ca:	887b      	ldrh	r3, [r7, #2]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d031      	beq.n	8004834 <GPIO_PinAFConfig+0xd4>
 80047d0:	887b      	ldrh	r3, [r7, #2]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d02e      	beq.n	8004834 <GPIO_PinAFConfig+0xd4>
 80047d6:	887b      	ldrh	r3, [r7, #2]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d02b      	beq.n	8004834 <GPIO_PinAFConfig+0xd4>
 80047dc:	887b      	ldrh	r3, [r7, #2]
 80047de:	2b03      	cmp	r3, #3
 80047e0:	d028      	beq.n	8004834 <GPIO_PinAFConfig+0xd4>
 80047e2:	887b      	ldrh	r3, [r7, #2]
 80047e4:	2b04      	cmp	r3, #4
 80047e6:	d025      	beq.n	8004834 <GPIO_PinAFConfig+0xd4>
 80047e8:	887b      	ldrh	r3, [r7, #2]
 80047ea:	2b05      	cmp	r3, #5
 80047ec:	d022      	beq.n	8004834 <GPIO_PinAFConfig+0xd4>
 80047ee:	887b      	ldrh	r3, [r7, #2]
 80047f0:	2b06      	cmp	r3, #6
 80047f2:	d01f      	beq.n	8004834 <GPIO_PinAFConfig+0xd4>
 80047f4:	887b      	ldrh	r3, [r7, #2]
 80047f6:	2b07      	cmp	r3, #7
 80047f8:	d01c      	beq.n	8004834 <GPIO_PinAFConfig+0xd4>
 80047fa:	887b      	ldrh	r3, [r7, #2]
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d019      	beq.n	8004834 <GPIO_PinAFConfig+0xd4>
 8004800:	887b      	ldrh	r3, [r7, #2]
 8004802:	2b09      	cmp	r3, #9
 8004804:	d016      	beq.n	8004834 <GPIO_PinAFConfig+0xd4>
 8004806:	887b      	ldrh	r3, [r7, #2]
 8004808:	2b0a      	cmp	r3, #10
 800480a:	d013      	beq.n	8004834 <GPIO_PinAFConfig+0xd4>
 800480c:	887b      	ldrh	r3, [r7, #2]
 800480e:	2b0b      	cmp	r3, #11
 8004810:	d010      	beq.n	8004834 <GPIO_PinAFConfig+0xd4>
 8004812:	887b      	ldrh	r3, [r7, #2]
 8004814:	2b0c      	cmp	r3, #12
 8004816:	d00d      	beq.n	8004834 <GPIO_PinAFConfig+0xd4>
 8004818:	887b      	ldrh	r3, [r7, #2]
 800481a:	2b0d      	cmp	r3, #13
 800481c:	d00a      	beq.n	8004834 <GPIO_PinAFConfig+0xd4>
 800481e:	887b      	ldrh	r3, [r7, #2]
 8004820:	2b0e      	cmp	r3, #14
 8004822:	d007      	beq.n	8004834 <GPIO_PinAFConfig+0xd4>
 8004824:	887b      	ldrh	r3, [r7, #2]
 8004826:	2b0f      	cmp	r3, #15
 8004828:	d004      	beq.n	8004834 <GPIO_PinAFConfig+0xd4>
 800482a:	4860      	ldr	r0, [pc, #384]	; (80049ac <GPIO_PinAFConfig+0x24c>)
 800482c:	f44f 7106 	mov.w	r1, #536	; 0x218
 8004830:	f7fc facc 	bl	8000dcc <assert_failed>
  assert_param(IS_GPIO_AF(GPIO_AF));
 8004834:	787b      	ldrb	r3, [r7, #1]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d06d      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 800483a:	787b      	ldrb	r3, [r7, #1]
 800483c:	2b09      	cmp	r3, #9
 800483e:	d06a      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 8004840:	787b      	ldrb	r3, [r7, #1]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d067      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 8004846:	787b      	ldrb	r3, [r7, #1]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d064      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 800484c:	787b      	ldrb	r3, [r7, #1]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d061      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 8004852:	787b      	ldrb	r3, [r7, #1]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d05e      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 8004858:	787b      	ldrb	r3, [r7, #1]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d05b      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 800485e:	787b      	ldrb	r3, [r7, #1]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d058      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 8004864:	787b      	ldrb	r3, [r7, #1]
 8004866:	2b02      	cmp	r3, #2
 8004868:	d055      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 800486a:	787b      	ldrb	r3, [r7, #1]
 800486c:	2b02      	cmp	r3, #2
 800486e:	d052      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 8004870:	787b      	ldrb	r3, [r7, #1]
 8004872:	2b02      	cmp	r3, #2
 8004874:	d04f      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 8004876:	787b      	ldrb	r3, [r7, #1]
 8004878:	2b03      	cmp	r3, #3
 800487a:	d04c      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 800487c:	787b      	ldrb	r3, [r7, #1]
 800487e:	2b04      	cmp	r3, #4
 8004880:	d049      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 8004882:	787b      	ldrb	r3, [r7, #1]
 8004884:	2b04      	cmp	r3, #4
 8004886:	d046      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 8004888:	787b      	ldrb	r3, [r7, #1]
 800488a:	2b04      	cmp	r3, #4
 800488c:	d043      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 800488e:	787b      	ldrb	r3, [r7, #1]
 8004890:	2b05      	cmp	r3, #5
 8004892:	d040      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 8004894:	787b      	ldrb	r3, [r7, #1]
 8004896:	2b05      	cmp	r3, #5
 8004898:	d03d      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 800489a:	787b      	ldrb	r3, [r7, #1]
 800489c:	2b09      	cmp	r3, #9
 800489e:	d03a      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 80048a0:	787b      	ldrb	r3, [r7, #1]
 80048a2:	2b06      	cmp	r3, #6
 80048a4:	d037      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 80048a6:	787b      	ldrb	r3, [r7, #1]
 80048a8:	2b09      	cmp	r3, #9
 80048aa:	d034      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 80048ac:	787b      	ldrb	r3, [r7, #1]
 80048ae:	2b07      	cmp	r3, #7
 80048b0:	d031      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 80048b2:	787b      	ldrb	r3, [r7, #1]
 80048b4:	2b07      	cmp	r3, #7
 80048b6:	d02e      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 80048b8:	787b      	ldrb	r3, [r7, #1]
 80048ba:	2b07      	cmp	r3, #7
 80048bc:	d02b      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 80048be:	787b      	ldrb	r3, [r7, #1]
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d028      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 80048c4:	787b      	ldrb	r3, [r7, #1]
 80048c6:	2b08      	cmp	r3, #8
 80048c8:	d025      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 80048ca:	787b      	ldrb	r3, [r7, #1]
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d022      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 80048d0:	787b      	ldrb	r3, [r7, #1]
 80048d2:	2b09      	cmp	r3, #9
 80048d4:	d01f      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 80048d6:	787b      	ldrb	r3, [r7, #1]
 80048d8:	2b09      	cmp	r3, #9
 80048da:	d01c      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 80048dc:	787b      	ldrb	r3, [r7, #1]
 80048de:	2b0a      	cmp	r3, #10
 80048e0:	d019      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 80048e2:	787b      	ldrb	r3, [r7, #1]
 80048e4:	2b0a      	cmp	r3, #10
 80048e6:	d016      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 80048e8:	787b      	ldrb	r3, [r7, #1]
 80048ea:	2b0b      	cmp	r3, #11
 80048ec:	d013      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 80048ee:	787b      	ldrb	r3, [r7, #1]
 80048f0:	2b0c      	cmp	r3, #12
 80048f2:	d010      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 80048f4:	787b      	ldrb	r3, [r7, #1]
 80048f6:	2b0c      	cmp	r3, #12
 80048f8:	d00d      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 80048fa:	787b      	ldrb	r3, [r7, #1]
 80048fc:	2b0c      	cmp	r3, #12
 80048fe:	d00a      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 8004900:	787b      	ldrb	r3, [r7, #1]
 8004902:	2b0d      	cmp	r3, #13
 8004904:	d007      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 8004906:	787b      	ldrb	r3, [r7, #1]
 8004908:	2b0f      	cmp	r3, #15
 800490a:	d004      	beq.n	8004916 <GPIO_PinAFConfig+0x1b6>
 800490c:	4827      	ldr	r0, [pc, #156]	; (80049ac <GPIO_PinAFConfig+0x24c>)
 800490e:	f240 2119 	movw	r1, #537	; 0x219
 8004912:	f7fc fa5b 	bl	8000dcc <assert_failed>
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8004916:	787a      	ldrb	r2, [r7, #1]
 8004918:	887b      	ldrh	r3, [r7, #2]
 800491a:	f003 0307 	and.w	r3, r3, #7
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	fa02 f303 	lsl.w	r3, r2, r3
 8004924:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8004926:	887b      	ldrh	r3, [r7, #2]
 8004928:	08db      	lsrs	r3, r3, #3
 800492a:	b29b      	uxth	r3, r3
 800492c:	461a      	mov	r2, r3
 800492e:	887b      	ldrh	r3, [r7, #2]
 8004930:	08db      	lsrs	r3, r3, #3
 8004932:	b29b      	uxth	r3, r3
 8004934:	4619      	mov	r1, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	3108      	adds	r1, #8
 800493a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800493e:	887b      	ldrh	r3, [r7, #2]
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	200f      	movs	r0, #15
 8004948:	fa00 f303 	lsl.w	r3, r0, r3
 800494c:	43db      	mvns	r3, r3
 800494e:	4019      	ands	r1, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	3208      	adds	r2, #8
 8004954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8004958:	887b      	ldrh	r3, [r7, #2]
 800495a:	08db      	lsrs	r3, r3, #3
 800495c:	b29b      	uxth	r3, r3
 800495e:	461a      	mov	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3208      	adds	r2, #8
 8004964:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4313      	orrs	r3, r2
 800496c:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800496e:	887b      	ldrh	r3, [r7, #2]
 8004970:	08db      	lsrs	r3, r3, #3
 8004972:	b29b      	uxth	r3, r3
 8004974:	461a      	mov	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	3208      	adds	r2, #8
 800497a:	68b9      	ldr	r1, [r7, #8]
 800497c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	40020000 	.word	0x40020000
 800498c:	40020400 	.word	0x40020400
 8004990:	40020800 	.word	0x40020800
 8004994:	40020c00 	.word	0x40020c00
 8004998:	40021000 	.word	0x40021000
 800499c:	40021400 	.word	0x40021400
 80049a0:	40021800 	.word	0x40021800
 80049a4:	40021c00 	.word	0x40021c00
 80049a8:	40022000 	.word	0x40022000
 80049ac:	08005a30 	.word	0x08005a30

080049b0 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b089      	sub	sp, #36	; 0x24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80049b8:	2300      	movs	r3, #0
 80049ba:	61bb      	str	r3, [r7, #24]
 80049bc:	2300      	movs	r3, #0
 80049be:	617b      	str	r3, [r7, #20]
 80049c0:	2300      	movs	r3, #0
 80049c2:	61fb      	str	r3, [r7, #28]
 80049c4:	2302      	movs	r3, #2
 80049c6:	613b      	str	r3, [r7, #16]
 80049c8:	2300      	movs	r3, #0
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	2302      	movs	r3, #2
 80049ce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80049d0:	4b48      	ldr	r3, [pc, #288]	; (8004af4 <RCC_GetClocksFreq+0x144>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f003 030c 	and.w	r3, r3, #12
 80049d8:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	2b04      	cmp	r3, #4
 80049de:	d007      	beq.n	80049f0 <RCC_GetClocksFreq+0x40>
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d009      	beq.n	80049f8 <RCC_GetClocksFreq+0x48>
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d13f      	bne.n	8004a68 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a43      	ldr	r2, [pc, #268]	; (8004af8 <RCC_GetClocksFreq+0x148>)
 80049ec:	601a      	str	r2, [r3, #0]
      break;
 80049ee:	e03f      	b.n	8004a70 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a42      	ldr	r2, [pc, #264]	; (8004afc <RCC_GetClocksFreq+0x14c>)
 80049f4:	601a      	str	r2, [r3, #0]
      break;
 80049f6:	e03b      	b.n	8004a70 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80049f8:	4b3e      	ldr	r3, [pc, #248]	; (8004af4 <RCC_GetClocksFreq+0x144>)
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a00:	0d9b      	lsrs	r3, r3, #22
 8004a02:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a04:	4b3b      	ldr	r3, [pc, #236]	; (8004af4 <RCC_GetClocksFreq+0x144>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a0c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00d      	beq.n	8004a30 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004a14:	4a39      	ldr	r2, [pc, #228]	; (8004afc <RCC_GetClocksFreq+0x14c>)
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a1c:	4b35      	ldr	r3, [pc, #212]	; (8004af4 <RCC_GetClocksFreq+0x144>)
 8004a1e:	6859      	ldr	r1, [r3, #4]
 8004a20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a24:	400b      	ands	r3, r1
 8004a26:	099b      	lsrs	r3, r3, #6
 8004a28:	fb03 f302 	mul.w	r3, r3, r2
 8004a2c:	61fb      	str	r3, [r7, #28]
 8004a2e:	e00c      	b.n	8004a4a <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8004a30:	4a31      	ldr	r2, [pc, #196]	; (8004af8 <RCC_GetClocksFreq+0x148>)
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a38:	4b2e      	ldr	r3, [pc, #184]	; (8004af4 <RCC_GetClocksFreq+0x144>)
 8004a3a:	6859      	ldr	r1, [r3, #4]
 8004a3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a40:	400b      	ands	r3, r1
 8004a42:	099b      	lsrs	r3, r3, #6
 8004a44:	fb03 f302 	mul.w	r3, r3, r2
 8004a48:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8004a4a:	4b2a      	ldr	r3, [pc, #168]	; (8004af4 <RCC_GetClocksFreq+0x144>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a52:	0c1b      	lsrs	r3, r3, #16
 8004a54:	3301      	adds	r3, #1
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8004a5a:	69fa      	ldr	r2, [r7, #28]
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	601a      	str	r2, [r3, #0]
      break;
 8004a66:	e003      	b.n	8004a70 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a23      	ldr	r2, [pc, #140]	; (8004af8 <RCC_GetClocksFreq+0x148>)
 8004a6c:	601a      	str	r2, [r3, #0]
      break;
 8004a6e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8004a70:	4b20      	ldr	r3, [pc, #128]	; (8004af4 <RCC_GetClocksFreq+0x144>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a78:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	091b      	lsrs	r3, r3, #4
 8004a7e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8004a80:	4a1f      	ldr	r2, [pc, #124]	; (8004b00 <RCC_GetClocksFreq+0x150>)
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	4413      	add	r3, r2
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	40da      	lsrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8004a98:	4b16      	ldr	r3, [pc, #88]	; (8004af4 <RCC_GetClocksFreq+0x144>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004aa0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	0a9b      	lsrs	r3, r3, #10
 8004aa6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8004aa8:	4a15      	ldr	r2, [pc, #84]	; (8004b00 <RCC_GetClocksFreq+0x150>)
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	4413      	add	r3, r2
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	40da      	lsrs	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8004ac0:	4b0c      	ldr	r3, [pc, #48]	; (8004af4 <RCC_GetClocksFreq+0x144>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004ac8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	0b5b      	lsrs	r3, r3, #13
 8004ace:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8004ad0:	4a0b      	ldr	r2, [pc, #44]	; (8004b00 <RCC_GetClocksFreq+0x150>)
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	40da      	lsrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	60da      	str	r2, [r3, #12]
}
 8004ae8:	3724      	adds	r7, #36	; 0x24
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	40023800 	.word	0x40023800
 8004af8:	00f42400 	.word	0x00f42400
 8004afc:	017d7840 	.word	0x017d7840
 8004b00:	20000020 	.word	0x20000020

08004b04 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	4b15      	ldr	r3, [pc, #84]	; (8004b68 <RCC_AHB1PeriphClockCmd+0x64>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d102      	bne.n	8004b20 <RCC_AHB1PeriphClockCmd+0x1c>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d104      	bne.n	8004b2a <RCC_AHB1PeriphClockCmd+0x26>
 8004b20:	4812      	ldr	r0, [pc, #72]	; (8004b6c <RCC_AHB1PeriphClockCmd+0x68>)
 8004b22:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8004b26:	f7fc f951 	bl	8000dcc <assert_failed>

  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8004b2a:	78fb      	ldrb	r3, [r7, #3]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d007      	beq.n	8004b40 <RCC_AHB1PeriphClockCmd+0x3c>
 8004b30:	78fb      	ldrb	r3, [r7, #3]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d004      	beq.n	8004b40 <RCC_AHB1PeriphClockCmd+0x3c>
 8004b36:	480d      	ldr	r0, [pc, #52]	; (8004b6c <RCC_AHB1PeriphClockCmd+0x68>)
 8004b38:	f240 4142 	movw	r1, #1090	; 0x442
 8004b3c:	f7fc f946 	bl	8000dcc <assert_failed>
  if (NewState != DISABLE)
 8004b40:	78fb      	ldrb	r3, [r7, #3]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d006      	beq.n	8004b54 <RCC_AHB1PeriphClockCmd+0x50>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8004b46:	4b0a      	ldr	r3, [pc, #40]	; (8004b70 <RCC_AHB1PeriphClockCmd+0x6c>)
 8004b48:	4a09      	ldr	r2, [pc, #36]	; (8004b70 <RCC_AHB1PeriphClockCmd+0x6c>)
 8004b4a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	631a      	str	r2, [r3, #48]	; 0x30
 8004b52:	e006      	b.n	8004b62 <RCC_AHB1PeriphClockCmd+0x5e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8004b54:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <RCC_AHB1PeriphClockCmd+0x6c>)
 8004b56:	4a06      	ldr	r2, [pc, #24]	; (8004b70 <RCC_AHB1PeriphClockCmd+0x6c>)
 8004b58:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	43d2      	mvns	r2, r2
 8004b5e:	400a      	ands	r2, r1
 8004b60:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	818bee00 	.word	0x818bee00
 8004b6c:	08005a80 	.word	0x08005a80
 8004b70:	40023800 	.word	0x40023800

08004b74 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	4b15      	ldr	r3, [pc, #84]	; (8004bd8 <RCC_APB2PeriphClockCmd+0x64>)
 8004b84:	4013      	ands	r3, r2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d102      	bne.n	8004b90 <RCC_APB2PeriphClockCmd+0x1c>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d104      	bne.n	8004b9a <RCC_APB2PeriphClockCmd+0x26>
 8004b90:	4812      	ldr	r0, [pc, #72]	; (8004bdc <RCC_APB2PeriphClockCmd+0x68>)
 8004b92:	f240 41d5 	movw	r1, #1237	; 0x4d5
 8004b96:	f7fc f919 	bl	8000dcc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8004b9a:	78fb      	ldrb	r3, [r7, #3]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d007      	beq.n	8004bb0 <RCC_APB2PeriphClockCmd+0x3c>
 8004ba0:	78fb      	ldrb	r3, [r7, #3]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d004      	beq.n	8004bb0 <RCC_APB2PeriphClockCmd+0x3c>
 8004ba6:	480d      	ldr	r0, [pc, #52]	; (8004bdc <RCC_APB2PeriphClockCmd+0x68>)
 8004ba8:	f240 41d6 	movw	r1, #1238	; 0x4d6
 8004bac:	f7fc f90e 	bl	8000dcc <assert_failed>

  if (NewState != DISABLE)
 8004bb0:	78fb      	ldrb	r3, [r7, #3]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d006      	beq.n	8004bc4 <RCC_APB2PeriphClockCmd+0x50>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8004bb6:	4b0a      	ldr	r3, [pc, #40]	; (8004be0 <RCC_APB2PeriphClockCmd+0x6c>)
 8004bb8:	4a09      	ldr	r2, [pc, #36]	; (8004be0 <RCC_APB2PeriphClockCmd+0x6c>)
 8004bba:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	645a      	str	r2, [r3, #68]	; 0x44
 8004bc2:	e006      	b.n	8004bd2 <RCC_APB2PeriphClockCmd+0x5e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8004bc4:	4b06      	ldr	r3, [pc, #24]	; (8004be0 <RCC_APB2PeriphClockCmd+0x6c>)
 8004bc6:	4a06      	ldr	r2, [pc, #24]	; (8004be0 <RCC_APB2PeriphClockCmd+0x6c>)
 8004bc8:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	43d2      	mvns	r2, r2
 8004bce:	400a      	ands	r2, r1
 8004bd0:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	fff8a0cc 	.word	0xfff8a0cc
 8004bdc:	08005a80 	.word	0x08005a80
 8004be0:	40023800 	.word	0x40023800

08004be4 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	81fb      	strh	r3, [r7, #14]
  
  /* check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	4b70      	ldr	r3, [pc, #448]	; (8004db8 <SPI_Init+0x1d4>)
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d00c      	beq.n	8004c14 <SPI_Init+0x30>
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	4b6f      	ldr	r3, [pc, #444]	; (8004dbc <SPI_Init+0x1d8>)
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d008      	beq.n	8004c14 <SPI_Init+0x30>
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	4b6e      	ldr	r3, [pc, #440]	; (8004dc0 <SPI_Init+0x1dc>)
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d004      	beq.n	8004c14 <SPI_Init+0x30>
 8004c0a:	486e      	ldr	r0, [pc, #440]	; (8004dc4 <SPI_Init+0x1e0>)
 8004c0c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004c10:	f7fc f8dc 	bl	8000dcc <assert_failed>
  
  /* Check the SPI parameters */
  assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	881b      	ldrh	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d013      	beq.n	8004c44 <SPI_Init+0x60>
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	881b      	ldrh	r3, [r3, #0]
 8004c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c24:	d00e      	beq.n	8004c44 <SPI_Init+0x60>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c2e:	d009      	beq.n	8004c44 <SPI_Init+0x60>
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c38:	d004      	beq.n	8004c44 <SPI_Init+0x60>
 8004c3a:	4862      	ldr	r0, [pc, #392]	; (8004dc4 <SPI_Init+0x1e0>)
 8004c3c:	f240 1109 	movw	r1, #265	; 0x109
 8004c40:	f7fc f8c4 	bl	8000dcc <assert_failed>
  assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	885b      	ldrh	r3, [r3, #2]
 8004c48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c4c:	d008      	beq.n	8004c60 <SPI_Init+0x7c>
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	885b      	ldrh	r3, [r3, #2]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d004      	beq.n	8004c60 <SPI_Init+0x7c>
 8004c56:	485b      	ldr	r0, [pc, #364]	; (8004dc4 <SPI_Init+0x1e0>)
 8004c58:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8004c5c:	f7fc f8b6 	bl	8000dcc <assert_failed>
  assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	889b      	ldrh	r3, [r3, #4]
 8004c64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c68:	d008      	beq.n	8004c7c <SPI_Init+0x98>
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	889b      	ldrh	r3, [r3, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d004      	beq.n	8004c7c <SPI_Init+0x98>
 8004c72:	4854      	ldr	r0, [pc, #336]	; (8004dc4 <SPI_Init+0x1e0>)
 8004c74:	f240 110b 	movw	r1, #267	; 0x10b
 8004c78:	f7fc f8a8 	bl	8000dcc <assert_failed>
  assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	88db      	ldrh	r3, [r3, #6]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d008      	beq.n	8004c96 <SPI_Init+0xb2>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	88db      	ldrh	r3, [r3, #6]
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d004      	beq.n	8004c96 <SPI_Init+0xb2>
 8004c8c:	484d      	ldr	r0, [pc, #308]	; (8004dc4 <SPI_Init+0x1e0>)
 8004c8e:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8004c92:	f7fc f89b 	bl	8000dcc <assert_failed>
  assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	891b      	ldrh	r3, [r3, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d008      	beq.n	8004cb0 <SPI_Init+0xcc>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	891b      	ldrh	r3, [r3, #8]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d004      	beq.n	8004cb0 <SPI_Init+0xcc>
 8004ca6:	4847      	ldr	r0, [pc, #284]	; (8004dc4 <SPI_Init+0x1e0>)
 8004ca8:	f240 110d 	movw	r1, #269	; 0x10d
 8004cac:	f7fc f88e 	bl	8000dcc <assert_failed>
  assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	895b      	ldrh	r3, [r3, #10]
 8004cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cb8:	d008      	beq.n	8004ccc <SPI_Init+0xe8>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	895b      	ldrh	r3, [r3, #10]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d004      	beq.n	8004ccc <SPI_Init+0xe8>
 8004cc2:	4840      	ldr	r0, [pc, #256]	; (8004dc4 <SPI_Init+0x1e0>)
 8004cc4:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8004cc8:	f7fc f880 	bl	8000dcc <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	899b      	ldrh	r3, [r3, #12]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d020      	beq.n	8004d16 <SPI_Init+0x132>
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	899b      	ldrh	r3, [r3, #12]
 8004cd8:	2b08      	cmp	r3, #8
 8004cda:	d01c      	beq.n	8004d16 <SPI_Init+0x132>
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	899b      	ldrh	r3, [r3, #12]
 8004ce0:	2b10      	cmp	r3, #16
 8004ce2:	d018      	beq.n	8004d16 <SPI_Init+0x132>
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	899b      	ldrh	r3, [r3, #12]
 8004ce8:	2b18      	cmp	r3, #24
 8004cea:	d014      	beq.n	8004d16 <SPI_Init+0x132>
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	899b      	ldrh	r3, [r3, #12]
 8004cf0:	2b20      	cmp	r3, #32
 8004cf2:	d010      	beq.n	8004d16 <SPI_Init+0x132>
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	899b      	ldrh	r3, [r3, #12]
 8004cf8:	2b28      	cmp	r3, #40	; 0x28
 8004cfa:	d00c      	beq.n	8004d16 <SPI_Init+0x132>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	899b      	ldrh	r3, [r3, #12]
 8004d00:	2b30      	cmp	r3, #48	; 0x30
 8004d02:	d008      	beq.n	8004d16 <SPI_Init+0x132>
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	899b      	ldrh	r3, [r3, #12]
 8004d08:	2b38      	cmp	r3, #56	; 0x38
 8004d0a:	d004      	beq.n	8004d16 <SPI_Init+0x132>
 8004d0c:	482d      	ldr	r0, [pc, #180]	; (8004dc4 <SPI_Init+0x1e0>)
 8004d0e:	f240 110f 	movw	r1, #271	; 0x10f
 8004d12:	f7fc f85b 	bl	8000dcc <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	89db      	ldrh	r3, [r3, #14]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d008      	beq.n	8004d30 <SPI_Init+0x14c>
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	89db      	ldrh	r3, [r3, #14]
 8004d22:	2b80      	cmp	r3, #128	; 0x80
 8004d24:	d004      	beq.n	8004d30 <SPI_Init+0x14c>
 8004d26:	4827      	ldr	r0, [pc, #156]	; (8004dc4 <SPI_Init+0x1e0>)
 8004d28:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004d2c:	f7fc f84e 	bl	8000dcc <assert_failed>
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	8a1b      	ldrh	r3, [r3, #16]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d104      	bne.n	8004d42 <SPI_Init+0x15e>
 8004d38:	4822      	ldr	r0, [pc, #136]	; (8004dc4 <SPI_Init+0x1e0>)
 8004d3a:	f240 1111 	movw	r1, #273	; 0x111
 8004d3e:	f7fc f845 	bl	8000dcc <assert_failed>

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8004d48:	89fb      	ldrh	r3, [r7, #14]
 8004d4a:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8004d4e:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	881a      	ldrh	r2, [r3, #0]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	885b      	ldrh	r3, [r3, #2]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004d60:	4313      	orrs	r3, r2
 8004d62:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004d70:	4313      	orrs	r3, r2
 8004d72:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004d80:	4313      	orrs	r3, r2
 8004d82:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	89fb      	ldrh	r3, [r7, #14]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	89fa      	ldrh	r2, [r7, #14]
 8004d96:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	8b9b      	ldrh	r3, [r3, #28]
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	8a1a      	ldrh	r2, [r3, #16]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	821a      	strh	r2, [r3, #16]
}
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	40013000 	.word	0x40013000
 8004dbc:	40003800 	.word	0x40003800
 8004dc0:	40003c00 	.word	0x40003c00
 8004dc4:	08005ad0 	.word	0x08005ad0

08004dc8 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	4b19      	ldr	r3, [pc, #100]	; (8004e3c <SPI_Cmd+0x74>)
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d00c      	beq.n	8004df6 <SPI_Cmd+0x2e>
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	4b18      	ldr	r3, [pc, #96]	; (8004e40 <SPI_Cmd+0x78>)
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d008      	beq.n	8004df6 <SPI_Cmd+0x2e>
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	4b17      	ldr	r3, [pc, #92]	; (8004e44 <SPI_Cmd+0x7c>)
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d004      	beq.n	8004df6 <SPI_Cmd+0x2e>
 8004dec:	4816      	ldr	r0, [pc, #88]	; (8004e48 <SPI_Cmd+0x80>)
 8004dee:	f240 2101 	movw	r1, #513	; 0x201
 8004df2:	f7fb ffeb 	bl	8000dcc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8004df6:	78fb      	ldrb	r3, [r7, #3]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d007      	beq.n	8004e0c <SPI_Cmd+0x44>
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d004      	beq.n	8004e0c <SPI_Cmd+0x44>
 8004e02:	4811      	ldr	r0, [pc, #68]	; (8004e48 <SPI_Cmd+0x80>)
 8004e04:	f240 2102 	movw	r1, #514	; 0x202
 8004e08:	f7fb ffe0 	bl	8000dcc <assert_failed>
  if (NewState != DISABLE)
 8004e0c:	78fb      	ldrb	r3, [r7, #3]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d008      	beq.n	8004e24 <SPI_Cmd+0x5c>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	881b      	ldrh	r3, [r3, #0]
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	801a      	strh	r2, [r3, #0]
 8004e22:	e007      	b.n	8004e34 <SPI_Cmd+0x6c>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	881b      	ldrh	r3, [r3, #0]
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	801a      	strh	r2, [r3, #0]
  }
}
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	40013000 	.word	0x40013000
 8004e40:	40003800 	.word	0x40003800
 8004e44:	40003c00 	.word	0x40003c00
 8004e48:	08005ad0 	.word	0x08005ad0

08004e4c <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	4613      	mov	r3, r2
 8004e56:	460a      	mov	r2, r1
 8004e58:	807a      	strh	r2, [r7, #2]
 8004e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	4b25      	ldr	r3, [pc, #148]	; (8004ef4 <SPI_I2S_DMACmd+0xa8>)
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d014      	beq.n	8004e8e <SPI_I2S_DMACmd+0x42>
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	4b24      	ldr	r3, [pc, #144]	; (8004ef8 <SPI_I2S_DMACmd+0xac>)
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d010      	beq.n	8004e8e <SPI_I2S_DMACmd+0x42>
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	4b23      	ldr	r3, [pc, #140]	; (8004efc <SPI_I2S_DMACmd+0xb0>)
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d00c      	beq.n	8004e8e <SPI_I2S_DMACmd+0x42>
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	4b22      	ldr	r3, [pc, #136]	; (8004f00 <SPI_I2S_DMACmd+0xb4>)
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d008      	beq.n	8004e8e <SPI_I2S_DMACmd+0x42>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8004e82:	d004      	beq.n	8004e8e <SPI_I2S_DMACmd+0x42>
 8004e84:	481f      	ldr	r0, [pc, #124]	; (8004f04 <SPI_I2S_DMACmd+0xb8>)
 8004e86:	f240 31d9 	movw	r1, #985	; 0x3d9
 8004e8a:	f7fb ff9f 	bl	8000dcc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8004e8e:	787b      	ldrb	r3, [r7, #1]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d007      	beq.n	8004ea4 <SPI_I2S_DMACmd+0x58>
 8004e94:	787b      	ldrb	r3, [r7, #1]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d004      	beq.n	8004ea4 <SPI_I2S_DMACmd+0x58>
 8004e9a:	481a      	ldr	r0, [pc, #104]	; (8004f04 <SPI_I2S_DMACmd+0xb8>)
 8004e9c:	f240 31da 	movw	r1, #986	; 0x3da
 8004ea0:	f7fb ff94 	bl	8000dcc <assert_failed>
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
 8004ea4:	887a      	ldrh	r2, [r7, #2]
 8004ea6:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8004eaa:	4013      	ands	r3, r2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d102      	bne.n	8004eb6 <SPI_I2S_DMACmd+0x6a>
 8004eb0:	887b      	ldrh	r3, [r7, #2]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d104      	bne.n	8004ec0 <SPI_I2S_DMACmd+0x74>
 8004eb6:	4813      	ldr	r0, [pc, #76]	; (8004f04 <SPI_I2S_DMACmd+0xb8>)
 8004eb8:	f240 31db 	movw	r1, #987	; 0x3db
 8004ebc:	f7fb ff86 	bl	8000dcc <assert_failed>

  if (NewState != DISABLE)
 8004ec0:	787b      	ldrb	r3, [r7, #1]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d008      	beq.n	8004ed8 <SPI_I2S_DMACmd+0x8c>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	889b      	ldrh	r3, [r3, #4]
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	887b      	ldrh	r3, [r7, #2]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	809a      	strh	r2, [r3, #4]
 8004ed6:	e009      	b.n	8004eec <SPI_I2S_DMACmd+0xa0>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	889b      	ldrh	r3, [r3, #4]
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	887b      	ldrh	r3, [r7, #2]
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	809a      	strh	r2, [r3, #4]
  }
}
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	40013000 	.word	0x40013000
 8004ef8:	40003800 	.word	0x40003800
 8004efc:	40003c00 	.word	0x40003c00
 8004f00:	40003400 	.word	0x40003400
 8004f04:	08005ad0 	.word	0x08005ad0

08004f08 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	460b      	mov	r3, r1
 8004f12:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8004f14:	2300      	movs	r3, #0
 8004f16:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	4b25      	ldr	r3, [pc, #148]	; (8004fb0 <SPI_I2S_GetFlagStatus+0xa8>)
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d014      	beq.n	8004f4a <SPI_I2S_GetFlagStatus+0x42>
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	4b24      	ldr	r3, [pc, #144]	; (8004fb4 <SPI_I2S_GetFlagStatus+0xac>)
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d010      	beq.n	8004f4a <SPI_I2S_GetFlagStatus+0x42>
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	4b23      	ldr	r3, [pc, #140]	; (8004fb8 <SPI_I2S_GetFlagStatus+0xb0>)
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d00c      	beq.n	8004f4a <SPI_I2S_GetFlagStatus+0x42>
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	4b22      	ldr	r3, [pc, #136]	; (8004fbc <SPI_I2S_GetFlagStatus+0xb4>)
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d008      	beq.n	8004f4a <SPI_I2S_GetFlagStatus+0x42>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8004f3e:	d004      	beq.n	8004f4a <SPI_I2S_GetFlagStatus+0x42>
 8004f40:	481f      	ldr	r0, [pc, #124]	; (8004fc0 <SPI_I2S_GetFlagStatus+0xb8>)
 8004f42:	f240 4173 	movw	r1, #1139	; 0x473
 8004f46:	f7fb ff41 	bl	8000dcc <assert_failed>
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
 8004f4a:	887b      	ldrh	r3, [r7, #2]
 8004f4c:	2b80      	cmp	r3, #128	; 0x80
 8004f4e:	d01d      	beq.n	8004f8c <SPI_I2S_GetFlagStatus+0x84>
 8004f50:	887b      	ldrh	r3, [r7, #2]
 8004f52:	2b40      	cmp	r3, #64	; 0x40
 8004f54:	d01a      	beq.n	8004f8c <SPI_I2S_GetFlagStatus+0x84>
 8004f56:	887b      	ldrh	r3, [r7, #2]
 8004f58:	2b20      	cmp	r3, #32
 8004f5a:	d017      	beq.n	8004f8c <SPI_I2S_GetFlagStatus+0x84>
 8004f5c:	887b      	ldrh	r3, [r7, #2]
 8004f5e:	2b10      	cmp	r3, #16
 8004f60:	d014      	beq.n	8004f8c <SPI_I2S_GetFlagStatus+0x84>
 8004f62:	887b      	ldrh	r3, [r7, #2]
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d011      	beq.n	8004f8c <SPI_I2S_GetFlagStatus+0x84>
 8004f68:	887b      	ldrh	r3, [r7, #2]
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d00e      	beq.n	8004f8c <SPI_I2S_GetFlagStatus+0x84>
 8004f6e:	887b      	ldrh	r3, [r7, #2]
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d00b      	beq.n	8004f8c <SPI_I2S_GetFlagStatus+0x84>
 8004f74:	887b      	ldrh	r3, [r7, #2]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d008      	beq.n	8004f8c <SPI_I2S_GetFlagStatus+0x84>
 8004f7a:	887b      	ldrh	r3, [r7, #2]
 8004f7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f80:	d004      	beq.n	8004f8c <SPI_I2S_GetFlagStatus+0x84>
 8004f82:	480f      	ldr	r0, [pc, #60]	; (8004fc0 <SPI_I2S_GetFlagStatus+0xb8>)
 8004f84:	f240 4174 	movw	r1, #1140	; 0x474
 8004f88:	f7fb ff20 	bl	8000dcc <assert_failed>
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	891b      	ldrh	r3, [r3, #8]
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	887b      	ldrh	r3, [r7, #2]
 8004f94:	4013      	ands	r3, r2
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <SPI_I2S_GetFlagStatus+0x9a>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	73fb      	strb	r3, [r7, #15]
 8004fa0:	e001      	b.n	8004fa6 <SPI_I2S_GetFlagStatus+0x9e>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8004fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	40013000 	.word	0x40013000
 8004fb4:	40003800 	.word	0x40003800
 8004fb8:	40003c00 	.word	0x40003c00
 8004fbc:	40003400 	.word	0x40003400
 8004fc0:	08005ad0 	.word	0x08005ad0

08004fc4 <SPI_I2S_ClearFlag>:
  *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  *  
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	460b      	mov	r3, r1
 8004fce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	4b14      	ldr	r3, [pc, #80]	; (8005024 <SPI_I2S_ClearFlag+0x60>)
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d014      	beq.n	8005002 <SPI_I2S_ClearFlag+0x3e>
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	4b13      	ldr	r3, [pc, #76]	; (8005028 <SPI_I2S_ClearFlag+0x64>)
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d010      	beq.n	8005002 <SPI_I2S_ClearFlag+0x3e>
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	4b12      	ldr	r3, [pc, #72]	; (800502c <SPI_I2S_ClearFlag+0x68>)
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d00c      	beq.n	8005002 <SPI_I2S_ClearFlag+0x3e>
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	4b11      	ldr	r3, [pc, #68]	; (8005030 <SPI_I2S_ClearFlag+0x6c>)
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d008      	beq.n	8005002 <SPI_I2S_ClearFlag+0x3e>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8004ff6:	d004      	beq.n	8005002 <SPI_I2S_ClearFlag+0x3e>
 8004ff8:	480e      	ldr	r0, [pc, #56]	; (8005034 <SPI_I2S_ClearFlag+0x70>)
 8004ffa:	f240 419b 	movw	r1, #1179	; 0x49b
 8004ffe:	f7fb fee5 	bl	8000dcc <assert_failed>
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
 8005002:	887b      	ldrh	r3, [r7, #2]
 8005004:	2b10      	cmp	r3, #16
 8005006:	d004      	beq.n	8005012 <SPI_I2S_ClearFlag+0x4e>
 8005008:	480a      	ldr	r0, [pc, #40]	; (8005034 <SPI_I2S_ClearFlag+0x70>)
 800500a:	f240 419c 	movw	r1, #1180	; 0x49c
 800500e:	f7fb fedd 	bl	8000dcc <assert_failed>
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8005012:	887b      	ldrh	r3, [r7, #2]
 8005014:	43db      	mvns	r3, r3
 8005016:	b29a      	uxth	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	811a      	strh	r2, [r3, #8]
}
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	40013000 	.word	0x40013000
 8005028:	40003800 	.word	0x40003800
 800502c:	40003c00 	.word	0x40003c00
 8005030:	40003400 	.word	0x40003400
 8005034:	08005ad0 	.word	0x08005ad0

08005038 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b08a      	sub	sp, #40	; 0x28
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8005042:	2300      	movs	r3, #0
 8005044:	627b      	str	r3, [r7, #36]	; 0x24
 8005046:	2300      	movs	r3, #0
 8005048:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800504a:	2300      	movs	r3, #0
 800504c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800504e:	2300      	movs	r3, #0
 8005050:	61bb      	str	r3, [r7, #24]
  RCC_ClocksTypeDef RCC_ClocksStatus;

  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	4b97      	ldr	r3, [pc, #604]	; (80052b4 <USART_Init+0x27c>)
 8005056:	429a      	cmp	r2, r3
 8005058:	d017      	beq.n	800508a <USART_Init+0x52>
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	4b96      	ldr	r3, [pc, #600]	; (80052b8 <USART_Init+0x280>)
 800505e:	429a      	cmp	r2, r3
 8005060:	d013      	beq.n	800508a <USART_Init+0x52>
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	4b95      	ldr	r3, [pc, #596]	; (80052bc <USART_Init+0x284>)
 8005066:	429a      	cmp	r2, r3
 8005068:	d00f      	beq.n	800508a <USART_Init+0x52>
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	4b94      	ldr	r3, [pc, #592]	; (80052c0 <USART_Init+0x288>)
 800506e:	429a      	cmp	r2, r3
 8005070:	d00b      	beq.n	800508a <USART_Init+0x52>
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	4b93      	ldr	r3, [pc, #588]	; (80052c4 <USART_Init+0x28c>)
 8005076:	429a      	cmp	r2, r3
 8005078:	d007      	beq.n	800508a <USART_Init+0x52>
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	4b92      	ldr	r3, [pc, #584]	; (80052c8 <USART_Init+0x290>)
 800507e:	429a      	cmp	r2, r3
 8005080:	d003      	beq.n	800508a <USART_Init+0x52>
 8005082:	4892      	ldr	r0, [pc, #584]	; (80052cc <USART_Init+0x294>)
 8005084:	21eb      	movs	r1, #235	; 0xeb
 8005086:	f7fb fea1 	bl	8000dcc <assert_failed>
  assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d004      	beq.n	800509c <USART_Init+0x64>
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	4b8e      	ldr	r3, [pc, #568]	; (80052d0 <USART_Init+0x298>)
 8005098:	429a      	cmp	r2, r3
 800509a:	d903      	bls.n	80050a4 <USART_Init+0x6c>
 800509c:	488b      	ldr	r0, [pc, #556]	; (80052cc <USART_Init+0x294>)
 800509e:	21ec      	movs	r1, #236	; 0xec
 80050a0:	f7fb fe94 	bl	8000dcc <assert_failed>
  assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	889b      	ldrh	r3, [r3, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d008      	beq.n	80050be <USART_Init+0x86>
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	889b      	ldrh	r3, [r3, #4]
 80050b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050b4:	d003      	beq.n	80050be <USART_Init+0x86>
 80050b6:	4885      	ldr	r0, [pc, #532]	; (80052cc <USART_Init+0x294>)
 80050b8:	21ed      	movs	r1, #237	; 0xed
 80050ba:	f7fb fe87 	bl	8000dcc <assert_failed>
  assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	88db      	ldrh	r3, [r3, #6]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d012      	beq.n	80050ec <USART_Init+0xb4>
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	88db      	ldrh	r3, [r3, #6]
 80050ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ce:	d00d      	beq.n	80050ec <USART_Init+0xb4>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	88db      	ldrh	r3, [r3, #6]
 80050d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050d8:	d008      	beq.n	80050ec <USART_Init+0xb4>
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	88db      	ldrh	r3, [r3, #6]
 80050de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050e2:	d003      	beq.n	80050ec <USART_Init+0xb4>
 80050e4:	4879      	ldr	r0, [pc, #484]	; (80052cc <USART_Init+0x294>)
 80050e6:	21ee      	movs	r1, #238	; 0xee
 80050e8:	f7fb fe70 	bl	8000dcc <assert_failed>
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	891b      	ldrh	r3, [r3, #8]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00d      	beq.n	8005110 <USART_Init+0xd8>
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	891b      	ldrh	r3, [r3, #8]
 80050f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050fc:	d008      	beq.n	8005110 <USART_Init+0xd8>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	891b      	ldrh	r3, [r3, #8]
 8005102:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005106:	d003      	beq.n	8005110 <USART_Init+0xd8>
 8005108:	4870      	ldr	r0, [pc, #448]	; (80052cc <USART_Init+0x294>)
 800510a:	21ef      	movs	r1, #239	; 0xef
 800510c:	f7fb fe5e 	bl	8000dcc <assert_failed>
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	895b      	ldrh	r3, [r3, #10]
 8005114:	461a      	mov	r2, r3
 8005116:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800511a:	4013      	ands	r3, r2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d103      	bne.n	8005128 <USART_Init+0xf0>
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	895b      	ldrh	r3, [r3, #10]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d103      	bne.n	8005130 <USART_Init+0xf8>
 8005128:	4868      	ldr	r0, [pc, #416]	; (80052cc <USART_Init+0x294>)
 800512a:	21f0      	movs	r1, #240	; 0xf0
 800512c:	f7fb fe4e 	bl	8000dcc <assert_failed>
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	899b      	ldrh	r3, [r3, #12]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d012      	beq.n	800515e <USART_Init+0x126>
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	899b      	ldrh	r3, [r3, #12]
 800513c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005140:	d00d      	beq.n	800515e <USART_Init+0x126>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	899b      	ldrh	r3, [r3, #12]
 8005146:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800514a:	d008      	beq.n	800515e <USART_Init+0x126>
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	899b      	ldrh	r3, [r3, #12]
 8005150:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005154:	d003      	beq.n	800515e <USART_Init+0x126>
 8005156:	485d      	ldr	r0, [pc, #372]	; (80052cc <USART_Init+0x294>)
 8005158:	21f1      	movs	r1, #241	; 0xf1
 800515a:	f7fb fe37 	bl	8000dcc <assert_failed>

  /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	899b      	ldrh	r3, [r3, #12]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d013      	beq.n	800518e <USART_Init+0x156>
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	4b52      	ldr	r3, [pc, #328]	; (80052b4 <USART_Init+0x27c>)
 800516a:	429a      	cmp	r2, r3
 800516c:	d00f      	beq.n	800518e <USART_Init+0x156>
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	4b51      	ldr	r3, [pc, #324]	; (80052b8 <USART_Init+0x280>)
 8005172:	429a      	cmp	r2, r3
 8005174:	d00b      	beq.n	800518e <USART_Init+0x156>
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	4b50      	ldr	r3, [pc, #320]	; (80052bc <USART_Init+0x284>)
 800517a:	429a      	cmp	r2, r3
 800517c:	d007      	beq.n	800518e <USART_Init+0x156>
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	4b51      	ldr	r3, [pc, #324]	; (80052c8 <USART_Init+0x290>)
 8005182:	429a      	cmp	r2, r3
 8005184:	d003      	beq.n	800518e <USART_Init+0x156>
 8005186:	4851      	ldr	r0, [pc, #324]	; (80052cc <USART_Init+0x294>)
 8005188:	21f6      	movs	r1, #246	; 0xf6
 800518a:	f7fb fe1f 	bl	8000dcc <assert_failed>
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	8a1b      	ldrh	r3, [r3, #16]
 8005192:	b29b      	uxth	r3, r3
 8005194:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8005196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005198:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800519c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	88db      	ldrh	r3, [r3, #6]
 80051a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a4:	4313      	orrs	r3, r2
 80051a6:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	899b      	ldrh	r3, [r3, #12]
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80051be:	f023 030c 	bic.w	r3, r3, #12
 80051c2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	889a      	ldrh	r2, [r3, #4]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	891b      	ldrh	r3, [r3, #8]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80051d4:	4313      	orrs	r3, r2
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051da:	4313      	orrs	r3, r2
 80051dc:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	8a9b      	ldrh	r3, [r3, #20]
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	899b      	ldrh	r3, [r3, #12]
 80051fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051fc:	4313      	orrs	r3, r2
 80051fe:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	b29a      	uxth	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8005208:	f107 0308 	add.w	r3, r7, #8
 800520c:	4618      	mov	r0, r3
 800520e:	f7ff fbcf 	bl	80049b0 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	4b27      	ldr	r3, [pc, #156]	; (80052b4 <USART_Init+0x27c>)
 8005216:	429a      	cmp	r2, r3
 8005218:	d003      	beq.n	8005222 <USART_Init+0x1ea>
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	4b2a      	ldr	r3, [pc, #168]	; (80052c8 <USART_Init+0x290>)
 800521e:	429a      	cmp	r2, r3
 8005220:	d102      	bne.n	8005228 <USART_Init+0x1f0>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	623b      	str	r3, [r7, #32]
 8005226:	e001      	b.n	800522c <USART_Init+0x1f4>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	899b      	ldrh	r3, [r3, #12]
 8005230:	b29b      	uxth	r3, r3
 8005232:	b29b      	uxth	r3, r3
 8005234:	b21b      	sxth	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	da0c      	bge.n	8005254 <USART_Init+0x21c>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800523a:	6a3a      	ldr	r2, [r7, #32]
 800523c:	4613      	mov	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	009a      	lsls	r2, r3, #2
 8005244:	441a      	add	r2, r3
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005250:	61fb      	str	r3, [r7, #28]
 8005252:	e00b      	b.n	800526c <USART_Init+0x234>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8005254:	6a3a      	ldr	r2, [r7, #32]
 8005256:	4613      	mov	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4413      	add	r3, r2
 800525c:	009a      	lsls	r2, r3, #2
 800525e:	441a      	add	r2, r3
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	fbb2 f3f3 	udiv	r3, r2, r3
 800526a:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 800526c:	69fa      	ldr	r2, [r7, #28]
 800526e:	4b19      	ldr	r3, [pc, #100]	; (80052d4 <USART_Init+0x29c>)
 8005270:	fba3 1302 	umull	r1, r3, r3, r2
 8005274:	095b      	lsrs	r3, r3, #5
 8005276:	011b      	lsls	r3, r3, #4
 8005278:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	091b      	lsrs	r3, r3, #4
 800527e:	2264      	movs	r2, #100	; 0x64
 8005280:	fb02 f303 	mul.w	r3, r2, r3
 8005284:	69fa      	ldr	r2, [r7, #28]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	899b      	ldrh	r3, [r3, #12]
 800528e:	b29b      	uxth	r3, r3
 8005290:	b29b      	uxth	r3, r3
 8005292:	b21b      	sxth	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	da1f      	bge.n	80052d8 <USART_Init+0x2a0>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	00db      	lsls	r3, r3, #3
 800529c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80052a0:	4b0c      	ldr	r3, [pc, #48]	; (80052d4 <USART_Init+0x29c>)
 80052a2:	fba3 1302 	umull	r1, r3, r3, r2
 80052a6:	095b      	lsrs	r3, r3, #5
 80052a8:	f003 0307 	and.w	r3, r3, #7
 80052ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ae:	4313      	orrs	r3, r2
 80052b0:	627b      	str	r3, [r7, #36]	; 0x24
 80052b2:	e01e      	b.n	80052f2 <USART_Init+0x2ba>
 80052b4:	40011000 	.word	0x40011000
 80052b8:	40004400 	.word	0x40004400
 80052bc:	40004800 	.word	0x40004800
 80052c0:	40004c00 	.word	0x40004c00
 80052c4:	40005000 	.word	0x40005000
 80052c8:	40011400 	.word	0x40011400
 80052cc:	08005b20 	.word	0x08005b20
 80052d0:	007270e0 	.word	0x007270e0
 80052d4:	51eb851f 	.word	0x51eb851f
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80052e0:	4b07      	ldr	r3, [pc, #28]	; (8005300 <USART_Init+0x2c8>)
 80052e2:	fba3 1302 	umull	r1, r3, r3, r2
 80052e6:	095b      	lsrs	r3, r3, #5
 80052e8:	f003 030f 	and.w	r3, r3, #15
 80052ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ee:	4313      	orrs	r3, r2
 80052f0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	811a      	strh	r2, [r3, #8]
}
 80052fa:	3728      	adds	r7, #40	; 0x28
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	51eb851f 	.word	0x51eb851f

08005304 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	460b      	mov	r3, r1
 800530e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	4b1f      	ldr	r3, [pc, #124]	; (8005390 <USART_Cmd+0x8c>)
 8005314:	429a      	cmp	r2, r3
 8005316:	d018      	beq.n	800534a <USART_Cmd+0x46>
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	4b1e      	ldr	r3, [pc, #120]	; (8005394 <USART_Cmd+0x90>)
 800531c:	429a      	cmp	r2, r3
 800531e:	d014      	beq.n	800534a <USART_Cmd+0x46>
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	4b1d      	ldr	r3, [pc, #116]	; (8005398 <USART_Cmd+0x94>)
 8005324:	429a      	cmp	r2, r3
 8005326:	d010      	beq.n	800534a <USART_Cmd+0x46>
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	4b1c      	ldr	r3, [pc, #112]	; (800539c <USART_Cmd+0x98>)
 800532c:	429a      	cmp	r2, r3
 800532e:	d00c      	beq.n	800534a <USART_Cmd+0x46>
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	4b1b      	ldr	r3, [pc, #108]	; (80053a0 <USART_Cmd+0x9c>)
 8005334:	429a      	cmp	r2, r3
 8005336:	d008      	beq.n	800534a <USART_Cmd+0x46>
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	4b1a      	ldr	r3, [pc, #104]	; (80053a4 <USART_Cmd+0xa0>)
 800533c:	429a      	cmp	r2, r3
 800533e:	d004      	beq.n	800534a <USART_Cmd+0x46>
 8005340:	4819      	ldr	r0, [pc, #100]	; (80053a8 <USART_Cmd+0xa4>)
 8005342:	f240 119b 	movw	r1, #411	; 0x19b
 8005346:	f7fb fd41 	bl	8000dcc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 800534a:	78fb      	ldrb	r3, [r7, #3]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d007      	beq.n	8005360 <USART_Cmd+0x5c>
 8005350:	78fb      	ldrb	r3, [r7, #3]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d004      	beq.n	8005360 <USART_Cmd+0x5c>
 8005356:	4814      	ldr	r0, [pc, #80]	; (80053a8 <USART_Cmd+0xa4>)
 8005358:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800535c:	f7fb fd36 	bl	8000dcc <assert_failed>
  
  if (NewState != DISABLE)
 8005360:	78fb      	ldrb	r3, [r7, #3]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d008      	beq.n	8005378 <USART_Cmd+0x74>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	899b      	ldrh	r3, [r3, #12]
 800536a:	b29b      	uxth	r3, r3
 800536c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005370:	b29a      	uxth	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	819a      	strh	r2, [r3, #12]
 8005376:	e007      	b.n	8005388 <USART_Cmd+0x84>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	899b      	ldrh	r3, [r3, #12]
 800537c:	b29b      	uxth	r3, r3
 800537e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005382:	b29a      	uxth	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	819a      	strh	r2, [r3, #12]
  }
}
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	40011000 	.word	0x40011000
 8005394:	40004400 	.word	0x40004400
 8005398:	40004800 	.word	0x40004800
 800539c:	40004c00 	.word	0x40004c00
 80053a0:	40005000 	.word	0x40005000
 80053a4:	40011400 	.word	0x40011400
 80053a8:	08005b20 	.word	0x08005b20

080053ac <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	4613      	mov	r3, r2
 80053b6:	460a      	mov	r2, r1
 80053b8:	807a      	strh	r2, [r7, #2]
 80053ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	4b27      	ldr	r3, [pc, #156]	; (800545c <USART_DMACmd+0xb0>)
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d018      	beq.n	80053f6 <USART_DMACmd+0x4a>
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	4b26      	ldr	r3, [pc, #152]	; (8005460 <USART_DMACmd+0xb4>)
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d014      	beq.n	80053f6 <USART_DMACmd+0x4a>
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	4b25      	ldr	r3, [pc, #148]	; (8005464 <USART_DMACmd+0xb8>)
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d010      	beq.n	80053f6 <USART_DMACmd+0x4a>
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	4b24      	ldr	r3, [pc, #144]	; (8005468 <USART_DMACmd+0xbc>)
 80053d8:	429a      	cmp	r2, r3
 80053da:	d00c      	beq.n	80053f6 <USART_DMACmd+0x4a>
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	4b23      	ldr	r3, [pc, #140]	; (800546c <USART_DMACmd+0xc0>)
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d008      	beq.n	80053f6 <USART_DMACmd+0x4a>
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	4b22      	ldr	r3, [pc, #136]	; (8005470 <USART_DMACmd+0xc4>)
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d004      	beq.n	80053f6 <USART_DMACmd+0x4a>
 80053ec:	4821      	ldr	r0, [pc, #132]	; (8005474 <USART_DMACmd+0xc8>)
 80053ee:	f240 413b 	movw	r1, #1083	; 0x43b
 80053f2:	f7fb fceb 	bl	8000dcc <assert_failed>
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
 80053f6:	887a      	ldrh	r2, [r7, #2]
 80053f8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80053fc:	4013      	ands	r3, r2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d102      	bne.n	8005408 <USART_DMACmd+0x5c>
 8005402:	887b      	ldrh	r3, [r7, #2]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d104      	bne.n	8005412 <USART_DMACmd+0x66>
 8005408:	481a      	ldr	r0, [pc, #104]	; (8005474 <USART_DMACmd+0xc8>)
 800540a:	f240 413c 	movw	r1, #1084	; 0x43c
 800540e:	f7fb fcdd 	bl	8000dcc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 8005412:	787b      	ldrb	r3, [r7, #1]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d007      	beq.n	8005428 <USART_DMACmd+0x7c>
 8005418:	787b      	ldrb	r3, [r7, #1]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d004      	beq.n	8005428 <USART_DMACmd+0x7c>
 800541e:	4815      	ldr	r0, [pc, #84]	; (8005474 <USART_DMACmd+0xc8>)
 8005420:	f240 413d 	movw	r1, #1085	; 0x43d
 8005424:	f7fb fcd2 	bl	8000dcc <assert_failed>

  if (NewState != DISABLE)
 8005428:	787b      	ldrb	r3, [r7, #1]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d008      	beq.n	8005440 <USART_DMACmd+0x94>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	8a9b      	ldrh	r3, [r3, #20]
 8005432:	b29a      	uxth	r2, r3
 8005434:	887b      	ldrh	r3, [r7, #2]
 8005436:	4313      	orrs	r3, r2
 8005438:	b29a      	uxth	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	829a      	strh	r2, [r3, #20]
 800543e:	e009      	b.n	8005454 <USART_DMACmd+0xa8>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	8a9b      	ldrh	r3, [r3, #20]
 8005444:	b29a      	uxth	r2, r3
 8005446:	887b      	ldrh	r3, [r7, #2]
 8005448:	43db      	mvns	r3, r3
 800544a:	b29b      	uxth	r3, r3
 800544c:	4013      	ands	r3, r2
 800544e:	b29a      	uxth	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	829a      	strh	r2, [r3, #20]
  }
}
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	40011000 	.word	0x40011000
 8005460:	40004400 	.word	0x40004400
 8005464:	40004800 	.word	0x40004800
 8005468:	40004c00 	.word	0x40004c00
 800546c:	40005000 	.word	0x40005000
 8005470:	40011400 	.word	0x40011400
 8005474:	08005b20 	.word	0x08005b20

08005478 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	4613      	mov	r3, r2
 8005482:	460a      	mov	r2, r1
 8005484:	807a      	strh	r2, [r7, #2]
 8005486:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8005488:	2300      	movs	r3, #0
 800548a:	613b      	str	r3, [r7, #16]
 800548c:	2300      	movs	r3, #0
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	2300      	movs	r3, #0
 8005492:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8005494:	2300      	movs	r3, #0
 8005496:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	4b4f      	ldr	r3, [pc, #316]	; (80055d8 <USART_ITConfig+0x160>)
 800549c:	429a      	cmp	r2, r3
 800549e:	d018      	beq.n	80054d2 <USART_ITConfig+0x5a>
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	4b4e      	ldr	r3, [pc, #312]	; (80055dc <USART_ITConfig+0x164>)
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d014      	beq.n	80054d2 <USART_ITConfig+0x5a>
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	4b4d      	ldr	r3, [pc, #308]	; (80055e0 <USART_ITConfig+0x168>)
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d010      	beq.n	80054d2 <USART_ITConfig+0x5a>
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	4b4c      	ldr	r3, [pc, #304]	; (80055e4 <USART_ITConfig+0x16c>)
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d00c      	beq.n	80054d2 <USART_ITConfig+0x5a>
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	4b4b      	ldr	r3, [pc, #300]	; (80055e8 <USART_ITConfig+0x170>)
 80054bc:	429a      	cmp	r2, r3
 80054be:	d008      	beq.n	80054d2 <USART_ITConfig+0x5a>
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	4b4a      	ldr	r3, [pc, #296]	; (80055ec <USART_ITConfig+0x174>)
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d004      	beq.n	80054d2 <USART_ITConfig+0x5a>
 80054c8:	4849      	ldr	r0, [pc, #292]	; (80055f0 <USART_ITConfig+0x178>)
 80054ca:	f240 41bd 	movw	r1, #1213	; 0x4bd
 80054ce:	f7fb fc7d 	bl	8000dcc <assert_failed>
  assert_param(IS_USART_CONFIG_IT(USART_IT));
 80054d2:	887b      	ldrh	r3, [r7, #2]
 80054d4:	2b28      	cmp	r3, #40	; 0x28
 80054d6:	d025      	beq.n	8005524 <USART_ITConfig+0xac>
 80054d8:	887a      	ldrh	r2, [r7, #2]
 80054da:	f240 7327 	movw	r3, #1831	; 0x727
 80054de:	429a      	cmp	r2, r3
 80054e0:	d020      	beq.n	8005524 <USART_ITConfig+0xac>
 80054e2:	887a      	ldrh	r2, [r7, #2]
 80054e4:	f240 6326 	movw	r3, #1574	; 0x626
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d01b      	beq.n	8005524 <USART_ITConfig+0xac>
 80054ec:	887a      	ldrh	r2, [r7, #2]
 80054ee:	f240 5325 	movw	r3, #1317	; 0x525
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d016      	beq.n	8005524 <USART_ITConfig+0xac>
 80054f6:	887a      	ldrh	r2, [r7, #2]
 80054f8:	f240 4324 	movw	r3, #1060	; 0x424
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d011      	beq.n	8005524 <USART_ITConfig+0xac>
 8005500:	887a      	ldrh	r2, [r7, #2]
 8005502:	f640 0346 	movw	r3, #2118	; 0x846
 8005506:	429a      	cmp	r2, r3
 8005508:	d00c      	beq.n	8005524 <USART_ITConfig+0xac>
 800550a:	887a      	ldrh	r2, [r7, #2]
 800550c:	f640 136a 	movw	r3, #2410	; 0x96a
 8005510:	429a      	cmp	r2, r3
 8005512:	d007      	beq.n	8005524 <USART_ITConfig+0xac>
 8005514:	887b      	ldrh	r3, [r7, #2]
 8005516:	2b60      	cmp	r3, #96	; 0x60
 8005518:	d004      	beq.n	8005524 <USART_ITConfig+0xac>
 800551a:	4835      	ldr	r0, [pc, #212]	; (80055f0 <USART_ITConfig+0x178>)
 800551c:	f240 41be 	movw	r1, #1214	; 0x4be
 8005520:	f7fb fc54 	bl	8000dcc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8005524:	787b      	ldrb	r3, [r7, #1]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d007      	beq.n	800553a <USART_ITConfig+0xc2>
 800552a:	787b      	ldrb	r3, [r7, #1]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d004      	beq.n	800553a <USART_ITConfig+0xc2>
 8005530:	482f      	ldr	r0, [pc, #188]	; (80055f0 <USART_ITConfig+0x178>)
 8005532:	f240 41bf 	movw	r1, #1215	; 0x4bf
 8005536:	f7fb fc49 	bl	8000dcc <assert_failed>

  /* The CTS interrupt is not available for UART4 and UART5 */
  if (USART_IT == USART_IT_CTS)
 800553a:	887a      	ldrh	r2, [r7, #2]
 800553c:	f640 136a 	movw	r3, #2410	; 0x96a
 8005540:	429a      	cmp	r2, r3
 8005542:	d114      	bne.n	800556e <USART_ITConfig+0xf6>
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	4b24      	ldr	r3, [pc, #144]	; (80055d8 <USART_ITConfig+0x160>)
 8005548:	429a      	cmp	r2, r3
 800554a:	d010      	beq.n	800556e <USART_ITConfig+0xf6>
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	4b23      	ldr	r3, [pc, #140]	; (80055dc <USART_ITConfig+0x164>)
 8005550:	429a      	cmp	r2, r3
 8005552:	d00c      	beq.n	800556e <USART_ITConfig+0xf6>
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	4b22      	ldr	r3, [pc, #136]	; (80055e0 <USART_ITConfig+0x168>)
 8005558:	429a      	cmp	r2, r3
 800555a:	d008      	beq.n	800556e <USART_ITConfig+0xf6>
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	4b23      	ldr	r3, [pc, #140]	; (80055ec <USART_ITConfig+0x174>)
 8005560:	429a      	cmp	r2, r3
 8005562:	d004      	beq.n	800556e <USART_ITConfig+0xf6>
 8005564:	4822      	ldr	r0, [pc, #136]	; (80055f0 <USART_ITConfig+0x178>)
 8005566:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800556a:	f7fb fc2f 	bl	8000dcc <assert_failed>
  } 
    
  usartxbase = (uint32_t)USARTx;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8005572:	887b      	ldrh	r3, [r7, #2]
 8005574:	b2db      	uxtb	r3, r3
 8005576:	095b      	lsrs	r3, r3, #5
 8005578:	b2db      	uxtb	r3, r3
 800557a:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800557c:	887b      	ldrh	r3, [r7, #2]
 800557e:	f003 031f 	and.w	r3, r3, #31
 8005582:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2201      	movs	r2, #1
 8005588:	fa02 f303 	lsl.w	r3, r2, r3
 800558c:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d103      	bne.n	800559c <USART_ITConfig+0x124>
  {
    usartxbase += 0x0C;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	330c      	adds	r3, #12
 8005598:	617b      	str	r3, [r7, #20]
 800559a:	e009      	b.n	80055b0 <USART_ITConfig+0x138>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d103      	bne.n	80055aa <USART_ITConfig+0x132>
  {
    usartxbase += 0x10;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	3310      	adds	r3, #16
 80055a6:	617b      	str	r3, [r7, #20]
 80055a8:	e002      	b.n	80055b0 <USART_ITConfig+0x138>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	3314      	adds	r3, #20
 80055ae:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 80055b0:	787b      	ldrb	r3, [r7, #1]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d006      	beq.n	80055c4 <USART_ITConfig+0x14c>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	6811      	ldr	r1, [r2, #0]
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	430a      	orrs	r2, r1
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	e006      	b.n	80055d2 <USART_ITConfig+0x15a>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	6811      	ldr	r1, [r2, #0]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	43d2      	mvns	r2, r2
 80055ce:	400a      	ands	r2, r1
 80055d0:	601a      	str	r2, [r3, #0]
  }
}
 80055d2:	3718      	adds	r7, #24
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	40011000 	.word	0x40011000
 80055dc:	40004400 	.word	0x40004400
 80055e0:	40004800 	.word	0x40004800
 80055e4:	40004c00 	.word	0x40004c00
 80055e8:	40005000 	.word	0x40005000
 80055ec:	40011400 	.word	0x40011400
 80055f0:	08005b20 	.word	0x08005b20

080055f4 <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	460b      	mov	r3, r1
 80055fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	4b26      	ldr	r3, [pc, #152]	; (800569c <USART_ClearFlag+0xa8>)
 8005604:	429a      	cmp	r2, r3
 8005606:	d018      	beq.n	800563a <USART_ClearFlag+0x46>
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	4b25      	ldr	r3, [pc, #148]	; (80056a0 <USART_ClearFlag+0xac>)
 800560c:	429a      	cmp	r2, r3
 800560e:	d014      	beq.n	800563a <USART_ClearFlag+0x46>
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	4b24      	ldr	r3, [pc, #144]	; (80056a4 <USART_ClearFlag+0xb0>)
 8005614:	429a      	cmp	r2, r3
 8005616:	d010      	beq.n	800563a <USART_ClearFlag+0x46>
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	4b23      	ldr	r3, [pc, #140]	; (80056a8 <USART_ClearFlag+0xb4>)
 800561c:	429a      	cmp	r2, r3
 800561e:	d00c      	beq.n	800563a <USART_ClearFlag+0x46>
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	4b22      	ldr	r3, [pc, #136]	; (80056ac <USART_ClearFlag+0xb8>)
 8005624:	429a      	cmp	r2, r3
 8005626:	d008      	beq.n	800563a <USART_ClearFlag+0x46>
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	4b21      	ldr	r3, [pc, #132]	; (80056b0 <USART_ClearFlag+0xbc>)
 800562c:	429a      	cmp	r2, r3
 800562e:	d004      	beq.n	800563a <USART_ClearFlag+0x46>
 8005630:	4820      	ldr	r0, [pc, #128]	; (80056b4 <USART_ClearFlag+0xc0>)
 8005632:	f240 512c 	movw	r1, #1324	; 0x52c
 8005636:	f7fb fbc9 	bl	8000dcc <assert_failed>
  assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
 800563a:	887a      	ldrh	r2, [r7, #2]
 800563c:	f64f 439f 	movw	r3, #64671	; 0xfc9f
 8005640:	4013      	ands	r3, r2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d102      	bne.n	800564c <USART_ClearFlag+0x58>
 8005646:	887b      	ldrh	r3, [r7, #2]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d104      	bne.n	8005656 <USART_ClearFlag+0x62>
 800564c:	4819      	ldr	r0, [pc, #100]	; (80056b4 <USART_ClearFlag+0xc0>)
 800564e:	f240 512d 	movw	r1, #1325	; 0x52d
 8005652:	f7fb fbbb 	bl	8000dcc <assert_failed>

  /* The CTS flag is not available for UART4 and UART5 */
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
 8005656:	887b      	ldrh	r3, [r7, #2]
 8005658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800565c:	2b00      	cmp	r3, #0
 800565e:	d014      	beq.n	800568a <USART_ClearFlag+0x96>
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	4b0e      	ldr	r3, [pc, #56]	; (800569c <USART_ClearFlag+0xa8>)
 8005664:	429a      	cmp	r2, r3
 8005666:	d010      	beq.n	800568a <USART_ClearFlag+0x96>
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	4b0d      	ldr	r3, [pc, #52]	; (80056a0 <USART_ClearFlag+0xac>)
 800566c:	429a      	cmp	r2, r3
 800566e:	d00c      	beq.n	800568a <USART_ClearFlag+0x96>
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	4b0c      	ldr	r3, [pc, #48]	; (80056a4 <USART_ClearFlag+0xb0>)
 8005674:	429a      	cmp	r2, r3
 8005676:	d008      	beq.n	800568a <USART_ClearFlag+0x96>
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	4b0d      	ldr	r3, [pc, #52]	; (80056b0 <USART_ClearFlag+0xbc>)
 800567c:	429a      	cmp	r2, r3
 800567e:	d004      	beq.n	800568a <USART_ClearFlag+0x96>
 8005680:	480c      	ldr	r0, [pc, #48]	; (80056b4 <USART_ClearFlag+0xc0>)
 8005682:	f240 5132 	movw	r1, #1330	; 0x532
 8005686:	f7fb fba1 	bl	8000dcc <assert_failed>
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 800568a:	887b      	ldrh	r3, [r7, #2]
 800568c:	43db      	mvns	r3, r3
 800568e:	b29a      	uxth	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	801a      	strh	r2, [r3, #0]
}
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	40011000 	.word	0x40011000
 80056a0:	40004400 	.word	0x40004400
 80056a4:	40004800 	.word	0x40004800
 80056a8:	40004c00 	.word	0x40004c00
 80056ac:	40005000 	.word	0x40005000
 80056b0:	40011400 	.word	0x40011400
 80056b4:	08005b20 	.word	0x08005b20

080056b8 <__libc_init_array>:
 80056b8:	b570      	push	{r4, r5, r6, lr}
 80056ba:	4e0f      	ldr	r6, [pc, #60]	; (80056f8 <__libc_init_array+0x40>)
 80056bc:	4d0f      	ldr	r5, [pc, #60]	; (80056fc <__libc_init_array+0x44>)
 80056be:	1b76      	subs	r6, r6, r5
 80056c0:	10b6      	asrs	r6, r6, #2
 80056c2:	d007      	beq.n	80056d4 <__libc_init_array+0x1c>
 80056c4:	3d04      	subs	r5, #4
 80056c6:	2400      	movs	r4, #0
 80056c8:	3401      	adds	r4, #1
 80056ca:	f855 3f04 	ldr.w	r3, [r5, #4]!
 80056ce:	4798      	blx	r3
 80056d0:	42a6      	cmp	r6, r4
 80056d2:	d1f9      	bne.n	80056c8 <__libc_init_array+0x10>
 80056d4:	4e0a      	ldr	r6, [pc, #40]	; (8005700 <__libc_init_array+0x48>)
 80056d6:	4d0b      	ldr	r5, [pc, #44]	; (8005704 <__libc_init_array+0x4c>)
 80056d8:	1b76      	subs	r6, r6, r5
 80056da:	f000 fa59 	bl	8005b90 <_init>
 80056de:	10b6      	asrs	r6, r6, #2
 80056e0:	d008      	beq.n	80056f4 <__libc_init_array+0x3c>
 80056e2:	3d04      	subs	r5, #4
 80056e4:	2400      	movs	r4, #0
 80056e6:	3401      	adds	r4, #1
 80056e8:	f855 3f04 	ldr.w	r3, [r5, #4]!
 80056ec:	4798      	blx	r3
 80056ee:	42a6      	cmp	r6, r4
 80056f0:	d1f9      	bne.n	80056e6 <__libc_init_array+0x2e>
 80056f2:	bd70      	pop	{r4, r5, r6, pc}
 80056f4:	bd70      	pop	{r4, r5, r6, pc}
 80056f6:	bf00      	nop
 80056f8:	08005ba8 	.word	0x08005ba8
 80056fc:	08005ba8 	.word	0x08005ba8
 8005700:	08005bb0 	.word	0x08005bb0
 8005704:	08005ba8 	.word	0x08005ba8

08005708 <memcmp>:
 8005708:	2a03      	cmp	r2, #3
 800570a:	b470      	push	{r4, r5, r6}
 800570c:	d928      	bls.n	8005760 <memcmp+0x58>
 800570e:	ea40 0301 	orr.w	r3, r0, r1
 8005712:	079b      	lsls	r3, r3, #30
 8005714:	d013      	beq.n	800573e <memcmp+0x36>
 8005716:	7805      	ldrb	r5, [r0, #0]
 8005718:	780c      	ldrb	r4, [r1, #0]
 800571a:	42a5      	cmp	r5, r4
 800571c:	d124      	bne.n	8005768 <memcmp+0x60>
 800571e:	3a01      	subs	r2, #1
 8005720:	2300      	movs	r3, #0
 8005722:	e005      	b.n	8005730 <memcmp+0x28>
 8005724:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005728:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800572c:	42a5      	cmp	r5, r4
 800572e:	d11b      	bne.n	8005768 <memcmp+0x60>
 8005730:	4293      	cmp	r3, r2
 8005732:	f103 0301 	add.w	r3, r3, #1
 8005736:	d1f5      	bne.n	8005724 <memcmp+0x1c>
 8005738:	2000      	movs	r0, #0
 800573a:	bc70      	pop	{r4, r5, r6}
 800573c:	4770      	bx	lr
 800573e:	460c      	mov	r4, r1
 8005740:	4603      	mov	r3, r0
 8005742:	6825      	ldr	r5, [r4, #0]
 8005744:	681e      	ldr	r6, [r3, #0]
 8005746:	42ae      	cmp	r6, r5
 8005748:	4621      	mov	r1, r4
 800574a:	4618      	mov	r0, r3
 800574c:	f104 0404 	add.w	r4, r4, #4
 8005750:	f103 0304 	add.w	r3, r3, #4
 8005754:	d104      	bne.n	8005760 <memcmp+0x58>
 8005756:	3a04      	subs	r2, #4
 8005758:	2a03      	cmp	r2, #3
 800575a:	4618      	mov	r0, r3
 800575c:	4621      	mov	r1, r4
 800575e:	d8f0      	bhi.n	8005742 <memcmp+0x3a>
 8005760:	2a00      	cmp	r2, #0
 8005762:	d1d8      	bne.n	8005716 <memcmp+0xe>
 8005764:	4610      	mov	r0, r2
 8005766:	e7e8      	b.n	800573a <memcmp+0x32>
 8005768:	1b28      	subs	r0, r5, r4
 800576a:	bc70      	pop	{r4, r5, r6}
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop

08005770 <memset>:
 8005770:	b4f0      	push	{r4, r5, r6, r7}
 8005772:	0784      	lsls	r4, r0, #30
 8005774:	d043      	beq.n	80057fe <memset+0x8e>
 8005776:	1e54      	subs	r4, r2, #1
 8005778:	2a00      	cmp	r2, #0
 800577a:	d03e      	beq.n	80057fa <memset+0x8a>
 800577c:	b2cd      	uxtb	r5, r1
 800577e:	4603      	mov	r3, r0
 8005780:	e003      	b.n	800578a <memset+0x1a>
 8005782:	1e62      	subs	r2, r4, #1
 8005784:	2c00      	cmp	r4, #0
 8005786:	d038      	beq.n	80057fa <memset+0x8a>
 8005788:	4614      	mov	r4, r2
 800578a:	f803 5b01 	strb.w	r5, [r3], #1
 800578e:	079a      	lsls	r2, r3, #30
 8005790:	d1f7      	bne.n	8005782 <memset+0x12>
 8005792:	2c03      	cmp	r4, #3
 8005794:	d92a      	bls.n	80057ec <memset+0x7c>
 8005796:	b2cd      	uxtb	r5, r1
 8005798:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800579c:	2c0f      	cmp	r4, #15
 800579e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80057a2:	d915      	bls.n	80057d0 <memset+0x60>
 80057a4:	f1a4 0710 	sub.w	r7, r4, #16
 80057a8:	093f      	lsrs	r7, r7, #4
 80057aa:	f103 0610 	add.w	r6, r3, #16
 80057ae:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 80057b2:	461a      	mov	r2, r3
 80057b4:	6015      	str	r5, [r2, #0]
 80057b6:	6055      	str	r5, [r2, #4]
 80057b8:	6095      	str	r5, [r2, #8]
 80057ba:	60d5      	str	r5, [r2, #12]
 80057bc:	3210      	adds	r2, #16
 80057be:	42b2      	cmp	r2, r6
 80057c0:	d1f8      	bne.n	80057b4 <memset+0x44>
 80057c2:	f004 040f 	and.w	r4, r4, #15
 80057c6:	3701      	adds	r7, #1
 80057c8:	2c03      	cmp	r4, #3
 80057ca:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 80057ce:	d90d      	bls.n	80057ec <memset+0x7c>
 80057d0:	461e      	mov	r6, r3
 80057d2:	4622      	mov	r2, r4
 80057d4:	3a04      	subs	r2, #4
 80057d6:	2a03      	cmp	r2, #3
 80057d8:	f846 5b04 	str.w	r5, [r6], #4
 80057dc:	d8fa      	bhi.n	80057d4 <memset+0x64>
 80057de:	1f22      	subs	r2, r4, #4
 80057e0:	f022 0203 	bic.w	r2, r2, #3
 80057e4:	3204      	adds	r2, #4
 80057e6:	4413      	add	r3, r2
 80057e8:	f004 0403 	and.w	r4, r4, #3
 80057ec:	b12c      	cbz	r4, 80057fa <memset+0x8a>
 80057ee:	b2c9      	uxtb	r1, r1
 80057f0:	441c      	add	r4, r3
 80057f2:	f803 1b01 	strb.w	r1, [r3], #1
 80057f6:	42a3      	cmp	r3, r4
 80057f8:	d1fb      	bne.n	80057f2 <memset+0x82>
 80057fa:	bcf0      	pop	{r4, r5, r6, r7}
 80057fc:	4770      	bx	lr
 80057fe:	4614      	mov	r4, r2
 8005800:	4603      	mov	r3, r0
 8005802:	e7c6      	b.n	8005792 <memset+0x22>

08005804 <register_fini>:
 8005804:	4b02      	ldr	r3, [pc, #8]	; (8005810 <register_fini+0xc>)
 8005806:	b113      	cbz	r3, 800580e <register_fini+0xa>
 8005808:	4802      	ldr	r0, [pc, #8]	; (8005814 <register_fini+0x10>)
 800580a:	f000 b805 	b.w	8005818 <atexit>
 800580e:	4770      	bx	lr
 8005810:	00000000 	.word	0x00000000
 8005814:	08005825 	.word	0x08005825

08005818 <atexit>:
 8005818:	4601      	mov	r1, r0
 800581a:	2000      	movs	r0, #0
 800581c:	4602      	mov	r2, r0
 800581e:	4603      	mov	r3, r0
 8005820:	f000 b818 	b.w	8005854 <__register_exitproc>

08005824 <__libc_fini_array>:
 8005824:	b538      	push	{r3, r4, r5, lr}
 8005826:	4d09      	ldr	r5, [pc, #36]	; (800584c <__libc_fini_array+0x28>)
 8005828:	4c09      	ldr	r4, [pc, #36]	; (8005850 <__libc_fini_array+0x2c>)
 800582a:	1b64      	subs	r4, r4, r5
 800582c:	10a4      	asrs	r4, r4, #2
 800582e:	bf18      	it	ne
 8005830:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
 8005834:	d005      	beq.n	8005842 <__libc_fini_array+0x1e>
 8005836:	3c01      	subs	r4, #1
 8005838:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800583c:	4798      	blx	r3
 800583e:	2c00      	cmp	r4, #0
 8005840:	d1f9      	bne.n	8005836 <__libc_fini_array+0x12>
 8005842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005846:	f000 b9a9 	b.w	8005b9c <_fini>
 800584a:	bf00      	nop
 800584c:	08005bb0 	.word	0x08005bb0
 8005850:	08005bb4 	.word	0x08005bb4

08005854 <__register_exitproc>:
 8005854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005856:	4c27      	ldr	r4, [pc, #156]	; (80058f4 <__register_exitproc+0xa0>)
 8005858:	6826      	ldr	r6, [r4, #0]
 800585a:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
 800585e:	b085      	sub	sp, #20
 8005860:	4607      	mov	r7, r0
 8005862:	2c00      	cmp	r4, #0
 8005864:	d041      	beq.n	80058ea <__register_exitproc+0x96>
 8005866:	6865      	ldr	r5, [r4, #4]
 8005868:	2d1f      	cmp	r5, #31
 800586a:	dd1e      	ble.n	80058aa <__register_exitproc+0x56>
 800586c:	4822      	ldr	r0, [pc, #136]	; (80058f8 <__register_exitproc+0xa4>)
 800586e:	b918      	cbnz	r0, 8005878 <__register_exitproc+0x24>
 8005870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005874:	b005      	add	sp, #20
 8005876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005878:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800587c:	9103      	str	r1, [sp, #12]
 800587e:	9202      	str	r2, [sp, #8]
 8005880:	9301      	str	r3, [sp, #4]
 8005882:	f3af 8000 	nop.w
 8005886:	9903      	ldr	r1, [sp, #12]
 8005888:	9a02      	ldr	r2, [sp, #8]
 800588a:	9b01      	ldr	r3, [sp, #4]
 800588c:	4604      	mov	r4, r0
 800588e:	2800      	cmp	r0, #0
 8005890:	d0ee      	beq.n	8005870 <__register_exitproc+0x1c>
 8005892:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
 8005896:	6025      	str	r5, [r4, #0]
 8005898:	2000      	movs	r0, #0
 800589a:	6060      	str	r0, [r4, #4]
 800589c:	4605      	mov	r5, r0
 800589e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 80058a2:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
 80058a6:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
 80058aa:	b93f      	cbnz	r7, 80058bc <__register_exitproc+0x68>
 80058ac:	1cab      	adds	r3, r5, #2
 80058ae:	2000      	movs	r0, #0
 80058b0:	3501      	adds	r5, #1
 80058b2:	6065      	str	r5, [r4, #4]
 80058b4:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 80058b8:	b005      	add	sp, #20
 80058ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058bc:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 80058c0:	f04f 0c01 	mov.w	ip, #1
 80058c4:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 80058c8:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 80058cc:	fa0c f205 	lsl.w	r2, ip, r5
 80058d0:	4316      	orrs	r6, r2
 80058d2:	2f02      	cmp	r7, #2
 80058d4:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 80058d8:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 80058dc:	d1e6      	bne.n	80058ac <__register_exitproc+0x58>
 80058de:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 80058e2:	431a      	orrs	r2, r3
 80058e4:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 80058e8:	e7e0      	b.n	80058ac <__register_exitproc+0x58>
 80058ea:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
 80058ee:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 80058f2:	e7b8      	b.n	8005866 <__register_exitproc+0x12>
 80058f4:	08005b8c 	.word	0x08005b8c
 80058f8:	00000000 	.word	0x00000000
 80058fc:	72617453 	.word	0x72617453
 8005900:	676e6974 	.word	0x676e6974
 8005904:	0000000a 	.word	0x0000000a
 8005908:	72617375 	.word	0x72617375
 800590c:	00000074 	.word	0x00000074
 8005910:	6f727245 	.word	0x6f727245
 8005914:	72632072 	.word	0x72632072
 8005918:	69746165 	.word	0x69746165
 800591c:	6d20676e 	.word	0x6d20676e
 8005920:	726f746f 	.word	0x726f746f
 8005924:	74204248 	.word	0x74204248
 8005928:	2e6b7361 	.word	0x2e6b7361
 800592c:	0000000a 	.word	0x0000000a
 8005930:	63637553 	.word	0x63637553
 8005934:	73736573 	.word	0x73736573
 8005938:	6c6c7566 	.word	0x6c6c7566
 800593c:	72632079 	.word	0x72632079
 8005940:	65746165 	.word	0x65746165
 8005944:	6f6d2064 	.word	0x6f6d2064
 8005948:	48726f74 	.word	0x48726f74
 800594c:	61742042 	.word	0x61742042
 8005950:	000a6b73 	.word	0x000a6b73
 8005954:	72450a0a 	.word	0x72450a0a
 8005958:	20726f72 	.word	0x20726f72
 800595c:	68746977 	.word	0x68746977
 8005960:	68637320 	.word	0x68637320
 8005964:	6c756465 	.word	0x6c756465
 8005968:	21217265 	.word	0x21217265
 800596c:	0a0a2e20 	.word	0x0a0a2e20
 8005970:	00000000 	.word	0x00000000
 8005974:	454c4449 	.word	0x454c4449
 8005978:	00000000 	.word	0x00000000
 800597c:	09097325 	.word	0x09097325
 8005980:	25096325 	.word	0x25096325
 8005984:	75250975 	.word	0x75250975
 8005988:	0d752509 	.word	0x0d752509
 800598c:	0000000a 	.word	0x0000000a
 8005990:	20726d54 	.word	0x20726d54
 8005994:	00637653 	.word	0x00637653
 8005998:	2f707041 	.word	0x2f707041
 800599c:	334d5453 	.word	0x334d5453
 80059a0:	2d344632 	.word	0x2d344632
 80059a4:	63736944 	.word	0x63736944
 80059a8:	7265766f 	.word	0x7265766f
 80059ac:	694c2f79 	.word	0x694c2f79
 80059b0:	72617262 	.word	0x72617262
 80059b4:	2f736569 	.word	0x2f736569
 80059b8:	334d5453 	.word	0x334d5453
 80059bc:	78344632 	.word	0x78344632
 80059c0:	74535f78 	.word	0x74535f78
 80059c4:	72655064 	.word	0x72655064
 80059c8:	5f687069 	.word	0x5f687069
 80059cc:	76697244 	.word	0x76697244
 80059d0:	732f7265 	.word	0x732f7265
 80059d4:	6d2f6372 	.word	0x6d2f6372
 80059d8:	2e637369 	.word	0x2e637369
 80059dc:	00000063 	.word	0x00000063
 80059e0:	2f707041 	.word	0x2f707041
 80059e4:	334d5453 	.word	0x334d5453
 80059e8:	2d344632 	.word	0x2d344632
 80059ec:	63736944 	.word	0x63736944
 80059f0:	7265766f 	.word	0x7265766f
 80059f4:	694c2f79 	.word	0x694c2f79
 80059f8:	72617262 	.word	0x72617262
 80059fc:	2f736569 	.word	0x2f736569
 8005a00:	334d5453 	.word	0x334d5453
 8005a04:	78344632 	.word	0x78344632
 8005a08:	74535f78 	.word	0x74535f78
 8005a0c:	72655064 	.word	0x72655064
 8005a10:	5f687069 	.word	0x5f687069
 8005a14:	76697244 	.word	0x76697244
 8005a18:	732f7265 	.word	0x732f7265
 8005a1c:	732f6372 	.word	0x732f6372
 8005a20:	32336d74 	.word	0x32336d74
 8005a24:	78783466 	.word	0x78783466
 8005a28:	616d645f 	.word	0x616d645f
 8005a2c:	0000632e 	.word	0x0000632e
 8005a30:	2f707041 	.word	0x2f707041
 8005a34:	334d5453 	.word	0x334d5453
 8005a38:	2d344632 	.word	0x2d344632
 8005a3c:	63736944 	.word	0x63736944
 8005a40:	7265766f 	.word	0x7265766f
 8005a44:	694c2f79 	.word	0x694c2f79
 8005a48:	72617262 	.word	0x72617262
 8005a4c:	2f736569 	.word	0x2f736569
 8005a50:	334d5453 	.word	0x334d5453
 8005a54:	78344632 	.word	0x78344632
 8005a58:	74535f78 	.word	0x74535f78
 8005a5c:	72655064 	.word	0x72655064
 8005a60:	5f687069 	.word	0x5f687069
 8005a64:	76697244 	.word	0x76697244
 8005a68:	732f7265 	.word	0x732f7265
 8005a6c:	732f6372 	.word	0x732f6372
 8005a70:	32336d74 	.word	0x32336d74
 8005a74:	78783466 	.word	0x78783466
 8005a78:	6970675f 	.word	0x6970675f
 8005a7c:	00632e6f 	.word	0x00632e6f
 8005a80:	2f707041 	.word	0x2f707041
 8005a84:	334d5453 	.word	0x334d5453
 8005a88:	2d344632 	.word	0x2d344632
 8005a8c:	63736944 	.word	0x63736944
 8005a90:	7265766f 	.word	0x7265766f
 8005a94:	694c2f79 	.word	0x694c2f79
 8005a98:	72617262 	.word	0x72617262
 8005a9c:	2f736569 	.word	0x2f736569
 8005aa0:	334d5453 	.word	0x334d5453
 8005aa4:	78344632 	.word	0x78344632
 8005aa8:	74535f78 	.word	0x74535f78
 8005aac:	72655064 	.word	0x72655064
 8005ab0:	5f687069 	.word	0x5f687069
 8005ab4:	76697244 	.word	0x76697244
 8005ab8:	732f7265 	.word	0x732f7265
 8005abc:	732f6372 	.word	0x732f6372
 8005ac0:	32336d74 	.word	0x32336d74
 8005ac4:	78783466 	.word	0x78783466
 8005ac8:	6363725f 	.word	0x6363725f
 8005acc:	0000632e 	.word	0x0000632e
 8005ad0:	2f707041 	.word	0x2f707041
 8005ad4:	334d5453 	.word	0x334d5453
 8005ad8:	2d344632 	.word	0x2d344632
 8005adc:	63736944 	.word	0x63736944
 8005ae0:	7265766f 	.word	0x7265766f
 8005ae4:	694c2f79 	.word	0x694c2f79
 8005ae8:	72617262 	.word	0x72617262
 8005aec:	2f736569 	.word	0x2f736569
 8005af0:	334d5453 	.word	0x334d5453
 8005af4:	78344632 	.word	0x78344632
 8005af8:	74535f78 	.word	0x74535f78
 8005afc:	72655064 	.word	0x72655064
 8005b00:	5f687069 	.word	0x5f687069
 8005b04:	76697244 	.word	0x76697244
 8005b08:	732f7265 	.word	0x732f7265
 8005b0c:	732f6372 	.word	0x732f6372
 8005b10:	32336d74 	.word	0x32336d74
 8005b14:	78783466 	.word	0x78783466
 8005b18:	6970735f 	.word	0x6970735f
 8005b1c:	0000632e 	.word	0x0000632e
 8005b20:	2f707041 	.word	0x2f707041
 8005b24:	334d5453 	.word	0x334d5453
 8005b28:	2d344632 	.word	0x2d344632
 8005b2c:	63736944 	.word	0x63736944
 8005b30:	7265766f 	.word	0x7265766f
 8005b34:	694c2f79 	.word	0x694c2f79
 8005b38:	72617262 	.word	0x72617262
 8005b3c:	2f736569 	.word	0x2f736569
 8005b40:	334d5453 	.word	0x334d5453
 8005b44:	78344632 	.word	0x78344632
 8005b48:	74535f78 	.word	0x74535f78
 8005b4c:	72655064 	.word	0x72655064
 8005b50:	5f687069 	.word	0x5f687069
 8005b54:	76697244 	.word	0x76697244
 8005b58:	732f7265 	.word	0x732f7265
 8005b5c:	732f6372 	.word	0x732f6372
 8005b60:	32336d74 	.word	0x32336d74
 8005b64:	78783466 	.word	0x78783466
 8005b68:	6173755f 	.word	0x6173755f
 8005b6c:	632e7472 	.word	0x632e7472
 8005b70:	00000000 	.word	0x00000000

08005b74 <ucExpectedStackBytes.9202>:
 8005b74:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
 8005b84:	a5a5a5a5 00000043                       ....C...

08005b8c <_global_impure_ptr>:
 8005b8c:	20000030                                0.. 

08005b90 <_init>:
 8005b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b92:	bf00      	nop
 8005b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b96:	bc08      	pop	{r3}
 8005b98:	469e      	mov	lr, r3
 8005b9a:	4770      	bx	lr

08005b9c <_fini>:
 8005b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b9e:	bf00      	nop
 8005ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ba2:	bc08      	pop	{r3}
 8005ba4:	469e      	mov	lr, r3
 8005ba6:	4770      	bx	lr
