   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"death.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.bss.usCreationCount,"aw",%nobits
  20              		.align	1
  23              	usCreationCount:
  24 0000 0000     		.space	2
  25              		.section	.bss.uxTasksRunningAtStart,"aw",%nobits
  26              		.align	2
  29              	uxTasksRunningAtStart:
  30 0000 00000000 		.space	4
  31              		.section	.rodata.uxMaxNumberOfExtraTasksRunning,"a",%progbits
  32              		.align	2
  35              	uxMaxNumberOfExtraTasksRunning:
  36 0000 03000000 		.word	3
  37              		.comm	xCreatedTask,4,4
  38              		.section	.rodata
  39              		.align	2
  40              	.LC0:
  41 0000 43524541 		.ascii	"CREATOR\000"
  41      544F5200 
  42              		.section	.text.vCreateSuicidalTasks,"ax",%progbits
  43              		.align	2
  44              		.global	vCreateSuicidalTasks
  45              		.thumb
  46              		.thumb_func
  48              	vCreateSuicidalTasks:
  49              	.LFB110:
  50              		.file 1 "App/Common/Minimal/death.c"
   1:App/Common/Minimal/death.c **** /*
   2:App/Common/Minimal/death.c ****     FreeRTOS V7.5.3 - Copyright (C) 2013 Real Time Engineers Ltd. 
   3:App/Common/Minimal/death.c ****     All rights reserved
   4:App/Common/Minimal/death.c **** 
   5:App/Common/Minimal/death.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:App/Common/Minimal/death.c **** 
   7:App/Common/Minimal/death.c ****     ***************************************************************************
   8:App/Common/Minimal/death.c ****      *                                                                       *
   9:App/Common/Minimal/death.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  10:App/Common/Minimal/death.c ****      *    robust, strictly quality controlled, supported, and cross          *
  11:App/Common/Minimal/death.c ****      *    platform software that has become a de facto standard.             *
  12:App/Common/Minimal/death.c ****      *                                                                       *
  13:App/Common/Minimal/death.c ****      *    Help yourself get started quickly and support the FreeRTOS         *
  14:App/Common/Minimal/death.c ****      *    project by purchasing a FreeRTOS tutorial book, reference          *
  15:App/Common/Minimal/death.c ****      *    manual, or both from: http://www.FreeRTOS.org/Documentation        *
  16:App/Common/Minimal/death.c ****      *                                                                       *
  17:App/Common/Minimal/death.c ****      *    Thank you!                                                         *
  18:App/Common/Minimal/death.c ****      *                                                                       *
  19:App/Common/Minimal/death.c ****     ***************************************************************************
  20:App/Common/Minimal/death.c **** 
  21:App/Common/Minimal/death.c ****     This file is part of the FreeRTOS distribution.
  22:App/Common/Minimal/death.c **** 
  23:App/Common/Minimal/death.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  24:App/Common/Minimal/death.c ****     the terms of the GNU General Public License (version 2) as published by the
  25:App/Common/Minimal/death.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  26:App/Common/Minimal/death.c **** 
  27:App/Common/Minimal/death.c ****     >>! NOTE: The modification to the GPL is included to allow you to distribute
  28:App/Common/Minimal/death.c ****     >>! a combined work that includes FreeRTOS without being obliged to provide
  29:App/Common/Minimal/death.c ****     >>! the source code for proprietary components outside of the FreeRTOS
  30:App/Common/Minimal/death.c ****     >>! kernel.
  31:App/Common/Minimal/death.c **** 
  32:App/Common/Minimal/death.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  33:App/Common/Minimal/death.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  34:App/Common/Minimal/death.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available from the following
  35:App/Common/Minimal/death.c ****     link: http://www.freertos.org/a00114.html
  36:App/Common/Minimal/death.c **** 
  37:App/Common/Minimal/death.c ****     1 tab == 4 spaces!
  38:App/Common/Minimal/death.c **** 
  39:App/Common/Minimal/death.c ****     ***************************************************************************
  40:App/Common/Minimal/death.c ****      *                                                                       *
  41:App/Common/Minimal/death.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  42:App/Common/Minimal/death.c ****      *    not run, what could be wrong?"                                     *
  43:App/Common/Minimal/death.c ****      *                                                                       *
  44:App/Common/Minimal/death.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  45:App/Common/Minimal/death.c ****      *                                                                       *
  46:App/Common/Minimal/death.c ****     ***************************************************************************
  47:App/Common/Minimal/death.c **** 
  48:App/Common/Minimal/death.c ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions,
  49:App/Common/Minimal/death.c ****     license and Real Time Engineers Ltd. contact details.
  50:App/Common/Minimal/death.c **** 
  51:App/Common/Minimal/death.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  52:App/Common/Minimal/death.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  53:App/Common/Minimal/death.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  54:App/Common/Minimal/death.c **** 
  55:App/Common/Minimal/death.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
  56:App/Common/Minimal/death.c ****     Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS
  57:App/Common/Minimal/death.c ****     licenses offer ticketed support, indemnification and middleware.
  58:App/Common/Minimal/death.c **** 
  59:App/Common/Minimal/death.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  60:App/Common/Minimal/death.c ****     engineered and independently SIL3 certified version for use in safety and
  61:App/Common/Minimal/death.c ****     mission critical applications that require provable dependability.
  62:App/Common/Minimal/death.c **** 
  63:App/Common/Minimal/death.c ****     1 tab == 4 spaces!
  64:App/Common/Minimal/death.c **** */
  65:App/Common/Minimal/death.c **** 
  66:App/Common/Minimal/death.c **** /**
  67:App/Common/Minimal/death.c ****  * Create a single persistent task which periodically dynamically creates another
  68:App/Common/Minimal/death.c ****  * two tasks.  The original task is called the creator task, the two tasks it
  69:App/Common/Minimal/death.c ****  * creates are called suicidal tasks.
  70:App/Common/Minimal/death.c ****  *
  71:App/Common/Minimal/death.c ****  * One of the created suicidal tasks kill one other suicidal task before killing
  72:App/Common/Minimal/death.c ****  * itself - leaving just the original task remaining.
  73:App/Common/Minimal/death.c ****  *
  74:App/Common/Minimal/death.c ****  * The creator task must be spawned after all of the other demo application tasks
  75:App/Common/Minimal/death.c ****  * as it keeps a check on the number of tasks under the scheduler control.  The
  76:App/Common/Minimal/death.c ****  * number of tasks it expects to see running should never be greater than the
  77:App/Common/Minimal/death.c ****  * number of tasks that were in existence when the creator task was spawned, plus
  78:App/Common/Minimal/death.c ****  * one set of four suicidal tasks.  If this number is exceeded an error is flagged.
  79:App/Common/Minimal/death.c ****  *
  80:App/Common/Minimal/death.c ****  * \page DeathC death.c
  81:App/Common/Minimal/death.c ****  * \ingroup DemoFiles
  82:App/Common/Minimal/death.c ****  * <HR>
  83:App/Common/Minimal/death.c ****  */
  84:App/Common/Minimal/death.c **** 
  85:App/Common/Minimal/death.c **** /*
  86:App/Common/Minimal/death.c **** Changes from V3.0.0
  87:App/Common/Minimal/death.c **** 	+ CreationCount sizes changed from unsigned portBASE_TYPE to
  88:App/Common/Minimal/death.c **** 	  unsigned short to minimize the risk of overflowing.
  89:App/Common/Minimal/death.c **** 	
  90:App/Common/Minimal/death.c **** 	+ Reset of usLastCreationCount added
  91:App/Common/Minimal/death.c **** 	
  92:App/Common/Minimal/death.c **** Changes from V3.1.0
  93:App/Common/Minimal/death.c **** 	+ Changed the dummy calculation to use variables of type long, rather than
  94:App/Common/Minimal/death.c **** 	  float.  This allows the file to be used with ports that do not support
  95:App/Common/Minimal/death.c **** 	  floating point.
  96:App/Common/Minimal/death.c **** 
  97:App/Common/Minimal/death.c **** */
  98:App/Common/Minimal/death.c **** 
  99:App/Common/Minimal/death.c **** #include <stdlib.h>
 100:App/Common/Minimal/death.c **** 
 101:App/Common/Minimal/death.c **** /* Scheduler include files. */
 102:App/Common/Minimal/death.c **** #include "FreeRTOS.h"
 103:App/Common/Minimal/death.c **** #include "task.h"
 104:App/Common/Minimal/death.c **** 
 105:App/Common/Minimal/death.c **** /* Demo program include files. */
 106:App/Common/Minimal/death.c **** #include "death.h"
 107:App/Common/Minimal/death.c **** 
 108:App/Common/Minimal/death.c **** #define deathSTACK_SIZE		( configMINIMAL_STACK_SIZE + 60 )
 109:App/Common/Minimal/death.c **** 
 110:App/Common/Minimal/death.c **** /* The task originally created which is responsible for periodically dynamically
 111:App/Common/Minimal/death.c **** creating another four tasks. */
 112:App/Common/Minimal/death.c **** static portTASK_FUNCTION_PROTO( vCreateTasks, pvParameters );
 113:App/Common/Minimal/death.c **** 
 114:App/Common/Minimal/death.c **** /* The task function of the dynamically created tasks. */
 115:App/Common/Minimal/death.c **** static portTASK_FUNCTION_PROTO( vSuicidalTask, pvParameters );
 116:App/Common/Minimal/death.c **** 
 117:App/Common/Minimal/death.c **** /* A variable which is incremented every time the dynamic tasks are created.  This
 118:App/Common/Minimal/death.c **** is used to check that the task is still running. */
 119:App/Common/Minimal/death.c **** static volatile unsigned short usCreationCount = 0;
 120:App/Common/Minimal/death.c **** 
 121:App/Common/Minimal/death.c **** /* Used to store the number of tasks that were originally running so the creator
 122:App/Common/Minimal/death.c **** task can tell if any of the suicidal tasks have failed to die.
 123:App/Common/Minimal/death.c **** */
 124:App/Common/Minimal/death.c **** static volatile unsigned portBASE_TYPE uxTasksRunningAtStart = 0;
 125:App/Common/Minimal/death.c **** 
 126:App/Common/Minimal/death.c **** /* Tasks are deleted by the idle task.  Under heavy load the idle task might
 127:App/Common/Minimal/death.c **** not get much processing time, so it would be legitimate for several tasks to
 128:App/Common/Minimal/death.c **** remain undeleted for a short period. */
 129:App/Common/Minimal/death.c **** static const unsigned portBASE_TYPE uxMaxNumberOfExtraTasksRunning = 3;
 130:App/Common/Minimal/death.c **** 
 131:App/Common/Minimal/death.c **** /* Used to store a handle to the task that should be killed by a suicidal task,
 132:App/Common/Minimal/death.c **** before it kills itself. */
 133:App/Common/Minimal/death.c **** xTaskHandle xCreatedTask;
 134:App/Common/Minimal/death.c **** 
 135:App/Common/Minimal/death.c **** /*-----------------------------------------------------------*/
 136:App/Common/Minimal/death.c **** 
 137:App/Common/Minimal/death.c **** void vCreateSuicidalTasks( unsigned portBASE_TYPE uxPriority )
 138:App/Common/Minimal/death.c **** {
  51              		.loc 1 138 0
  52              		.cfi_startproc
  53              		@ args = 0, pretend = 0, frame = 16
  54              		@ frame_needed = 1, uses_anonymous_args = 0
  55 0000 80B5     		push	{r7, lr}
  56              	.LCFI0:
  57              		.cfi_def_cfa_offset 8
  58              		.cfi_offset 7, -8
  59              		.cfi_offset 14, -4
  60 0002 88B0     		sub	sp, sp, #32
  61              	.LCFI1:
  62              		.cfi_def_cfa_offset 40
  63 0004 04AF     		add	r7, sp, #16
  64              	.LCFI2:
  65              		.cfi_def_cfa 7, 24
  66 0006 7860     		str	r0, [r7, #4]
 139:App/Common/Minimal/death.c **** unsigned portBASE_TYPE *puxPriority;
 140:App/Common/Minimal/death.c **** 
 141:App/Common/Minimal/death.c **** 	/* Create the Creator tasks - passing in as a parameter the priority at which
 142:App/Common/Minimal/death.c **** 	the suicidal tasks should be created. */
 143:App/Common/Minimal/death.c **** 	puxPriority = ( unsigned portBASE_TYPE * ) pvPortMalloc( sizeof( unsigned portBASE_TYPE ) );
  67              		.loc 1 143 0
  68 0008 0420     		movs	r0, #4
  69 000a FFF7FEFF 		bl	pvPortMalloc
  70 000e F860     		str	r0, [r7, #12]
 144:App/Common/Minimal/death.c **** 	*puxPriority = uxPriority;
  71              		.loc 1 144 0
  72 0010 FB68     		ldr	r3, [r7, #12]
  73 0012 7A68     		ldr	r2, [r7, #4]
  74 0014 1A60     		str	r2, [r3]
 145:App/Common/Minimal/death.c **** 
 146:App/Common/Minimal/death.c **** 	xTaskCreate( vCreateTasks, ( signed char * ) "CREATOR", deathSTACK_SIZE, ( void * ) puxPriority, u
  75              		.loc 1 146 0
  76 0016 7B68     		ldr	r3, [r7, #4]
  77 0018 0093     		str	r3, [sp]
  78 001a 0023     		movs	r3, #0
  79 001c 0193     		str	r3, [sp, #4]
  80 001e 0023     		movs	r3, #0
  81 0020 0293     		str	r3, [sp, #8]
  82 0022 0023     		movs	r3, #0
  83 0024 0393     		str	r3, [sp, #12]
  84 0026 0C48     		ldr	r0, .L2
  85 0028 0C49     		ldr	r1, .L2+4
  86 002a 4FF49E72 		mov	r2, #316
  87 002e FB68     		ldr	r3, [r7, #12]
  88 0030 FFF7FEFF 		bl	xTaskGenericCreate
 147:App/Common/Minimal/death.c **** 
 148:App/Common/Minimal/death.c **** 	/* Record the number of tasks that are running now so we know if any of the
 149:App/Common/Minimal/death.c **** 	suicidal tasks have failed to be killed. */
 150:App/Common/Minimal/death.c **** 	uxTasksRunningAtStart = ( unsigned portBASE_TYPE ) uxTaskGetNumberOfTasks();
  89              		.loc 1 150 0
  90 0034 FFF7FEFF 		bl	uxTaskGetNumberOfTasks
  91 0038 0246     		mov	r2, r0
  92 003a 094B     		ldr	r3, .L2+8
  93 003c 1A60     		str	r2, [r3]
 151:App/Common/Minimal/death.c **** 	
 152:App/Common/Minimal/death.c **** 	/* FreeRTOS.org versions before V3.0 started the idle-task as the very
 153:App/Common/Minimal/death.c **** 	first task. The idle task was then already included in uxTasksRunningAtStart.
 154:App/Common/Minimal/death.c **** 	From FreeRTOS V3.0 on, the idle task is started when the scheduler is
 155:App/Common/Minimal/death.c **** 	started. Therefore the idle task is not yet accounted for. We correct
 156:App/Common/Minimal/death.c **** 	this by increasing uxTasksRunningAtStart by 1. */
 157:App/Common/Minimal/death.c **** 	uxTasksRunningAtStart++;
  94              		.loc 1 157 0
  95 003e 084B     		ldr	r3, .L2+8
  96 0040 1B68     		ldr	r3, [r3]
  97 0042 5A1C     		adds	r2, r3, #1
  98 0044 064B     		ldr	r3, .L2+8
  99 0046 1A60     		str	r2, [r3]
 158:App/Common/Minimal/death.c **** 	
 159:App/Common/Minimal/death.c **** 	/* From FreeRTOS version 7.0.0 can optionally create a timer service task.  
 160:App/Common/Minimal/death.c **** 	If this is done, then uxTasksRunningAtStart needs incrementing again as that
 161:App/Common/Minimal/death.c **** 	too is created when the scheduler is started. */
 162:App/Common/Minimal/death.c **** 	#if configUSE_TIMERS == 1
 163:App/Common/Minimal/death.c **** 		uxTasksRunningAtStart++;
 100              		.loc 1 163 0
 101 0048 054B     		ldr	r3, .L2+8
 102 004a 1B68     		ldr	r3, [r3]
 103 004c 5A1C     		adds	r2, r3, #1
 104 004e 044B     		ldr	r3, .L2+8
 105 0050 1A60     		str	r2, [r3]
 164:App/Common/Minimal/death.c **** 	#endif
 165:App/Common/Minimal/death.c **** }
 106              		.loc 1 165 0
 107 0052 1037     		adds	r7, r7, #16
 108 0054 BD46     		mov	sp, r7
 109              		@ sp needed
 110 0056 80BD     		pop	{r7, pc}
 111              	.L3:
 112              		.align	2
 113              	.L2:
 114 0058 00000000 		.word	vCreateTasks
 115 005c 00000000 		.word	.LC0
 116 0060 00000000 		.word	uxTasksRunningAtStart
 117              		.cfi_endproc
 118              	.LFE110:
 120              		.section	.text.vSuicidalTask,"ax",%progbits
 121              		.align	2
 122              		.thumb
 123              		.thumb_func
 125              	vSuicidalTask:
 126              	.LFB111:
 166:App/Common/Minimal/death.c **** /*-----------------------------------------------------------*/
 167:App/Common/Minimal/death.c **** 					
 168:App/Common/Minimal/death.c **** static portTASK_FUNCTION( vSuicidalTask, pvParameters )
 169:App/Common/Minimal/death.c **** {
 127              		.loc 1 169 0
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 24
 130              		@ frame_needed = 1, uses_anonymous_args = 0
 131 0000 80B5     		push	{r7, lr}
 132              	.LCFI3:
 133              		.cfi_def_cfa_offset 8
 134              		.cfi_offset 7, -8
 135              		.cfi_offset 14, -4
 136 0002 86B0     		sub	sp, sp, #24
 137              	.LCFI4:
 138              		.cfi_def_cfa_offset 32
 139 0004 00AF     		add	r7, sp, #0
 140              	.LCFI5:
 141              		.cfi_def_cfa_register 7
 142 0006 7860     		str	r0, [r7, #4]
 170:App/Common/Minimal/death.c **** volatile long l1, l2;
 171:App/Common/Minimal/death.c **** xTaskHandle xTaskToKill;
 172:App/Common/Minimal/death.c **** const portTickType xDelay = ( portTickType ) 200 / portTICK_RATE_MS;
 143              		.loc 1 172 0
 144 0008 C823     		movs	r3, #200
 145 000a 3B61     		str	r3, [r7, #16]
 173:App/Common/Minimal/death.c **** 
 174:App/Common/Minimal/death.c **** 	if( pvParameters != NULL )
 146              		.loc 1 174 0
 147 000c 7B68     		ldr	r3, [r7, #4]
 148 000e 002B     		cmp	r3, #0
 149 0010 03D0     		beq	.L5
 175:App/Common/Minimal/death.c **** 	{
 176:App/Common/Minimal/death.c **** 		/* This task is periodically created four times.  Two created tasks are
 177:App/Common/Minimal/death.c **** 		passed a handle to the other task so it can kill it before killing itself.
 178:App/Common/Minimal/death.c **** 		The other task is passed in null. */
 179:App/Common/Minimal/death.c **** 		xTaskToKill = *( xTaskHandle* )pvParameters;
 150              		.loc 1 179 0
 151 0012 7B68     		ldr	r3, [r7, #4]
 152 0014 1B68     		ldr	r3, [r3]
 153 0016 7B61     		str	r3, [r7, #20]
 154 0018 01E0     		b	.L6
 155              	.L5:
 180:App/Common/Minimal/death.c **** 	}
 181:App/Common/Minimal/death.c **** 	else
 182:App/Common/Minimal/death.c **** 	{
 183:App/Common/Minimal/death.c **** 		xTaskToKill = NULL;
 156              		.loc 1 183 0
 157 001a 0023     		movs	r3, #0
 158 001c 7B61     		str	r3, [r7, #20]
 159              	.L6:
 184:App/Common/Minimal/death.c **** 	}
 185:App/Common/Minimal/death.c **** 
 186:App/Common/Minimal/death.c **** 	for( ;; )
 187:App/Common/Minimal/death.c **** 	{
 188:App/Common/Minimal/death.c **** 		/* Do something random just to use some stack and registers. */
 189:App/Common/Minimal/death.c **** 		l1 = 2;
 160              		.loc 1 189 0
 161 001e 0223     		movs	r3, #2
 162 0020 FB60     		str	r3, [r7, #12]
 190:App/Common/Minimal/death.c **** 		l2 = 89;
 163              		.loc 1 190 0
 164 0022 5923     		movs	r3, #89
 165 0024 BB60     		str	r3, [r7, #8]
 191:App/Common/Minimal/death.c **** 		l2 *= l1;
 166              		.loc 1 191 0
 167 0026 BB68     		ldr	r3, [r7, #8]
 168 0028 FA68     		ldr	r2, [r7, #12]
 169 002a 02FB03F3 		mul	r3, r2, r3
 170 002e BB60     		str	r3, [r7, #8]
 192:App/Common/Minimal/death.c **** 		vTaskDelay( xDelay );
 171              		.loc 1 192 0
 172 0030 3869     		ldr	r0, [r7, #16]
 173 0032 FFF7FEFF 		bl	vTaskDelay
 193:App/Common/Minimal/death.c **** 
 194:App/Common/Minimal/death.c **** 		if( xTaskToKill != NULL )
 174              		.loc 1 194 0
 175 0036 7B69     		ldr	r3, [r7, #20]
 176 0038 002B     		cmp	r3, #0
 177 003a 09D0     		beq	.L7
 195:App/Common/Minimal/death.c **** 		{
 196:App/Common/Minimal/death.c **** 			/* Make sure the other task has a go before we delete it. */
 197:App/Common/Minimal/death.c **** 			vTaskDelay( ( portTickType ) 0 );
 178              		.loc 1 197 0
 179 003c 0020     		movs	r0, #0
 180 003e FFF7FEFF 		bl	vTaskDelay
 198:App/Common/Minimal/death.c **** 
 199:App/Common/Minimal/death.c **** 			/* Kill the other task that was created by vCreateTasks(). */
 200:App/Common/Minimal/death.c **** 			vTaskDelete( xTaskToKill );
 181              		.loc 1 200 0
 182 0042 7869     		ldr	r0, [r7, #20]
 183 0044 FFF7FEFF 		bl	vTaskDelete
 201:App/Common/Minimal/death.c **** 
 202:App/Common/Minimal/death.c **** 			/* Kill ourselves. */
 203:App/Common/Minimal/death.c **** 			vTaskDelete( NULL );
 184              		.loc 1 203 0
 185 0048 0020     		movs	r0, #0
 186 004a FFF7FEFF 		bl	vTaskDelete
 204:App/Common/Minimal/death.c **** 		}
 205:App/Common/Minimal/death.c **** 	}
 187              		.loc 1 205 0
 188 004e E6E7     		b	.L6
 189              	.L7:
 190 0050 E5E7     		b	.L6
 191              		.cfi_endproc
 192              	.LFE111:
 194 0052 00BF     		.section	.rodata
 195              		.align	2
 196              	.LC1:
 197 0008 53554943 		.ascii	"SUICID1\000"
 197      49443100 
 198              		.align	2
 199              	.LC2:
 200 0010 53554943 		.ascii	"SUICID2\000"
 200      49443200 
 201              		.section	.text.vCreateTasks,"ax",%progbits
 202              		.align	2
 203              		.thumb
 204              		.thumb_func
 206              	vCreateTasks:
 207              	.LFB112:
 206:App/Common/Minimal/death.c **** }/*lint !e818 !e550 Function prototype must be as per standard for task functions. */
 207:App/Common/Minimal/death.c **** /*-----------------------------------------------------------*/
 208:App/Common/Minimal/death.c **** 
 209:App/Common/Minimal/death.c **** static portTASK_FUNCTION( vCreateTasks, pvParameters )
 210:App/Common/Minimal/death.c **** {
 208              		.loc 1 210 0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 16
 211              		@ frame_needed = 1, uses_anonymous_args = 0
 212 0000 80B5     		push	{r7, lr}
 213              	.LCFI6:
 214              		.cfi_def_cfa_offset 8
 215              		.cfi_offset 7, -8
 216              		.cfi_offset 14, -4
 217 0002 88B0     		sub	sp, sp, #32
 218              	.LCFI7:
 219              		.cfi_def_cfa_offset 40
 220 0004 04AF     		add	r7, sp, #16
 221              	.LCFI8:
 222              		.cfi_def_cfa 7, 24
 223 0006 7860     		str	r0, [r7, #4]
 211:App/Common/Minimal/death.c **** const portTickType xDelay = ( portTickType ) 1000 / portTICK_RATE_MS;
 224              		.loc 1 211 0
 225 0008 4FF47A73 		mov	r3, #1000
 226 000c FB60     		str	r3, [r7, #12]
 212:App/Common/Minimal/death.c **** unsigned portBASE_TYPE uxPriority;
 213:App/Common/Minimal/death.c **** 
 214:App/Common/Minimal/death.c **** 	uxPriority = *( unsigned portBASE_TYPE * ) pvParameters;
 227              		.loc 1 214 0
 228 000e 7B68     		ldr	r3, [r7, #4]
 229 0010 1B68     		ldr	r3, [r3]
 230 0012 BB60     		str	r3, [r7, #8]
 215:App/Common/Minimal/death.c **** 	vPortFree( pvParameters );
 231              		.loc 1 215 0
 232 0014 7868     		ldr	r0, [r7, #4]
 233 0016 FFF7FEFF 		bl	vPortFree
 234              	.L9:
 216:App/Common/Minimal/death.c **** 
 217:App/Common/Minimal/death.c **** 	for( ;; )
 218:App/Common/Minimal/death.c **** 	{
 219:App/Common/Minimal/death.c **** 		/* Just loop round, delaying then creating the four suicidal tasks. */
 220:App/Common/Minimal/death.c **** 		vTaskDelay( xDelay );
 235              		.loc 1 220 0 discriminator 1
 236 001a F868     		ldr	r0, [r7, #12]
 237 001c FFF7FEFF 		bl	vTaskDelay
 221:App/Common/Minimal/death.c **** 
 222:App/Common/Minimal/death.c **** 		xCreatedTask = NULL;
 238              		.loc 1 222 0 discriminator 1
 239 0020 144B     		ldr	r3, .L10
 240 0022 0022     		movs	r2, #0
 241 0024 1A60     		str	r2, [r3]
 223:App/Common/Minimal/death.c **** 
 224:App/Common/Minimal/death.c **** 		xTaskCreate( vSuicidalTask, ( signed char * ) "SUICID1", configMINIMAL_STACK_SIZE, NULL, uxPriori
 242              		.loc 1 224 0 discriminator 1
 243 0026 BB68     		ldr	r3, [r7, #8]
 244 0028 0093     		str	r3, [sp]
 245 002a 124B     		ldr	r3, .L10
 246 002c 0193     		str	r3, [sp, #4]
 247 002e 0023     		movs	r3, #0
 248 0030 0293     		str	r3, [sp, #8]
 249 0032 0023     		movs	r3, #0
 250 0034 0393     		str	r3, [sp, #12]
 251 0036 1048     		ldr	r0, .L10+4
 252 0038 1049     		ldr	r1, .L10+8
 253 003a 4FF48072 		mov	r2, #256
 254 003e 0023     		movs	r3, #0
 255 0040 FFF7FEFF 		bl	xTaskGenericCreate
 225:App/Common/Minimal/death.c **** 		xTaskCreate( vSuicidalTask, ( signed char * ) "SUICID2", configMINIMAL_STACK_SIZE, &xCreatedTask,
 256              		.loc 1 225 0 discriminator 1
 257 0044 BB68     		ldr	r3, [r7, #8]
 258 0046 0093     		str	r3, [sp]
 259 0048 0023     		movs	r3, #0
 260 004a 0193     		str	r3, [sp, #4]
 261 004c 0023     		movs	r3, #0
 262 004e 0293     		str	r3, [sp, #8]
 263 0050 0023     		movs	r3, #0
 264 0052 0393     		str	r3, [sp, #12]
 265 0054 0848     		ldr	r0, .L10+4
 266 0056 0A49     		ldr	r1, .L10+12
 267 0058 4FF48072 		mov	r2, #256
 268 005c 054B     		ldr	r3, .L10
 269 005e FFF7FEFF 		bl	xTaskGenericCreate
 226:App/Common/Minimal/death.c **** 
 227:App/Common/Minimal/death.c **** 		++usCreationCount;
 270              		.loc 1 227 0 discriminator 1
 271 0062 084B     		ldr	r3, .L10+16
 272 0064 1B88     		ldrh	r3, [r3]	@ movhi
 273 0066 9BB2     		uxth	r3, r3
 274 0068 0133     		adds	r3, r3, #1
 275 006a 9AB2     		uxth	r2, r3
 276 006c 054B     		ldr	r3, .L10+16
 277 006e 1A80     		strh	r2, [r3]	@ movhi
 228:App/Common/Minimal/death.c **** 	}
 278              		.loc 1 228 0 discriminator 1
 279 0070 D3E7     		b	.L9
 280              	.L11:
 281 0072 00BF     		.align	2
 282              	.L10:
 283 0074 00000000 		.word	xCreatedTask
 284 0078 00000000 		.word	vSuicidalTask
 285 007c 08000000 		.word	.LC1
 286 0080 10000000 		.word	.LC2
 287 0084 00000000 		.word	usCreationCount
 288              		.cfi_endproc
 289              	.LFE112:
 291              		.section	.text.xIsCreateTaskStillRunning,"ax",%progbits
 292              		.align	2
 293              		.global	xIsCreateTaskStillRunning
 294              		.thumb
 295              		.thumb_func
 297              	xIsCreateTaskStillRunning:
 298              	.LFB113:
 229:App/Common/Minimal/death.c **** }
 230:App/Common/Minimal/death.c **** /*-----------------------------------------------------------*/
 231:App/Common/Minimal/death.c **** 
 232:App/Common/Minimal/death.c **** /* This is called to check that the creator task is still running and that there
 233:App/Common/Minimal/death.c **** are not any more than four extra tasks. */
 234:App/Common/Minimal/death.c **** portBASE_TYPE xIsCreateTaskStillRunning( void )
 235:App/Common/Minimal/death.c **** {
 299              		.loc 1 235 0
 300              		.cfi_startproc
 301              		@ args = 0, pretend = 0, frame = 8
 302              		@ frame_needed = 1, uses_anonymous_args = 0
 303 0000 80B5     		push	{r7, lr}
 304              	.LCFI9:
 305              		.cfi_def_cfa_offset 8
 306              		.cfi_offset 7, -8
 307              		.cfi_offset 14, -4
 308 0002 82B0     		sub	sp, sp, #8
 309              	.LCFI10:
 310              		.cfi_def_cfa_offset 16
 311 0004 00AF     		add	r7, sp, #0
 312              	.LCFI11:
 313              		.cfi_def_cfa_register 7
 236:App/Common/Minimal/death.c **** static unsigned short usLastCreationCount = 0xfff;
 237:App/Common/Minimal/death.c **** portBASE_TYPE xReturn = pdTRUE;
 314              		.loc 1 237 0
 315 0006 0123     		movs	r3, #1
 316 0008 7B60     		str	r3, [r7, #4]
 238:App/Common/Minimal/death.c **** static unsigned portBASE_TYPE uxTasksRunningNow;
 239:App/Common/Minimal/death.c **** 
 240:App/Common/Minimal/death.c **** 	if( usLastCreationCount == usCreationCount )
 317              		.loc 1 240 0
 318 000a 164B     		ldr	r3, .L18
 319 000c 1A88     		ldrh	r2, [r3]
 320 000e 164B     		ldr	r3, .L18+4
 321 0010 1B88     		ldrh	r3, [r3]	@ movhi
 322 0012 9BB2     		uxth	r3, r3
 323 0014 9A42     		cmp	r2, r3
 324 0016 02D1     		bne	.L13
 241:App/Common/Minimal/death.c **** 	{
 242:App/Common/Minimal/death.c **** 		xReturn = pdFALSE;
 325              		.loc 1 242 0
 326 0018 0023     		movs	r3, #0
 327 001a 7B60     		str	r3, [r7, #4]
 328 001c 04E0     		b	.L14
 329              	.L13:
 243:App/Common/Minimal/death.c **** 	}
 244:App/Common/Minimal/death.c **** 	else
 245:App/Common/Minimal/death.c **** 	{
 246:App/Common/Minimal/death.c **** 		usLastCreationCount = usCreationCount;
 330              		.loc 1 246 0
 331 001e 124B     		ldr	r3, .L18+4
 332 0020 1B88     		ldrh	r3, [r3]	@ movhi
 333 0022 9AB2     		uxth	r2, r3
 334 0024 0F4B     		ldr	r3, .L18
 335 0026 1A80     		strh	r2, [r3]	@ movhi
 336              	.L14:
 247:App/Common/Minimal/death.c **** 	}
 248:App/Common/Minimal/death.c **** 	
 249:App/Common/Minimal/death.c **** 	uxTasksRunningNow = ( unsigned portBASE_TYPE ) uxTaskGetNumberOfTasks();
 337              		.loc 1 249 0
 338 0028 FFF7FEFF 		bl	uxTaskGetNumberOfTasks
 339 002c 0246     		mov	r2, r0
 340 002e 0F4B     		ldr	r3, .L18+8
 341 0030 1A60     		str	r2, [r3]
 250:App/Common/Minimal/death.c **** 
 251:App/Common/Minimal/death.c **** 	if( uxTasksRunningNow < uxTasksRunningAtStart )
 342              		.loc 1 251 0
 343 0032 0E4B     		ldr	r3, .L18+8
 344 0034 1A68     		ldr	r2, [r3]
 345 0036 0E4B     		ldr	r3, .L18+12
 346 0038 1B68     		ldr	r3, [r3]
 347 003a 9A42     		cmp	r2, r3
 348 003c 02D2     		bcs	.L15
 252:App/Common/Minimal/death.c **** 	{
 253:App/Common/Minimal/death.c **** 		xReturn = pdFALSE;
 349              		.loc 1 253 0
 350 003e 0023     		movs	r3, #0
 351 0040 7B60     		str	r3, [r7, #4]
 352 0042 09E0     		b	.L16
 353              	.L15:
 254:App/Common/Minimal/death.c **** 	}
 255:App/Common/Minimal/death.c **** 	else if( ( uxTasksRunningNow - uxTasksRunningAtStart ) > uxMaxNumberOfExtraTasksRunning )
 354              		.loc 1 255 0
 355 0044 094B     		ldr	r3, .L18+8
 356 0046 1A68     		ldr	r2, [r3]
 357 0048 094B     		ldr	r3, .L18+12
 358 004a 1B68     		ldr	r3, [r3]
 359 004c D21A     		subs	r2, r2, r3
 360 004e 0323     		movs	r3, #3
 361 0050 9A42     		cmp	r2, r3
 362 0052 01D9     		bls	.L16
 256:App/Common/Minimal/death.c **** 	{
 257:App/Common/Minimal/death.c **** 		xReturn = pdFALSE;
 363              		.loc 1 257 0
 364 0054 0023     		movs	r3, #0
 365 0056 7B60     		str	r3, [r7, #4]
 366              	.L16:
 258:App/Common/Minimal/death.c **** 	}
 259:App/Common/Minimal/death.c **** 	else
 260:App/Common/Minimal/death.c **** 	{
 261:App/Common/Minimal/death.c **** 		/* Everything is okay. */
 262:App/Common/Minimal/death.c **** 	}
 263:App/Common/Minimal/death.c **** 
 264:App/Common/Minimal/death.c **** 	return xReturn;
 367              		.loc 1 264 0
 368 0058 7B68     		ldr	r3, [r7, #4]
 265:App/Common/Minimal/death.c **** }
 369              		.loc 1 265 0
 370 005a 1846     		mov	r0, r3
 371 005c 0837     		adds	r7, r7, #8
 372 005e BD46     		mov	sp, r7
 373              		@ sp needed
 374 0060 80BD     		pop	{r7, pc}
 375              	.L19:
 376 0062 00BF     		.align	2
 377              	.L18:
 378 0064 00000000 		.word	usLastCreationCount.8120
 379 0068 00000000 		.word	usCreationCount
 380 006c 00000000 		.word	uxTasksRunningNow.8122
 381 0070 00000000 		.word	uxTasksRunningAtStart
 382              		.cfi_endproc
 383              	.LFE113:
 385              		.section	.data.usLastCreationCount.8120,"aw",%progbits
 386              		.align	1
 389              	usLastCreationCount.8120:
 390 0000 FF0F     		.short	4095
 391              		.section	.bss.uxTasksRunningNow.8122,"aw",%nobits
 392              		.align	2
 395              	uxTasksRunningNow.8122:
 396 0000 00000000 		.space	4
 397              		.text
 398              	.Letext0:
 399              		.file 2 "/Users/maticknap/ARM/gcc-arm-none-eabi-4_8-2014q2/arm-none-eabi/include/machine/_default_
 400              		.file 3 "/Users/maticknap/ARM/gcc-arm-none-eabi-4_8-2014q2/arm-none-eabi/include/stdint.h"
 401              		.file 4 "Source/portable/GCC/ARM_CM4F/portmacro.h"
 402              		.file 5 "Source/include/task.h"
 403              		.file 6 "App/STM32F4-Discovery/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 death.c
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccH8M3fc.s:20     .bss.usCreationCount:0000000000000000 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccH8M3fc.s:23     .bss.usCreationCount:0000000000000000 usCreationCount
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccH8M3fc.s:26     .bss.uxTasksRunningAtStart:0000000000000000 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccH8M3fc.s:29     .bss.uxTasksRunningAtStart:0000000000000000 uxTasksRunningAtStart
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccH8M3fc.s:32     .rodata.uxMaxNumberOfExtraTasksRunning:0000000000000000 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccH8M3fc.s:35     .rodata.uxMaxNumberOfExtraTasksRunning:0000000000000000 uxMaxNumberOfExtraTasksRunning
                            *COM*:0000000000000004 xCreatedTask
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccH8M3fc.s:39     .rodata:0000000000000000 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccH8M3fc.s:43     .text.vCreateSuicidalTasks:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccH8M3fc.s:48     .text.vCreateSuicidalTasks:0000000000000000 vCreateSuicidalTasks
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccH8M3fc.s:114    .text.vCreateSuicidalTasks:0000000000000058 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccH8M3fc.s:206    .text.vCreateTasks:0000000000000000 vCreateTasks
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccH8M3fc.s:121    .text.vSuicidalTask:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccH8M3fc.s:125    .text.vSuicidalTask:0000000000000000 vSuicidalTask
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccH8M3fc.s:202    .text.vCreateTasks:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccH8M3fc.s:283    .text.vCreateTasks:0000000000000074 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccH8M3fc.s:292    .text.xIsCreateTaskStillRunning:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccH8M3fc.s:297    .text.xIsCreateTaskStillRunning:0000000000000000 xIsCreateTaskStillRunning
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccH8M3fc.s:378    .text.xIsCreateTaskStillRunning:0000000000000064 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccH8M3fc.s:389    .data.usLastCreationCount.8120:0000000000000000 usLastCreationCount.8120
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccH8M3fc.s:395    .bss.uxTasksRunningNow.8122:0000000000000000 uxTasksRunningNow.8122
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccH8M3fc.s:386    .data.usLastCreationCount.8120:0000000000000000 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccH8M3fc.s:392    .bss.uxTasksRunningNow.8122:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
pvPortMalloc
xTaskGenericCreate
uxTaskGetNumberOfTasks
vTaskDelay
vTaskDelete
vPortFree
