   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"port.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.data.uxCriticalNesting,"aw",%progbits
  20              		.align	2
  23              	uxCriticalNesting:
  24 0000 AAAAAAAA 		.word	-1431655766
  25              		.section	.bss.ucMaxSysCallPriority,"aw",%nobits
  28              	ucMaxSysCallPriority:
  29 0000 00       		.space	1
  30              		.section	.bss.ulMaxPRIGROUPValue,"aw",%nobits
  31              		.align	2
  34              	ulMaxPRIGROUPValue:
  35 0000 00000000 		.space	4
  36              		.section	.rodata.pcInterruptPriorityRegisters,"a",%progbits
  37              		.align	2
  40              	pcInterruptPriorityRegisters:
  41 0000 F0E300E0 		.word	-536812560
  42              		.section	.text.pxPortInitialiseStack,"ax",%progbits
  43              		.align	2
  44              		.global	pxPortInitialiseStack
  45              		.thumb
  46              		.thumb_func
  48              	pxPortInitialiseStack:
  49              	.LFB110:
  50              		.file 1 "Source/portable/GCC/ARM_CM4F/port.c"
   1:Source/portable/GCC/ARM_CM4F/port.c **** /*
   2:Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS V7.5.3 - Copyright (C) 2013 Real Time Engineers Ltd. 
   3:Source/portable/GCC/ARM_CM4F/port.c ****     All rights reserved
   4:Source/portable/GCC/ARM_CM4F/port.c **** 
   5:Source/portable/GCC/ARM_CM4F/port.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Source/portable/GCC/ARM_CM4F/port.c **** 
   7:Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
   8:Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
   9:Source/portable/GCC/ARM_CM4F/port.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  10:Source/portable/GCC/ARM_CM4F/port.c ****      *    robust, strictly quality controlled, supported, and cross          *
  11:Source/portable/GCC/ARM_CM4F/port.c ****      *    platform software that has become a de facto standard.             *
  12:Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  13:Source/portable/GCC/ARM_CM4F/port.c ****      *    Help yourself get started quickly and support the FreeRTOS         *
  14:Source/portable/GCC/ARM_CM4F/port.c ****      *    project by purchasing a FreeRTOS tutorial book, reference          *
  15:Source/portable/GCC/ARM_CM4F/port.c ****      *    manual, or both from: http://www.FreeRTOS.org/Documentation        *
  16:Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  17:Source/portable/GCC/ARM_CM4F/port.c ****      *    Thank you!                                                         *
  18:Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  19:Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
  20:Source/portable/GCC/ARM_CM4F/port.c **** 
  21:Source/portable/GCC/ARM_CM4F/port.c ****     This file is part of the FreeRTOS distribution.
  22:Source/portable/GCC/ARM_CM4F/port.c **** 
  23:Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  24:Source/portable/GCC/ARM_CM4F/port.c ****     the terms of the GNU General Public License (version 2) as published by the
  25:Source/portable/GCC/ARM_CM4F/port.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  26:Source/portable/GCC/ARM_CM4F/port.c **** 
  27:Source/portable/GCC/ARM_CM4F/port.c ****     >>! NOTE: The modification to the GPL is included to allow you to distribute
  28:Source/portable/GCC/ARM_CM4F/port.c ****     >>! a combined work that includes FreeRTOS without being obliged to provide
  29:Source/portable/GCC/ARM_CM4F/port.c ****     >>! the source code for proprietary components outside of the FreeRTOS
  30:Source/portable/GCC/ARM_CM4F/port.c ****     >>! kernel.
  31:Source/portable/GCC/ARM_CM4F/port.c **** 
  32:Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  33:Source/portable/GCC/ARM_CM4F/port.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  34:Source/portable/GCC/ARM_CM4F/port.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available from the following
  35:Source/portable/GCC/ARM_CM4F/port.c ****     link: http://www.freertos.org/a00114.html
  36:Source/portable/GCC/ARM_CM4F/port.c **** 
  37:Source/portable/GCC/ARM_CM4F/port.c ****     1 tab == 4 spaces!
  38:Source/portable/GCC/ARM_CM4F/port.c **** 
  39:Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
  40:Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  41:Source/portable/GCC/ARM_CM4F/port.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  42:Source/portable/GCC/ARM_CM4F/port.c ****      *    not run, what could be wrong?"                                     *
  43:Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  44:Source/portable/GCC/ARM_CM4F/port.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  45:Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  46:Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
  47:Source/portable/GCC/ARM_CM4F/port.c **** 
  48:Source/portable/GCC/ARM_CM4F/port.c ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions,
  49:Source/portable/GCC/ARM_CM4F/port.c ****     license and Real Time Engineers Ltd. contact details.
  50:Source/portable/GCC/ARM_CM4F/port.c **** 
  51:Source/portable/GCC/ARM_CM4F/port.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  52:Source/portable/GCC/ARM_CM4F/port.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  53:Source/portable/GCC/ARM_CM4F/port.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  54:Source/portable/GCC/ARM_CM4F/port.c **** 
  55:Source/portable/GCC/ARM_CM4F/port.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
  56:Source/portable/GCC/ARM_CM4F/port.c ****     Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS
  57:Source/portable/GCC/ARM_CM4F/port.c ****     licenses offer ticketed support, indemnification and middleware.
  58:Source/portable/GCC/ARM_CM4F/port.c **** 
  59:Source/portable/GCC/ARM_CM4F/port.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  60:Source/portable/GCC/ARM_CM4F/port.c ****     engineered and independently SIL3 certified version for use in safety and
  61:Source/portable/GCC/ARM_CM4F/port.c ****     mission critical applications that require provable dependability.
  62:Source/portable/GCC/ARM_CM4F/port.c **** 
  63:Source/portable/GCC/ARM_CM4F/port.c ****     1 tab == 4 spaces!
  64:Source/portable/GCC/ARM_CM4F/port.c **** */
  65:Source/portable/GCC/ARM_CM4F/port.c **** 
  66:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------
  67:Source/portable/GCC/ARM_CM4F/port.c ****  * Implementation of functions defined in portable.h for the ARM CM4F port.
  68:Source/portable/GCC/ARM_CM4F/port.c ****  *----------------------------------------------------------*/
  69:Source/portable/GCC/ARM_CM4F/port.c **** 
  70:Source/portable/GCC/ARM_CM4F/port.c **** /* Scheduler includes. */
  71:Source/portable/GCC/ARM_CM4F/port.c **** #include "FreeRTOS.h"
  72:Source/portable/GCC/ARM_CM4F/port.c **** #include "task.h"
  73:Source/portable/GCC/ARM_CM4F/port.c **** 
  74:Source/portable/GCC/ARM_CM4F/port.c **** #ifndef __VFP_FP__
  75:Source/portable/GCC/ARM_CM4F/port.c **** 	#error This port can only be used when the project options are configured to enable hardware float
  76:Source/portable/GCC/ARM_CM4F/port.c **** #endif
  77:Source/portable/GCC/ARM_CM4F/port.c **** 
  78:Source/portable/GCC/ARM_CM4F/port.c **** #ifndef configSYSTICK_CLOCK_HZ
  79:Source/portable/GCC/ARM_CM4F/port.c **** 	#define configSYSTICK_CLOCK_HZ configCPU_CLOCK_HZ
  80:Source/portable/GCC/ARM_CM4F/port.c **** #endif
  81:Source/portable/GCC/ARM_CM4F/port.c **** 
  82:Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to manipulate the core.  Registers first... */
  83:Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CTRL_REG			( * ( ( volatile unsigned long * ) 0xe000e010 ) )
  84:Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_LOAD_REG			( * ( ( volatile unsigned long * ) 0xe000e014 ) )
  85:Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG	( * ( ( volatile unsigned long * ) 0xe000e018 ) )
  86:Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSPRI2_REG				( * ( ( volatile unsigned long * ) 0xe000ed20 ) )
  87:Source/portable/GCC/ARM_CM4F/port.c **** /* ...then bits in the registers. */
  88:Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CLK_BIT			( 1UL << 2UL )
  89:Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_INT_BIT			( 1UL << 1UL )
  90:Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT			( 1UL << 0UL )
  91:Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT		( 1UL << 16UL )
  92:Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSVCLEAR_BIT 			( 1UL << 27UL )
  93:Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT		( 1UL << 25UL )
  94:Source/portable/GCC/ARM_CM4F/port.c **** 
  95:Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSV_PRI					( ( ( unsigned long ) configKERNEL_INTERRUPT_PRIORITY ) << 16UL )
  96:Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_PRI				( ( ( unsigned long ) configKERNEL_INTERRUPT_PRIORITY ) << 24UL )
  97:Source/portable/GCC/ARM_CM4F/port.c **** 
  98:Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to check the validity of an interrupt priority. */
  99:Source/portable/GCC/ARM_CM4F/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER		( 16 )
 100:Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16 	( 0xE000E3F0 )
 101:Source/portable/GCC/ARM_CM4F/port.c **** #define portAIRCR_REG						( * ( ( volatile unsigned long * ) 0xE000ED0C ) )
 102:Source/portable/GCC/ARM_CM4F/port.c **** #define portMAX_8_BIT_VALUE					( ( unsigned char ) 0xff )
 103:Source/portable/GCC/ARM_CM4F/port.c **** #define portTOP_BIT_OF_BYTE					( ( unsigned char ) 0x80 )
 104:Source/portable/GCC/ARM_CM4F/port.c **** #define portMAX_PRIGROUP_BITS				( ( unsigned char ) 7 )
 105:Source/portable/GCC/ARM_CM4F/port.c **** #define portPRIORITY_GROUP_MASK				( 0x07UL << 8UL )
 106:Source/portable/GCC/ARM_CM4F/port.c **** #define portPRIGROUP_SHIFT					( 8UL )
 107:Source/portable/GCC/ARM_CM4F/port.c **** 
 108:Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to manipulate the VFP. */
 109:Source/portable/GCC/ARM_CM4F/port.c **** #define portFPCCR					( ( volatile unsigned long * ) 0xe000ef34 ) /* Floating point context control
 110:Source/portable/GCC/ARM_CM4F/port.c **** #define portASPEN_AND_LSPEN_BITS	( 0x3UL << 30UL )
 111:Source/portable/GCC/ARM_CM4F/port.c **** 
 112:Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to set up the initial stack. */
 113:Source/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_XPSR			( 0x01000000 )
 114:Source/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_EXEC_RETURN		( 0xfffffffd )
 115:Source/portable/GCC/ARM_CM4F/port.c **** 
 116:Source/portable/GCC/ARM_CM4F/port.c **** /* The systick is a 24-bit counter. */
 117:Source/portable/GCC/ARM_CM4F/port.c **** #define portMAX_24_BIT_NUMBER				( 0xffffffUL )
 118:Source/portable/GCC/ARM_CM4F/port.c **** 
 119:Source/portable/GCC/ARM_CM4F/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
 120:Source/portable/GCC/ARM_CM4F/port.c **** occurred while the SysTick counter is stopped during tickless idle
 121:Source/portable/GCC/ARM_CM4F/port.c **** calculations. */
 122:Source/portable/GCC/ARM_CM4F/port.c **** #define portMISSED_COUNTS_FACTOR			( 45UL )
 123:Source/portable/GCC/ARM_CM4F/port.c **** 
 124:Source/portable/GCC/ARM_CM4F/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
 125:Source/portable/GCC/ARM_CM4F/port.c **** prvTaskExitError() in case is messes up unwinding of the stack in the
 126:Source/portable/GCC/ARM_CM4F/port.c **** debugger. */
 127:Source/portable/GCC/ARM_CM4F/port.c **** #ifdef configTASK_RETURN_ADDRESS
 128:Source/portable/GCC/ARM_CM4F/port.c **** 	#define portTASK_RETURN_ADDRESS	configTASK_RETURN_ADDRESS
 129:Source/portable/GCC/ARM_CM4F/port.c **** #else
 130:Source/portable/GCC/ARM_CM4F/port.c **** 	#define portTASK_RETURN_ADDRESS	prvTaskExitError
 131:Source/portable/GCC/ARM_CM4F/port.c **** #endif
 132:Source/portable/GCC/ARM_CM4F/port.c **** 
 133:Source/portable/GCC/ARM_CM4F/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 134:Source/portable/GCC/ARM_CM4F/port.c **** variable. */
 135:Source/portable/GCC/ARM_CM4F/port.c **** static unsigned portBASE_TYPE uxCriticalNesting = 0xaaaaaaaa;
 136:Source/portable/GCC/ARM_CM4F/port.c **** 
 137:Source/portable/GCC/ARM_CM4F/port.c **** /*
 138:Source/portable/GCC/ARM_CM4F/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 139:Source/portable/GCC/ARM_CM4F/port.c ****  * file is weak to allow application writers to change the timer used to
 140:Source/portable/GCC/ARM_CM4F/port.c ****  * generate the tick interrupt.
 141:Source/portable/GCC/ARM_CM4F/port.c ****  */
 142:Source/portable/GCC/ARM_CM4F/port.c **** void vPortSetupTimerInterrupt( void );
 143:Source/portable/GCC/ARM_CM4F/port.c **** 
 144:Source/portable/GCC/ARM_CM4F/port.c **** /*
 145:Source/portable/GCC/ARM_CM4F/port.c ****  * Exception handlers.
 146:Source/portable/GCC/ARM_CM4F/port.c ****  */
 147:Source/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 148:Source/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void );
 149:Source/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 150:Source/portable/GCC/ARM_CM4F/port.c **** 
 151:Source/portable/GCC/ARM_CM4F/port.c **** /*
 152:Source/portable/GCC/ARM_CM4F/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 153:Source/portable/GCC/ARM_CM4F/port.c ****  */
 154:Source/portable/GCC/ARM_CM4F/port.c **** static void prvPortStartFirstTask( void ) __attribute__ (( naked ));
 155:Source/portable/GCC/ARM_CM4F/port.c **** 
 156:Source/portable/GCC/ARM_CM4F/port.c **** /*
 157:Source/portable/GCC/ARM_CM4F/port.c ****  * Function to enable the VFP.
 158:Source/portable/GCC/ARM_CM4F/port.c ****  */
 159:Source/portable/GCC/ARM_CM4F/port.c ****  static void vPortEnableVFP( void ) __attribute__ (( naked ));
 160:Source/portable/GCC/ARM_CM4F/port.c **** 
 161:Source/portable/GCC/ARM_CM4F/port.c **** /*
 162:Source/portable/GCC/ARM_CM4F/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 163:Source/portable/GCC/ARM_CM4F/port.c ****  */
 164:Source/portable/GCC/ARM_CM4F/port.c **** static void prvTaskExitError( void );
 165:Source/portable/GCC/ARM_CM4F/port.c **** 
 166:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 167:Source/portable/GCC/ARM_CM4F/port.c **** 
 168:Source/portable/GCC/ARM_CM4F/port.c **** /*
 169:Source/portable/GCC/ARM_CM4F/port.c ****  * The number of SysTick increments that make up one tick period.
 170:Source/portable/GCC/ARM_CM4F/port.c ****  */
 171:Source/portable/GCC/ARM_CM4F/port.c **** #if configUSE_TICKLESS_IDLE == 1
 172:Source/portable/GCC/ARM_CM4F/port.c **** 	static unsigned long ulTimerCountsForOneTick = 0;
 173:Source/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 174:Source/portable/GCC/ARM_CM4F/port.c **** 
 175:Source/portable/GCC/ARM_CM4F/port.c **** /*
 176:Source/portable/GCC/ARM_CM4F/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 177:Source/portable/GCC/ARM_CM4F/port.c ****  * 24 bit resolution of the SysTick timer.
 178:Source/portable/GCC/ARM_CM4F/port.c ****  */
 179:Source/portable/GCC/ARM_CM4F/port.c **** #if configUSE_TICKLESS_IDLE == 1
 180:Source/portable/GCC/ARM_CM4F/port.c **** 	static unsigned long xMaximumPossibleSuppressedTicks = 0;
 181:Source/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 182:Source/portable/GCC/ARM_CM4F/port.c **** 
 183:Source/portable/GCC/ARM_CM4F/port.c **** /*
 184:Source/portable/GCC/ARM_CM4F/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 185:Source/portable/GCC/ARM_CM4F/port.c ****  * power functionality only.
 186:Source/portable/GCC/ARM_CM4F/port.c ****  */
 187:Source/portable/GCC/ARM_CM4F/port.c **** #if configUSE_TICKLESS_IDLE == 1
 188:Source/portable/GCC/ARM_CM4F/port.c **** 	static unsigned long ulStoppedTimerCompensation = 0;
 189:Source/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 190:Source/portable/GCC/ARM_CM4F/port.c **** 
 191:Source/portable/GCC/ARM_CM4F/port.c **** /*
 192:Source/portable/GCC/ARM_CM4F/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 193:Source/portable/GCC/ARM_CM4F/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 194:Source/portable/GCC/ARM_CM4F/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 195:Source/portable/GCC/ARM_CM4F/port.c ****  */
 196:Source/portable/GCC/ARM_CM4F/port.c **** #if ( configASSERT_DEFINED == 1 )
 197:Source/portable/GCC/ARM_CM4F/port.c **** 	 static unsigned char ucMaxSysCallPriority = 0;
 198:Source/portable/GCC/ARM_CM4F/port.c **** 	 static unsigned long ulMaxPRIGROUPValue = 0;
 199:Source/portable/GCC/ARM_CM4F/port.c **** 	 static const volatile unsigned char * const pcInterruptPriorityRegisters = ( const volatile unsig
 200:Source/portable/GCC/ARM_CM4F/port.c **** #endif /* configASSERT_DEFINED */
 201:Source/portable/GCC/ARM_CM4F/port.c **** 
 202:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 203:Source/portable/GCC/ARM_CM4F/port.c **** 
 204:Source/portable/GCC/ARM_CM4F/port.c **** /*
 205:Source/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 206:Source/portable/GCC/ARM_CM4F/port.c ****  */
 207:Source/portable/GCC/ARM_CM4F/port.c **** portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvPa
 208:Source/portable/GCC/ARM_CM4F/port.c **** {
  51              		.loc 1 208 0
  52              		.cfi_startproc
  53              		@ args = 0, pretend = 0, frame = 16
  54              		@ frame_needed = 1, uses_anonymous_args = 0
  55              		@ link register save eliminated.
  56 0000 80B4     		push	{r7}
  57              	.LCFI0:
  58              		.cfi_def_cfa_offset 4
  59              		.cfi_offset 7, -4
  60 0002 85B0     		sub	sp, sp, #20
  61              	.LCFI1:
  62              		.cfi_def_cfa_offset 24
  63 0004 00AF     		add	r7, sp, #0
  64              	.LCFI2:
  65              		.cfi_def_cfa_register 7
  66 0006 F860     		str	r0, [r7, #12]
  67 0008 B960     		str	r1, [r7, #8]
  68 000a 7A60     		str	r2, [r7, #4]
 209:Source/portable/GCC/ARM_CM4F/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 210:Source/portable/GCC/ARM_CM4F/port.c **** 	interrupt. */
 211:Source/portable/GCC/ARM_CM4F/port.c **** 
 212:Source/portable/GCC/ARM_CM4F/port.c **** 	/* Offset added to account for the way the MCU uses the stack on entry/exit
 213:Source/portable/GCC/ARM_CM4F/port.c **** 	of interrupts, and to ensure alignment. */
 214:Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
  69              		.loc 1 214 0
  70 000c FB68     		ldr	r3, [r7, #12]
  71 000e 043B     		subs	r3, r3, #4
  72 0010 FB60     		str	r3, [r7, #12]
 215:Source/portable/GCC/ARM_CM4F/port.c **** 
 216:Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  73              		.loc 1 216 0
  74 0012 FB68     		ldr	r3, [r7, #12]
  75 0014 4FF08072 		mov	r2, #16777216
  76 0018 1A60     		str	r2, [r3]
 217:Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
  77              		.loc 1 217 0
  78 001a FB68     		ldr	r3, [r7, #12]
  79 001c 043B     		subs	r3, r3, #4
  80 001e FB60     		str	r3, [r7, #12]
 218:Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
  81              		.loc 1 218 0
  82 0020 BA68     		ldr	r2, [r7, #8]
  83 0022 FB68     		ldr	r3, [r7, #12]
  84 0024 1A60     		str	r2, [r3]
 219:Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
  85              		.loc 1 219 0
  86 0026 FB68     		ldr	r3, [r7, #12]
  87 0028 043B     		subs	r3, r3, #4
  88 002a FB60     		str	r3, [r7, #12]
 220:Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) portTASK_RETURN_ADDRESS;	/* LR */
  89              		.loc 1 220 0
  90 002c 0C4A     		ldr	r2, .L3
  91 002e FB68     		ldr	r3, [r7, #12]
  92 0030 1A60     		str	r2, [r3]
 221:Source/portable/GCC/ARM_CM4F/port.c **** 
 222:Source/portable/GCC/ARM_CM4F/port.c **** 	/* Save code space by skipping register initialisation. */
 223:Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
  93              		.loc 1 223 0
  94 0032 FB68     		ldr	r3, [r7, #12]
  95 0034 143B     		subs	r3, r3, #20
  96 0036 FB60     		str	r3, [r7, #12]
 224:Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
  97              		.loc 1 224 0
  98 0038 7A68     		ldr	r2, [r7, #4]
  99 003a FB68     		ldr	r3, [r7, #12]
 100 003c 1A60     		str	r2, [r3]
 225:Source/portable/GCC/ARM_CM4F/port.c **** 
 226:Source/portable/GCC/ARM_CM4F/port.c **** 	/* A save method is being used that requires each task to maintain its
 227:Source/portable/GCC/ARM_CM4F/port.c **** 	own exec return value. */
 228:Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
 101              		.loc 1 228 0
 102 003e FB68     		ldr	r3, [r7, #12]
 103 0040 043B     		subs	r3, r3, #4
 104 0042 FB60     		str	r3, [r7, #12]
 229:Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 105              		.loc 1 229 0
 106 0044 FB68     		ldr	r3, [r7, #12]
 107 0046 6FF00202 		mvn	r2, #2
 108 004a 1A60     		str	r2, [r3]
 230:Source/portable/GCC/ARM_CM4F/port.c **** 
 231:Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 109              		.loc 1 231 0
 110 004c FB68     		ldr	r3, [r7, #12]
 111 004e 203B     		subs	r3, r3, #32
 112 0050 FB60     		str	r3, [r7, #12]
 232:Source/portable/GCC/ARM_CM4F/port.c **** 
 233:Source/portable/GCC/ARM_CM4F/port.c **** 	return pxTopOfStack;
 113              		.loc 1 233 0
 114 0052 FB68     		ldr	r3, [r7, #12]
 234:Source/portable/GCC/ARM_CM4F/port.c **** }
 115              		.loc 1 234 0
 116 0054 1846     		mov	r0, r3
 117 0056 1437     		adds	r7, r7, #20
 118 0058 BD46     		mov	sp, r7
 119              		@ sp needed
 120 005a 5DF8047B 		ldr	r7, [sp], #4
 121 005e 7047     		bx	lr
 122              	.L4:
 123              		.align	2
 124              	.L3:
 125 0060 00000000 		.word	prvTaskExitError
 126              		.cfi_endproc
 127              	.LFE110:
 129              		.section	.text.prvTaskExitError,"ax",%progbits
 130              		.align	2
 131              		.thumb
 132              		.thumb_func
 134              	prvTaskExitError:
 135              	.LFB111:
 235:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 236:Source/portable/GCC/ARM_CM4F/port.c **** 
 237:Source/portable/GCC/ARM_CM4F/port.c **** static void prvTaskExitError( void )
 238:Source/portable/GCC/ARM_CM4F/port.c **** {
 136              		.loc 1 238 0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 1, uses_anonymous_args = 0
 140 0000 80B5     		push	{r7, lr}
 141              	.LCFI3:
 142              		.cfi_def_cfa_offset 8
 143              		.cfi_offset 7, -8
 144              		.cfi_offset 14, -4
 145 0002 00AF     		add	r7, sp, #0
 146              	.LCFI4:
 147              		.cfi_def_cfa_register 7
 239:Source/portable/GCC/ARM_CM4F/port.c **** 	/* A function that implements a task must not exit or attempt to return to
 240:Source/portable/GCC/ARM_CM4F/port.c **** 	its caller as there is nothing to return to.  If a task wants to exit it
 241:Source/portable/GCC/ARM_CM4F/port.c **** 	should instead call vTaskDelete( NULL ).
 242:Source/portable/GCC/ARM_CM4F/port.c **** 
 243:Source/portable/GCC/ARM_CM4F/port.c **** 	Artificially force an assert() to be triggered if configASSERT() is
 244:Source/portable/GCC/ARM_CM4F/port.c **** 	defined, then stop here so application writers can catch the error. */
 245:Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( uxCriticalNesting == ~0UL );
 148              		.loc 1 245 0
 149 0004 054B     		ldr	r3, .L9
 150 0006 1B68     		ldr	r3, [r3]
 151 0008 B3F1FF3F 		cmp	r3, #-1
 152 000c 02D0     		beq	.L6
 153              		.loc 1 245 0 is_stmt 0 discriminator 1
 154 000e FFF7FEFF 		bl	ulPortSetInterruptMask
 155              	.L7:
 156 0012 FEE7     		b	.L7
 157              	.L6:
 246:Source/portable/GCC/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 158              		.loc 1 246 0 is_stmt 1
 159 0014 FFF7FEFF 		bl	ulPortSetInterruptMask
 160              	.L8:
 247:Source/portable/GCC/ARM_CM4F/port.c **** 	for( ;; );
 161              		.loc 1 247 0 discriminator 1
 162 0018 FEE7     		b	.L8
 163              	.L10:
 164 001a 00BF     		.align	2
 165              	.L9:
 166 001c 00000000 		.word	uxCriticalNesting
 167              		.cfi_endproc
 168              	.LFE111:
 170              		.section	.text.SVC_Handler,"ax",%progbits
 171              		.align	2
 172              		.global	SVC_Handler
 173              		.thumb
 174              		.thumb_func
 176              	SVC_Handler:
 177              	.LFB112:
 248:Source/portable/GCC/ARM_CM4F/port.c **** }
 249:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 250:Source/portable/GCC/ARM_CM4F/port.c **** 
 251:Source/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void )
 252:Source/portable/GCC/ARM_CM4F/port.c **** {
 178              		.loc 1 252 0
 179              		.cfi_startproc
 180              		@ Naked Function: prologue and epilogue provided by programmer.
 181              		@ args = 0, pretend = 0, frame = 0
 182              		@ frame_needed = 1, uses_anonymous_args = 0
 253:Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile (
 183              		.loc 1 253 0
 184              	@ 253 "Source/portable/GCC/ARM_CM4F/port.c" 1
 185 0000 054B     			ldr	r3, pxCurrentTCBConst2		
 186 0002 1968     		ldr r1, [r3]					
 187 0004 0868     		ldr r0, [r1]					
 188 0006 B0E8F04F 		ldmia r0!, {r4-r11, r14}		
 189 000a 80F30988 		msr psp, r0						
 190 000e 4FF00000 		mov r0, #0 						
 191 0012 80F31188 		msr	basepri, r0					
 192 0016 7047     		bx r14							
 193              										
 194              		.align 2						
 195 0018 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 196              	
 197              	@ 0 "" 2
 254:Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 255:Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 256:Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 257:Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldmia r0!, {r4-r11, r14}		\n" /* Pop the registers that are not automatically saved on excep
 258:Source/portable/GCC/ARM_CM4F/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 259:Source/portable/GCC/ARM_CM4F/port.c **** 					"	mov r0, #0 						\n"
 260:Source/portable/GCC/ARM_CM4F/port.c **** 					"	msr	basepri, r0					\n"
 261:Source/portable/GCC/ARM_CM4F/port.c **** 					"	bx r14							\n"
 262:Source/portable/GCC/ARM_CM4F/port.c **** 					"									\n"
 263:Source/portable/GCC/ARM_CM4F/port.c **** 					"	.align 2						\n"
 264:Source/portable/GCC/ARM_CM4F/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 265:Source/portable/GCC/ARM_CM4F/port.c **** 				);
 266:Source/portable/GCC/ARM_CM4F/port.c **** }
 198              		.loc 1 266 0
 199              		.thumb
 200              		.cfi_endproc
 201              	.LFE112:
 203              		.section	.text.prvPortStartFirstTask,"ax",%progbits
 204              		.align	2
 205              		.thumb
 206              		.thumb_func
 208              	prvPortStartFirstTask:
 209              	.LFB113:
 267:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 268:Source/portable/GCC/ARM_CM4F/port.c **** 
 269:Source/portable/GCC/ARM_CM4F/port.c **** static void prvPortStartFirstTask( void )
 270:Source/portable/GCC/ARM_CM4F/port.c **** {
 210              		.loc 1 270 0
 211              		.cfi_startproc
 212              		@ Naked Function: prologue and epilogue provided by programmer.
 213              		@ args = 0, pretend = 0, frame = 0
 214              		@ frame_needed = 1, uses_anonymous_args = 0
 271:Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile(
 215              		.loc 1 271 0
 216              	@ 271 "Source/portable/GCC/ARM_CM4F/port.c" 1
 217 0000 0348     		 ldr r0, =0xE000ED08 	
 218 0002 0068     	 ldr r0, [r0] 			
 219 0004 0068     	 ldr r0, [r0] 			
 220 0006 80F30888 	 msr msp, r0			
 221 000a 62B6     	 cpsie i				
 222 000c 00DF     	 svc 0					
 223 000e 00BF     	 nop					
 224              	
 225              	@ 0 "" 2
 272:Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 273:Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, [r0] 			\n"
 274:Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, [r0] 			\n"
 275:Source/portable/GCC/ARM_CM4F/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 276:Source/portable/GCC/ARM_CM4F/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 277:Source/portable/GCC/ARM_CM4F/port.c **** 					" svc 0					\n" /* System call to start first task. */
 278:Source/portable/GCC/ARM_CM4F/port.c **** 					" nop					\n"
 279:Source/portable/GCC/ARM_CM4F/port.c **** 				);
 280:Source/portable/GCC/ARM_CM4F/port.c **** }
 226              		.loc 1 280 0
 227              		.thumb
 228              		.cfi_endproc
 229              	.LFE113:
 231              		.section	.text.xPortStartScheduler,"ax",%progbits
 232              		.align	2
 233              		.global	xPortStartScheduler
 234              		.thumb
 235              		.thumb_func
 237              	xPortStartScheduler:
 238              	.LFB114:
 281:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 282:Source/portable/GCC/ARM_CM4F/port.c **** 
 283:Source/portable/GCC/ARM_CM4F/port.c **** /*
 284:Source/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 285:Source/portable/GCC/ARM_CM4F/port.c ****  */
 286:Source/portable/GCC/ARM_CM4F/port.c **** portBASE_TYPE xPortStartScheduler( void )
 287:Source/portable/GCC/ARM_CM4F/port.c **** {
 239              		.loc 1 287 0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 16
 242              		@ frame_needed = 1, uses_anonymous_args = 0
 243 0000 80B5     		push	{r7, lr}
 244              	.LCFI5:
 245              		.cfi_def_cfa_offset 8
 246              		.cfi_offset 7, -8
 247              		.cfi_offset 14, -4
 248 0002 84B0     		sub	sp, sp, #16
 249              	.LCFI6:
 250              		.cfi_def_cfa_offset 24
 251 0004 00AF     		add	r7, sp, #0
 252              	.LCFI7:
 253              		.cfi_def_cfa_register 7
 254              	.LBB2:
 288:Source/portable/GCC/ARM_CM4F/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 289:Source/portable/GCC/ARM_CM4F/port.c **** 	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 290:Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 291:Source/portable/GCC/ARM_CM4F/port.c **** 
 292:Source/portable/GCC/ARM_CM4F/port.c **** 	#if( configASSERT_DEFINED == 1 )
 293:Source/portable/GCC/ARM_CM4F/port.c **** 	{
 294:Source/portable/GCC/ARM_CM4F/port.c **** 		volatile unsigned long ulOriginalPriority;
 295:Source/portable/GCC/ARM_CM4F/port.c **** 		volatile char * const pcFirstUserPriorityRegister = ( volatile char * const ) ( portNVIC_IP_REGIS
 255              		.loc 1 295 0
 256 0006 2B4B     		ldr	r3, .L17
 257 0008 FB60     		str	r3, [r7, #12]
 296:Source/portable/GCC/ARM_CM4F/port.c **** 		volatile unsigned char ucMaxPriorityValue;
 297:Source/portable/GCC/ARM_CM4F/port.c **** 
 298:Source/portable/GCC/ARM_CM4F/port.c **** 		/* Determine the maximum priority from which ISR safe FreeRTOS API
 299:Source/portable/GCC/ARM_CM4F/port.c **** 		functions can be called.  ISR safe functions are those that end in
 300:Source/portable/GCC/ARM_CM4F/port.c **** 		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 301:Source/portable/GCC/ARM_CM4F/port.c **** 		ensure interrupt entry is as fast and simple as possible.
 302:Source/portable/GCC/ARM_CM4F/port.c **** 
 303:Source/portable/GCC/ARM_CM4F/port.c **** 		Save the interrupt priority value that is about to be clobbered. */
 304:Source/portable/GCC/ARM_CM4F/port.c **** 		ulOriginalPriority = *pcFirstUserPriorityRegister;
 258              		.loc 1 304 0
 259 000a FB68     		ldr	r3, [r7, #12]
 260 000c 1B78     		ldrb	r3, [r3]
 261 000e DBB2     		uxtb	r3, r3
 262 0010 BB60     		str	r3, [r7, #8]
 305:Source/portable/GCC/ARM_CM4F/port.c **** 
 306:Source/portable/GCC/ARM_CM4F/port.c **** 		/* Determine the number of priority bits available.  First write to all
 307:Source/portable/GCC/ARM_CM4F/port.c **** 		possible bits. */
 308:Source/portable/GCC/ARM_CM4F/port.c **** 		*pcFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 263              		.loc 1 308 0
 264 0012 FB68     		ldr	r3, [r7, #12]
 265 0014 FF22     		movs	r2, #255
 266 0016 1A70     		strb	r2, [r3]
 309:Source/portable/GCC/ARM_CM4F/port.c **** 
 310:Source/portable/GCC/ARM_CM4F/port.c **** 		/* Read the value back to see how many bits stuck. */
 311:Source/portable/GCC/ARM_CM4F/port.c **** 		ucMaxPriorityValue = *pcFirstUserPriorityRegister;
 267              		.loc 1 311 0
 268 0018 FB68     		ldr	r3, [r7, #12]
 269 001a 1B78     		ldrb	r3, [r3]
 270 001c DBB2     		uxtb	r3, r3
 271 001e FB71     		strb	r3, [r7, #7]
 312:Source/portable/GCC/ARM_CM4F/port.c **** 
 313:Source/portable/GCC/ARM_CM4F/port.c **** 		/* Use the same mask on the maximum system call priority. */
 314:Source/portable/GCC/ARM_CM4F/port.c **** 		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 272              		.loc 1 314 0
 273 0020 FB79     		ldrb	r3, [r7, #7]
 274 0022 DBB2     		uxtb	r3, r3
 275 0024 03F05003 		and	r3, r3, #80
 276 0028 DAB2     		uxtb	r2, r3
 277 002a 234B     		ldr	r3, .L17+4
 278 002c 1A70     		strb	r2, [r3]
 315:Source/portable/GCC/ARM_CM4F/port.c **** 
 316:Source/portable/GCC/ARM_CM4F/port.c **** 		/* Calculate the maximum acceptable priority group value for the number
 317:Source/portable/GCC/ARM_CM4F/port.c **** 		of bits read back. */
 318:Source/portable/GCC/ARM_CM4F/port.c **** 		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 279              		.loc 1 318 0
 280 002e 234B     		ldr	r3, .L17+8
 281 0030 0722     		movs	r2, #7
 282 0032 1A60     		str	r2, [r3]
 319:Source/portable/GCC/ARM_CM4F/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 283              		.loc 1 319 0
 284 0034 09E0     		b	.L14
 285              	.L15:
 320:Source/portable/GCC/ARM_CM4F/port.c **** 		{
 321:Source/portable/GCC/ARM_CM4F/port.c **** 			ulMaxPRIGROUPValue--;
 286              		.loc 1 321 0
 287 0036 214B     		ldr	r3, .L17+8
 288 0038 1B68     		ldr	r3, [r3]
 289 003a 5A1E     		subs	r2, r3, #1
 290 003c 1F4B     		ldr	r3, .L17+8
 291 003e 1A60     		str	r2, [r3]
 322:Source/portable/GCC/ARM_CM4F/port.c **** 			ucMaxPriorityValue <<= ( unsigned char ) 0x01;
 292              		.loc 1 322 0
 293 0040 FB79     		ldrb	r3, [r7, #7]
 294 0042 DBB2     		uxtb	r3, r3
 295 0044 5B00     		lsls	r3, r3, #1
 296 0046 DBB2     		uxtb	r3, r3
 297 0048 FB71     		strb	r3, [r7, #7]
 298              	.L14:
 319:Source/portable/GCC/ARM_CM4F/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 299              		.loc 1 319 0 discriminator 1
 300 004a FB79     		ldrb	r3, [r7, #7]
 301 004c DBB2     		uxtb	r3, r3
 302 004e DBB2     		uxtb	r3, r3
 303 0050 5BB2     		sxtb	r3, r3
 304 0052 002B     		cmp	r3, #0
 305 0054 EFDB     		blt	.L15
 323:Source/portable/GCC/ARM_CM4F/port.c **** 		}
 324:Source/portable/GCC/ARM_CM4F/port.c **** 
 325:Source/portable/GCC/ARM_CM4F/port.c **** 		/* Shift the priority group value back to its position within the AIRCR
 326:Source/portable/GCC/ARM_CM4F/port.c **** 		register. */
 327:Source/portable/GCC/ARM_CM4F/port.c **** 		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 306              		.loc 1 327 0
 307 0056 194B     		ldr	r3, .L17+8
 308 0058 1B68     		ldr	r3, [r3]
 309 005a 1A02     		lsls	r2, r3, #8
 310 005c 174B     		ldr	r3, .L17+8
 311 005e 1A60     		str	r2, [r3]
 328:Source/portable/GCC/ARM_CM4F/port.c **** 		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 312              		.loc 1 328 0
 313 0060 164B     		ldr	r3, .L17+8
 314 0062 1B68     		ldr	r3, [r3]
 315 0064 03F4E062 		and	r2, r3, #1792
 316 0068 144B     		ldr	r3, .L17+8
 317 006a 1A60     		str	r2, [r3]
 329:Source/portable/GCC/ARM_CM4F/port.c **** 
 330:Source/portable/GCC/ARM_CM4F/port.c **** 		/* Restore the clobbered interrupt priority register to its original
 331:Source/portable/GCC/ARM_CM4F/port.c **** 		value. */
 332:Source/portable/GCC/ARM_CM4F/port.c **** 		*pcFirstUserPriorityRegister = ulOriginalPriority;
 318              		.loc 1 332 0
 319 006c BB68     		ldr	r3, [r7, #8]
 320 006e DAB2     		uxtb	r2, r3
 321 0070 FB68     		ldr	r3, [r7, #12]
 322 0072 1A70     		strb	r2, [r3]
 323              	.LBE2:
 333:Source/portable/GCC/ARM_CM4F/port.c **** 	}
 334:Source/portable/GCC/ARM_CM4F/port.c **** 	#endif /* conifgASSERT_DEFINED */
 335:Source/portable/GCC/ARM_CM4F/port.c **** 
 336:Source/portable/GCC/ARM_CM4F/port.c **** 	/* Make PendSV and SysTick the lowest priority interrupts. */
 337:Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 324              		.loc 1 337 0
 325 0074 124B     		ldr	r3, .L17+12
 326 0076 124A     		ldr	r2, .L17+12
 327 0078 1268     		ldr	r2, [r2]
 328 007a 42F47002 		orr	r2, r2, #15728640
 329 007e 1A60     		str	r2, [r3]
 338:Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 330              		.loc 1 338 0
 331 0080 0F4B     		ldr	r3, .L17+12
 332 0082 0F4A     		ldr	r2, .L17+12
 333 0084 1268     		ldr	r2, [r2]
 334 0086 42F07042 		orr	r2, r2, #-268435456
 335 008a 1A60     		str	r2, [r3]
 339:Source/portable/GCC/ARM_CM4F/port.c **** 
 340:Source/portable/GCC/ARM_CM4F/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 341:Source/portable/GCC/ARM_CM4F/port.c **** 	here already. */
 342:Source/portable/GCC/ARM_CM4F/port.c **** 	vPortSetupTimerInterrupt();
 336              		.loc 1 342 0
 337 008c FFF7FEFF 		bl	vPortSetupTimerInterrupt
 343:Source/portable/GCC/ARM_CM4F/port.c **** 
 344:Source/portable/GCC/ARM_CM4F/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 345:Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting = 0;
 338              		.loc 1 345 0
 339 0090 0C4B     		ldr	r3, .L17+16
 340 0092 0022     		movs	r2, #0
 341 0094 1A60     		str	r2, [r3]
 346:Source/portable/GCC/ARM_CM4F/port.c **** 
 347:Source/portable/GCC/ARM_CM4F/port.c **** 	/* Ensure the VFP is enabled - it should be anyway. */
 348:Source/portable/GCC/ARM_CM4F/port.c **** 	vPortEnableVFP();
 342              		.loc 1 348 0
 343 0096 FFF7FEFF 		bl	vPortEnableVFP
 349:Source/portable/GCC/ARM_CM4F/port.c **** 
 350:Source/portable/GCC/ARM_CM4F/port.c **** 	/* Lazy save always. */
 351:Source/portable/GCC/ARM_CM4F/port.c **** 	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 344              		.loc 1 351 0
 345 009a 0B4B     		ldr	r3, .L17+20
 346 009c 0A4A     		ldr	r2, .L17+20
 347 009e 1268     		ldr	r2, [r2]
 348 00a0 42F04042 		orr	r2, r2, #-1073741824
 349 00a4 1A60     		str	r2, [r3]
 352:Source/portable/GCC/ARM_CM4F/port.c **** 
 353:Source/portable/GCC/ARM_CM4F/port.c **** 	/* Start the first task. */
 354:Source/portable/GCC/ARM_CM4F/port.c **** 	prvPortStartFirstTask();
 350              		.loc 1 354 0
 351 00a6 FFF7FEFF 		bl	prvPortStartFirstTask
 355:Source/portable/GCC/ARM_CM4F/port.c **** 
 356:Source/portable/GCC/ARM_CM4F/port.c **** 	/* Should not get here! */
 357:Source/portable/GCC/ARM_CM4F/port.c **** 	return 0;
 352              		.loc 1 357 0
 353 00aa 0023     		movs	r3, #0
 358:Source/portable/GCC/ARM_CM4F/port.c **** }
 354              		.loc 1 358 0
 355 00ac 1846     		mov	r0, r3
 356 00ae 1037     		adds	r7, r7, #16
 357 00b0 BD46     		mov	sp, r7
 358              		@ sp needed
 359 00b2 80BD     		pop	{r7, pc}
 360              	.L18:
 361              		.align	2
 362              	.L17:
 363 00b4 00E400E0 		.word	-536812544
 364 00b8 00000000 		.word	ucMaxSysCallPriority
 365 00bc 00000000 		.word	ulMaxPRIGROUPValue
 366 00c0 20ED00E0 		.word	-536810208
 367 00c4 00000000 		.word	uxCriticalNesting
 368 00c8 34EF00E0 		.word	-536809676
 369              		.cfi_endproc
 370              	.LFE114:
 372              		.section	.text.vPortEndScheduler,"ax",%progbits
 373              		.align	2
 374              		.global	vPortEndScheduler
 375              		.thumb
 376              		.thumb_func
 378              	vPortEndScheduler:
 379              	.LFB115:
 359:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 360:Source/portable/GCC/ARM_CM4F/port.c **** 
 361:Source/portable/GCC/ARM_CM4F/port.c **** void vPortEndScheduler( void )
 362:Source/portable/GCC/ARM_CM4F/port.c **** {
 380              		.loc 1 362 0
 381              		.cfi_startproc
 382              		@ args = 0, pretend = 0, frame = 0
 383              		@ frame_needed = 1, uses_anonymous_args = 0
 384              		@ link register save eliminated.
 385 0000 80B4     		push	{r7}
 386              	.LCFI8:
 387              		.cfi_def_cfa_offset 4
 388              		.cfi_offset 7, -4
 389 0002 00AF     		add	r7, sp, #0
 390              	.LCFI9:
 391              		.cfi_def_cfa_register 7
 363:Source/portable/GCC/ARM_CM4F/port.c **** 	/* It is unlikely that the CM4F port will require this function as there
 364:Source/portable/GCC/ARM_CM4F/port.c **** 	is nothing to return to.  */
 365:Source/portable/GCC/ARM_CM4F/port.c **** }
 392              		.loc 1 365 0
 393 0004 BD46     		mov	sp, r7
 394              		@ sp needed
 395 0006 5DF8047B 		ldr	r7, [sp], #4
 396 000a 7047     		bx	lr
 397              		.cfi_endproc
 398              	.LFE115:
 400              		.section	.text.vPortYield,"ax",%progbits
 401              		.align	2
 402              		.global	vPortYield
 403              		.thumb
 404              		.thumb_func
 406              	vPortYield:
 407              	.LFB116:
 366:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 367:Source/portable/GCC/ARM_CM4F/port.c **** 
 368:Source/portable/GCC/ARM_CM4F/port.c **** void vPortYield( void )
 369:Source/portable/GCC/ARM_CM4F/port.c **** {
 408              		.loc 1 369 0
 409              		.cfi_startproc
 410              		@ args = 0, pretend = 0, frame = 0
 411              		@ frame_needed = 1, uses_anonymous_args = 0
 412              		@ link register save eliminated.
 413 0000 80B4     		push	{r7}
 414              	.LCFI10:
 415              		.cfi_def_cfa_offset 4
 416              		.cfi_offset 7, -4
 417 0002 00AF     		add	r7, sp, #0
 418              	.LCFI11:
 419              		.cfi_def_cfa_register 7
 370:Source/portable/GCC/ARM_CM4F/port.c **** 	/* Set a PendSV to request a context switch. */
 371:Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 420              		.loc 1 371 0
 421 0004 054B     		ldr	r3, .L21
 422 0006 4FF08052 		mov	r2, #268435456
 423 000a 1A60     		str	r2, [r3]
 372:Source/portable/GCC/ARM_CM4F/port.c **** 
 373:Source/portable/GCC/ARM_CM4F/port.c **** 	/* Barriers are normally not required but do ensure the code is completely
 374:Source/portable/GCC/ARM_CM4F/port.c **** 	within the specified behaviour for the architecture. */
 375:Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile( "dsb" );
 424              		.loc 1 375 0
 425              	@ 375 "Source/portable/GCC/ARM_CM4F/port.c" 1
 426 000c BFF34F8F 		dsb
 427              	@ 0 "" 2
 376:Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile( "isb" );
 428              		.loc 1 376 0
 429              	@ 376 "Source/portable/GCC/ARM_CM4F/port.c" 1
 430 0010 BFF36F8F 		isb
 431              	@ 0 "" 2
 377:Source/portable/GCC/ARM_CM4F/port.c **** }
 432              		.loc 1 377 0
 433              		.thumb
 434 0014 BD46     		mov	sp, r7
 435              		@ sp needed
 436 0016 5DF8047B 		ldr	r7, [sp], #4
 437 001a 7047     		bx	lr
 438              	.L22:
 439              		.align	2
 440              	.L21:
 441 001c 04ED00E0 		.word	-536810236
 442              		.cfi_endproc
 443              	.LFE116:
 445              		.section	.text.vPortEnterCritical,"ax",%progbits
 446              		.align	2
 447              		.global	vPortEnterCritical
 448              		.thumb
 449              		.thumb_func
 451              	vPortEnterCritical:
 452              	.LFB117:
 378:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 379:Source/portable/GCC/ARM_CM4F/port.c **** 
 380:Source/portable/GCC/ARM_CM4F/port.c **** void vPortEnterCritical( void )
 381:Source/portable/GCC/ARM_CM4F/port.c **** {
 453              		.loc 1 381 0
 454              		.cfi_startproc
 455              		@ args = 0, pretend = 0, frame = 0
 456              		@ frame_needed = 1, uses_anonymous_args = 0
 457 0000 80B5     		push	{r7, lr}
 458              	.LCFI12:
 459              		.cfi_def_cfa_offset 8
 460              		.cfi_offset 7, -8
 461              		.cfi_offset 14, -4
 462 0002 00AF     		add	r7, sp, #0
 463              	.LCFI13:
 464              		.cfi_def_cfa_register 7
 382:Source/portable/GCC/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 465              		.loc 1 382 0
 466 0004 FFF7FEFF 		bl	ulPortSetInterruptMask
 383:Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting++;
 467              		.loc 1 383 0
 468 0008 044B     		ldr	r3, .L24
 469 000a 1B68     		ldr	r3, [r3]
 470 000c 5A1C     		adds	r2, r3, #1
 471 000e 034B     		ldr	r3, .L24
 472 0010 1A60     		str	r2, [r3]
 384:Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile( "dsb" );
 473              		.loc 1 384 0
 474              	@ 384 "Source/portable/GCC/ARM_CM4F/port.c" 1
 475 0012 BFF34F8F 		dsb
 476              	@ 0 "" 2
 385:Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile( "isb" );
 477              		.loc 1 385 0
 478              	@ 385 "Source/portable/GCC/ARM_CM4F/port.c" 1
 479 0016 BFF36F8F 		isb
 480              	@ 0 "" 2
 386:Source/portable/GCC/ARM_CM4F/port.c **** }
 481              		.loc 1 386 0
 482              		.thumb
 483 001a 80BD     		pop	{r7, pc}
 484              	.L25:
 485              		.align	2
 486              	.L24:
 487 001c 00000000 		.word	uxCriticalNesting
 488              		.cfi_endproc
 489              	.LFE117:
 491              		.section	.text.vPortExitCritical,"ax",%progbits
 492              		.align	2
 493              		.global	vPortExitCritical
 494              		.thumb
 495              		.thumb_func
 497              	vPortExitCritical:
 498              	.LFB118:
 387:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 388:Source/portable/GCC/ARM_CM4F/port.c **** 
 389:Source/portable/GCC/ARM_CM4F/port.c **** void vPortExitCritical( void )
 390:Source/portable/GCC/ARM_CM4F/port.c **** {
 499              		.loc 1 390 0
 500              		.cfi_startproc
 501              		@ args = 0, pretend = 0, frame = 0
 502              		@ frame_needed = 1, uses_anonymous_args = 0
 503 0000 80B5     		push	{r7, lr}
 504              	.LCFI14:
 505              		.cfi_def_cfa_offset 8
 506              		.cfi_offset 7, -8
 507              		.cfi_offset 14, -4
 508 0002 00AF     		add	r7, sp, #0
 509              	.LCFI15:
 510              		.cfi_def_cfa_register 7
 391:Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting--;
 511              		.loc 1 391 0
 512 0004 064B     		ldr	r3, .L28
 513 0006 1B68     		ldr	r3, [r3]
 514 0008 5A1E     		subs	r2, r3, #1
 515 000a 054B     		ldr	r3, .L28
 516 000c 1A60     		str	r2, [r3]
 392:Source/portable/GCC/ARM_CM4F/port.c **** 	if( uxCriticalNesting == 0 )
 517              		.loc 1 392 0
 518 000e 044B     		ldr	r3, .L28
 519 0010 1B68     		ldr	r3, [r3]
 520 0012 002B     		cmp	r3, #0
 521 0014 02D1     		bne	.L26
 393:Source/portable/GCC/ARM_CM4F/port.c **** 	{
 394:Source/portable/GCC/ARM_CM4F/port.c **** 		portENABLE_INTERRUPTS();
 522              		.loc 1 394 0
 523 0016 0020     		movs	r0, #0
 524 0018 FFF7FEFF 		bl	vPortClearInterruptMask
 525              	.L26:
 395:Source/portable/GCC/ARM_CM4F/port.c **** 	}
 396:Source/portable/GCC/ARM_CM4F/port.c **** }
 526              		.loc 1 396 0
 527 001c 80BD     		pop	{r7, pc}
 528              	.L29:
 529 001e 00BF     		.align	2
 530              	.L28:
 531 0020 00000000 		.word	uxCriticalNesting
 532              		.cfi_endproc
 533              	.LFE118:
 535              		.section	.text.ulPortSetInterruptMask,"ax",%progbits
 536              		.align	2
 537              		.global	ulPortSetInterruptMask
 538              		.thumb
 539              		.thumb_func
 541              	ulPortSetInterruptMask:
 542              	.LFB119:
 397:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 398:Source/portable/GCC/ARM_CM4F/port.c **** 
 399:Source/portable/GCC/ARM_CM4F/port.c **** __attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
 400:Source/portable/GCC/ARM_CM4F/port.c **** {
 543              		.loc 1 400 0
 544              		.cfi_startproc
 545              		@ Naked Function: prologue and epilogue provided by programmer.
 546              		@ args = 0, pretend = 0, frame = 0
 547              		@ frame_needed = 1, uses_anonymous_args = 0
 401:Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile														\
 548              		.loc 1 401 0
 549              	@ 401 "Source/portable/GCC/ARM_CM4F/port.c" 1
 550 0000 EFF31180 			mrs r0, basepri											
 551 0004 4FF05001 		mov r1, #80												
 552 0008 81F31188 		msr basepri, r1											
 553 000c 7047     		bx lr													
 554              	
 555              	@ 0 "" 2
 402:Source/portable/GCC/ARM_CM4F/port.c **** 	(																	\
 403:Source/portable/GCC/ARM_CM4F/port.c **** 		"	mrs r0, basepri											\n" \
 404:Source/portable/GCC/ARM_CM4F/port.c **** 		"	mov r1, %0												\n"	\
 405:Source/portable/GCC/ARM_CM4F/port.c **** 		"	msr basepri, r1											\n" \
 406:Source/portable/GCC/ARM_CM4F/port.c **** 		"	bx lr													\n" \
 407:Source/portable/GCC/ARM_CM4F/port.c **** 		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
 408:Source/portable/GCC/ARM_CM4F/port.c **** 	);
 409:Source/portable/GCC/ARM_CM4F/port.c **** 
 410:Source/portable/GCC/ARM_CM4F/port.c **** 	/* This return will not be reached but is necessary to prevent compiler
 411:Source/portable/GCC/ARM_CM4F/port.c **** 	warnings. */
 412:Source/portable/GCC/ARM_CM4F/port.c **** 	return 0;
 556              		.loc 1 412 0
 557              		.thumb
 558 000e 0023     		movs	r3, #0
 413:Source/portable/GCC/ARM_CM4F/port.c **** }
 559              		.loc 1 413 0
 560 0010 1846     		mov	r0, r3
 561              		.cfi_endproc
 562              	.LFE119:
 564 0012 00BF     		.section	.text.vPortClearInterruptMask,"ax",%progbits
 565              		.align	2
 566              		.global	vPortClearInterruptMask
 567              		.thumb
 568              		.thumb_func
 570              	vPortClearInterruptMask:
 571              	.LFB120:
 414:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 415:Source/portable/GCC/ARM_CM4F/port.c **** 
 416:Source/portable/GCC/ARM_CM4F/port.c **** __attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
 417:Source/portable/GCC/ARM_CM4F/port.c **** {
 572              		.loc 1 417 0
 573              		.cfi_startproc
 574              		@ Naked Function: prologue and epilogue provided by programmer.
 575              		@ args = 0, pretend = 0, frame = 0
 576              		@ frame_needed = 1, uses_anonymous_args = 0
 418:Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile													\
 577              		.loc 1 418 0
 578              	@ 418 "Source/portable/GCC/ARM_CM4F/port.c" 1
 579 0000 80F31188 			msr basepri, r0										
 580 0004 7047     		bx lr												
 581              	
 582              	@ 0 "" 2
 419:Source/portable/GCC/ARM_CM4F/port.c **** 	(																\
 420:Source/portable/GCC/ARM_CM4F/port.c **** 		"	msr basepri, r0										\n"	\
 421:Source/portable/GCC/ARM_CM4F/port.c **** 		"	bx lr												\n" \
 422:Source/portable/GCC/ARM_CM4F/port.c **** 		:::"r0"														\
 423:Source/portable/GCC/ARM_CM4F/port.c **** 	);
 424:Source/portable/GCC/ARM_CM4F/port.c **** 
 425:Source/portable/GCC/ARM_CM4F/port.c **** 	/* Just to avoid compiler warnings. */
 426:Source/portable/GCC/ARM_CM4F/port.c **** 	( void ) ulNewMaskValue;
 427:Source/portable/GCC/ARM_CM4F/port.c **** }
 583              		.loc 1 427 0
 584              		.thumb
 585              		.cfi_endproc
 586              	.LFE120:
 588 0006 00BF     		.section	.text.PendSV_Handler,"ax",%progbits
 589              		.align	2
 590              		.global	PendSV_Handler
 591              		.thumb
 592              		.thumb_func
 594              	PendSV_Handler:
 595              	.LFB121:
 428:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 429:Source/portable/GCC/ARM_CM4F/port.c **** 
 430:Source/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void )
 431:Source/portable/GCC/ARM_CM4F/port.c **** {
 596              		.loc 1 431 0
 597              		.cfi_startproc
 598              		@ Naked Function: prologue and epilogue provided by programmer.
 599              		@ args = 0, pretend = 0, frame = 0
 600              		@ frame_needed = 1, uses_anonymous_args = 0
 432:Source/portable/GCC/ARM_CM4F/port.c **** 	/* This is a naked function. */
 433:Source/portable/GCC/ARM_CM4F/port.c **** 
 434:Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile
 601              		.loc 1 434 0
 602              	@ 434 "Source/portable/GCC/ARM_CM4F/port.c" 1
 603 0000 EFF30980 			mrs r0, psp							
 604              											
 605 0004 114B     		ldr	r3, pxCurrentTCBConst			
 606 0006 1A68     		ldr	r2, [r3]						
 607              											
 608 0008 1EF0100F 		tst r14, #0x10						
 609 000c 08BF     		it eq								
 610 000e 20ED108A 		vstmdbeq r0!, {s16-s31}				
 611              											
 612 0012 20E9F04F 		stmdb r0!, {r4-r11, r14}			
 613              											
 614 0016 1060     		str r0, [r2]						
 615              											
 616 0018 2DE90840 		stmdb sp!, {r3, r14}				
 617 001c 4FF05000 		mov r0, #80 							
 618 0020 80F31188 		msr basepri, r0						
 619 0024 FFF7FEFF 		bl vTaskSwitchContext				
 620 0028 4FF00000 		mov r0, #0							
 621 002c 80F31188 		msr basepri, r0						
 622 0030 BDE80840 		ldmia sp!, {r3, r14}				
 623              											
 624 0034 1968     		ldr r1, [r3]						
 625 0036 0868     		ldr r0, [r1]						
 626              											
 627 0038 B0E8F04F 		ldmia r0!, {r4-r11, r14}			
 628              											
 629 003c 1EF0100F 		tst r14, #0x10						
 630 0040 08BF     		it eq								
 631 0042 B0EC108A 		vldmiaeq r0!, {s16-s31}				
 632              											
 633 0046 80F30988 		msr psp, r0							
 634              											
 635              											
 636 004a 7047     		bx r14								
 637              											
 638              		.align 2							
 639 004c 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 640              	
 641              	@ 0 "" 2
 435:Source/portable/GCC/ARM_CM4F/port.c **** 	(
 436:Source/portable/GCC/ARM_CM4F/port.c **** 	"	mrs r0, psp							\n"
 437:Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 438:Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 439:Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr	r2, [r3]						\n"
 440:Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 441:Source/portable/GCC/ARM_CM4F/port.c **** 	"	tst r14, #0x10						\n" /* Is the task using the FPU context?  If so, push high vfp registers. *
 442:Source/portable/GCC/ARM_CM4F/port.c **** 	"	it eq								\n"
 443:Source/portable/GCC/ARM_CM4F/port.c **** 	"	vstmdbeq r0!, {s16-s31}				\n"
 444:Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 445:Source/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb r0!, {r4-r11, r14}			\n" /* Save the core registers. */
 446:Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 447:Source/portable/GCC/ARM_CM4F/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 448:Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 449:Source/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb sp!, {r3, r14}				\n"
 450:Source/portable/GCC/ARM_CM4F/port.c **** 	"	mov r0, %0 							\n"
 451:Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr basepri, r0						\n"
 452:Source/portable/GCC/ARM_CM4F/port.c **** 	"	bl vTaskSwitchContext				\n"
 453:Source/portable/GCC/ARM_CM4F/port.c **** 	"	mov r0, #0							\n"
 454:Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr basepri, r0						\n"
 455:Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia sp!, {r3, r14}				\n"
 456:Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 457:Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr r1, [r3]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 458:Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr r0, [r1]						\n"
 459:Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 460:Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia r0!, {r4-r11, r14}			\n" /* Pop the core registers. */
 461:Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 462:Source/portable/GCC/ARM_CM4F/port.c **** 	"	tst r14, #0x10						\n" /* Is the task using the FPU context?  If so, pop the high vfp registers
 463:Source/portable/GCC/ARM_CM4F/port.c **** 	"	it eq								\n"
 464:Source/portable/GCC/ARM_CM4F/port.c **** 	"	vldmiaeq r0!, {s16-s31}				\n"
 465:Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 466:Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr psp, r0							\n"
 467:Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 468:Source/portable/GCC/ARM_CM4F/port.c **** 	#ifdef WORKAROUND_PMU_CM001 /* XMC4000 specific errata workaround. */
 469:Source/portable/GCC/ARM_CM4F/port.c **** 		#if WORKAROUND_PMU_CM001 == 1
 470:Source/portable/GCC/ARM_CM4F/port.c **** 	"			push { r14 }				\n"
 471:Source/portable/GCC/ARM_CM4F/port.c **** 	"			pop { pc }					\n"
 472:Source/portable/GCC/ARM_CM4F/port.c **** 		#endif
 473:Source/portable/GCC/ARM_CM4F/port.c **** 	#endif
 474:Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 475:Source/portable/GCC/ARM_CM4F/port.c **** 	"	bx r14								\n"
 476:Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 477:Source/portable/GCC/ARM_CM4F/port.c **** 	"	.align 2							\n"
 478:Source/portable/GCC/ARM_CM4F/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 479:Source/portable/GCC/ARM_CM4F/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 480:Source/portable/GCC/ARM_CM4F/port.c **** 	);
 481:Source/portable/GCC/ARM_CM4F/port.c **** }
 642              		.loc 1 481 0
 643              		.thumb
 644              		.cfi_endproc
 645              	.LFE121:
 647              		.section	.text.SysTick_Handler,"ax",%progbits
 648              		.align	2
 649              		.global	SysTick_Handler
 650              		.thumb
 651              		.thumb_func
 653              	SysTick_Handler:
 654              	.LFB122:
 482:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 483:Source/portable/GCC/ARM_CM4F/port.c **** 
 484:Source/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void )
 485:Source/portable/GCC/ARM_CM4F/port.c **** {
 655              		.loc 1 485 0
 656              		.cfi_startproc
 657              		@ args = 0, pretend = 0, frame = 0
 658              		@ frame_needed = 1, uses_anonymous_args = 0
 659 0000 80B5     		push	{r7, lr}
 660              	.LCFI16:
 661              		.cfi_def_cfa_offset 8
 662              		.cfi_offset 7, -8
 663              		.cfi_offset 14, -4
 664 0002 00AF     		add	r7, sp, #0
 665              	.LCFI17:
 666              		.cfi_def_cfa_register 7
 486:Source/portable/GCC/ARM_CM4F/port.c **** 	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
 487:Source/portable/GCC/ARM_CM4F/port.c **** 	executes all interrupts must be unmasked.  There is therefore no need to
 488:Source/portable/GCC/ARM_CM4F/port.c **** 	save and then restore the interrupt mask value as its value is already
 489:Source/portable/GCC/ARM_CM4F/port.c **** 	known. */
 490:Source/portable/GCC/ARM_CM4F/port.c **** 	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 667              		.loc 1 490 0
 668 0004 FFF7FEFF 		bl	ulPortSetInterruptMask
 491:Source/portable/GCC/ARM_CM4F/port.c **** 	{
 492:Source/portable/GCC/ARM_CM4F/port.c **** 		/* Increment the RTOS tick. */
 493:Source/portable/GCC/ARM_CM4F/port.c **** 		if( xTaskIncrementTick() != pdFALSE )
 669              		.loc 1 493 0
 670 0008 FFF7FEFF 		bl	xTaskIncrementTick
 671 000c 0346     		mov	r3, r0
 672 000e 002B     		cmp	r3, #0
 673 0010 03D0     		beq	.L35
 494:Source/portable/GCC/ARM_CM4F/port.c **** 		{
 495:Source/portable/GCC/ARM_CM4F/port.c **** 			/* A context switch is required.  Context switching is performed in
 496:Source/portable/GCC/ARM_CM4F/port.c **** 			the PendSV interrupt.  Pend the PendSV interrupt. */
 497:Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 674              		.loc 1 497 0
 675 0012 044B     		ldr	r3, .L36
 676 0014 4FF08052 		mov	r2, #268435456
 677 0018 1A60     		str	r2, [r3]
 678              	.L35:
 498:Source/portable/GCC/ARM_CM4F/port.c **** 		}
 499:Source/portable/GCC/ARM_CM4F/port.c **** 	}
 500:Source/portable/GCC/ARM_CM4F/port.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 679              		.loc 1 500 0
 680 001a 0020     		movs	r0, #0
 681 001c FFF7FEFF 		bl	vPortClearInterruptMask
 501:Source/portable/GCC/ARM_CM4F/port.c **** }
 682              		.loc 1 501 0
 683 0020 80BD     		pop	{r7, pc}
 684              	.L37:
 685 0022 00BF     		.align	2
 686              	.L36:
 687 0024 04ED00E0 		.word	-536810236
 688              		.cfi_endproc
 689              	.LFE122:
 691              		.section	.text.vPortSetupTimerInterrupt,"ax",%progbits
 692              		.align	2
 693              		.weak	vPortSetupTimerInterrupt
 694              		.thumb
 695              		.thumb_func
 697              	vPortSetupTimerInterrupt:
 698              	.LFB123:
 502:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 503:Source/portable/GCC/ARM_CM4F/port.c **** 
 504:Source/portable/GCC/ARM_CM4F/port.c **** #if configUSE_TICKLESS_IDLE == 1
 505:Source/portable/GCC/ARM_CM4F/port.c **** 
 506:Source/portable/GCC/ARM_CM4F/port.c **** 	__attribute__((weak)) void vPortSuppressTicksAndSleep( portTickType xExpectedIdleTime )
 507:Source/portable/GCC/ARM_CM4F/port.c **** 	{
 508:Source/portable/GCC/ARM_CM4F/port.c **** 	unsigned long ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
 509:Source/portable/GCC/ARM_CM4F/port.c **** 	portTickType xModifiableIdleTime;
 510:Source/portable/GCC/ARM_CM4F/port.c **** 
 511:Source/portable/GCC/ARM_CM4F/port.c **** 		/* Make sure the SysTick reload value does not overflow the counter. */
 512:Source/portable/GCC/ARM_CM4F/port.c **** 		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 513:Source/portable/GCC/ARM_CM4F/port.c **** 		{
 514:Source/portable/GCC/ARM_CM4F/port.c **** 			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 515:Source/portable/GCC/ARM_CM4F/port.c **** 		}
 516:Source/portable/GCC/ARM_CM4F/port.c **** 
 517:Source/portable/GCC/ARM_CM4F/port.c **** 		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
 518:Source/portable/GCC/ARM_CM4F/port.c **** 		is accounted for as best it can be, but using the tickless mode will
 519:Source/portable/GCC/ARM_CM4F/port.c **** 		inevitably result in some tiny drift of the time maintained by the
 520:Source/portable/GCC/ARM_CM4F/port.c **** 		kernel with respect to calendar time. */
 521:Source/portable/GCC/ARM_CM4F/port.c **** 		portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT;
 522:Source/portable/GCC/ARM_CM4F/port.c **** 
 523:Source/portable/GCC/ARM_CM4F/port.c **** 		/* Calculate the reload value required to wait xExpectedIdleTime
 524:Source/portable/GCC/ARM_CM4F/port.c **** 		tick periods.  -1 is used because this code will execute part way
 525:Source/portable/GCC/ARM_CM4F/port.c **** 		through one of the tick periods. */
 526:Source/portable/GCC/ARM_CM4F/port.c **** 		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleT
 527:Source/portable/GCC/ARM_CM4F/port.c **** 		if( ulReloadValue > ulStoppedTimerCompensation )
 528:Source/portable/GCC/ARM_CM4F/port.c **** 		{
 529:Source/portable/GCC/ARM_CM4F/port.c **** 			ulReloadValue -= ulStoppedTimerCompensation;
 530:Source/portable/GCC/ARM_CM4F/port.c **** 		}
 531:Source/portable/GCC/ARM_CM4F/port.c **** 
 532:Source/portable/GCC/ARM_CM4F/port.c **** 		/* Enter a critical section but don't use the taskENTER_CRITICAL()
 533:Source/portable/GCC/ARM_CM4F/port.c **** 		method as that will mask interrupts that should exit sleep mode. */
 534:Source/portable/GCC/ARM_CM4F/port.c **** 		__asm volatile( "cpsid i" );
 535:Source/portable/GCC/ARM_CM4F/port.c **** 
 536:Source/portable/GCC/ARM_CM4F/port.c **** 		/* If a context switch is pending or a task is waiting for the scheduler
 537:Source/portable/GCC/ARM_CM4F/port.c **** 		to be unsuspended then abandon the low power entry. */
 538:Source/portable/GCC/ARM_CM4F/port.c **** 		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 539:Source/portable/GCC/ARM_CM4F/port.c **** 		{
 540:Source/portable/GCC/ARM_CM4F/port.c **** 			/* Restart from whatever is left in the count register to complete
 541:Source/portable/GCC/ARM_CM4F/port.c **** 			this tick period. */
 542:Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 543:Source/portable/GCC/ARM_CM4F/port.c **** 
 544:Source/portable/GCC/ARM_CM4F/port.c **** 			/* Restart SysTick. */
 545:Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 546:Source/portable/GCC/ARM_CM4F/port.c **** 
 547:Source/portable/GCC/ARM_CM4F/port.c **** 			/* Reset the reload register to the value required for normal tick
 548:Source/portable/GCC/ARM_CM4F/port.c **** 			periods. */
 549:Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 550:Source/portable/GCC/ARM_CM4F/port.c **** 
 551:Source/portable/GCC/ARM_CM4F/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 552:Source/portable/GCC/ARM_CM4F/port.c **** 			above. */
 553:Source/portable/GCC/ARM_CM4F/port.c **** 			__asm volatile( "cpsie i" );
 554:Source/portable/GCC/ARM_CM4F/port.c **** 		}
 555:Source/portable/GCC/ARM_CM4F/port.c **** 		else
 556:Source/portable/GCC/ARM_CM4F/port.c **** 		{
 557:Source/portable/GCC/ARM_CM4F/port.c **** 			/* Set the new reload value. */
 558:Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 559:Source/portable/GCC/ARM_CM4F/port.c **** 
 560:Source/portable/GCC/ARM_CM4F/port.c **** 			/* Clear the SysTick count flag and set the count value back to
 561:Source/portable/GCC/ARM_CM4F/port.c **** 			zero. */
 562:Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 563:Source/portable/GCC/ARM_CM4F/port.c **** 
 564:Source/portable/GCC/ARM_CM4F/port.c **** 			/* Restart SysTick. */
 565:Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 566:Source/portable/GCC/ARM_CM4F/port.c **** 
 567:Source/portable/GCC/ARM_CM4F/port.c **** 			/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 568:Source/portable/GCC/ARM_CM4F/port.c **** 			set its parameter to 0 to indicate that its implementation contains
 569:Source/portable/GCC/ARM_CM4F/port.c **** 			its own wait for interrupt or wait for event instruction, and so wfi
 570:Source/portable/GCC/ARM_CM4F/port.c **** 			should not be executed again.  However, the original expected idle
 571:Source/portable/GCC/ARM_CM4F/port.c **** 			time variable must remain unmodified, so a copy is taken. */
 572:Source/portable/GCC/ARM_CM4F/port.c **** 			xModifiableIdleTime = xExpectedIdleTime;
 573:Source/portable/GCC/ARM_CM4F/port.c **** 			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 574:Source/portable/GCC/ARM_CM4F/port.c **** 			if( xModifiableIdleTime > 0 )
 575:Source/portable/GCC/ARM_CM4F/port.c **** 			{
 576:Source/portable/GCC/ARM_CM4F/port.c **** 				__asm volatile( "dsb" );
 577:Source/portable/GCC/ARM_CM4F/port.c **** 				__asm volatile( "wfi" );
 578:Source/portable/GCC/ARM_CM4F/port.c **** 				__asm volatile( "isb" );
 579:Source/portable/GCC/ARM_CM4F/port.c **** 			}
 580:Source/portable/GCC/ARM_CM4F/port.c **** 			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 581:Source/portable/GCC/ARM_CM4F/port.c **** 
 582:Source/portable/GCC/ARM_CM4F/port.c **** 			/* Stop SysTick.  Again, the time the SysTick is stopped for is
 583:Source/portable/GCC/ARM_CM4F/port.c **** 			accounted for as best it can be, but using the tickless mode will
 584:Source/portable/GCC/ARM_CM4F/port.c **** 			inevitably result in some tiny drift of the time maintained by the
 585:Source/portable/GCC/ARM_CM4F/port.c **** 			kernel with respect to calendar time. */
 586:Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT;
 587:Source/portable/GCC/ARM_CM4F/port.c **** 
 588:Source/portable/GCC/ARM_CM4F/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 589:Source/portable/GCC/ARM_CM4F/port.c **** 			above. */
 590:Source/portable/GCC/ARM_CM4F/port.c **** 			__asm volatile( "cpsie i" );
 591:Source/portable/GCC/ARM_CM4F/port.c **** 
 592:Source/portable/GCC/ARM_CM4F/port.c **** 			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 593:Source/portable/GCC/ARM_CM4F/port.c **** 			{
 594:Source/portable/GCC/ARM_CM4F/port.c **** 				unsigned long ulCalculatedLoadValue;
 595:Source/portable/GCC/ARM_CM4F/port.c **** 				
 596:Source/portable/GCC/ARM_CM4F/port.c **** 				/* The tick interrupt has already executed, and the SysTick
 597:Source/portable/GCC/ARM_CM4F/port.c **** 				count reloaded with ulReloadValue.  Reset the
 598:Source/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_LOAD_REG with whatever remains of this tick
 599:Source/portable/GCC/ARM_CM4F/port.c **** 				period. */
 600:Source/portable/GCC/ARM_CM4F/port.c **** 				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_
 601:Source/portable/GCC/ARM_CM4F/port.c **** 
 602:Source/portable/GCC/ARM_CM4F/port.c **** 				/* Don't allow a tiny value, or values that have somehow 
 603:Source/portable/GCC/ARM_CM4F/port.c **** 				underflowed because the post sleep hook did something 
 604:Source/portable/GCC/ARM_CM4F/port.c **** 				that took too long. */
 605:Source/portable/GCC/ARM_CM4F/port.c **** 				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimer
 606:Source/portable/GCC/ARM_CM4F/port.c **** 				{
 607:Source/portable/GCC/ARM_CM4F/port.c **** 					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 608:Source/portable/GCC/ARM_CM4F/port.c **** 				}
 609:Source/portable/GCC/ARM_CM4F/port.c **** 				
 610:Source/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 611:Source/portable/GCC/ARM_CM4F/port.c **** 				
 612:Source/portable/GCC/ARM_CM4F/port.c **** 				/* The tick interrupt handler will already have pended the tick
 613:Source/portable/GCC/ARM_CM4F/port.c **** 				processing in the kernel.  As the pending tick will be
 614:Source/portable/GCC/ARM_CM4F/port.c **** 				processed as soon as this function exits, the tick value
 615:Source/portable/GCC/ARM_CM4F/port.c **** 				maintained by the tick is stepped forward by one less than the
 616:Source/portable/GCC/ARM_CM4F/port.c **** 				time spent waiting. */
 617:Source/portable/GCC/ARM_CM4F/port.c **** 				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 618:Source/portable/GCC/ARM_CM4F/port.c **** 			}
 619:Source/portable/GCC/ARM_CM4F/port.c **** 			else
 620:Source/portable/GCC/ARM_CM4F/port.c **** 			{
 621:Source/portable/GCC/ARM_CM4F/port.c **** 				/* Something other than the tick interrupt ended the sleep.
 622:Source/portable/GCC/ARM_CM4F/port.c **** 				Work out how long the sleep lasted rounded to complete tick
 623:Source/portable/GCC/ARM_CM4F/port.c **** 				periods (not the ulReload value which accounted for part
 624:Source/portable/GCC/ARM_CM4F/port.c **** 				ticks). */
 625:Source/portable/GCC/ARM_CM4F/port.c **** 				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTI
 626:Source/portable/GCC/ARM_CM4F/port.c **** 
 627:Source/portable/GCC/ARM_CM4F/port.c **** 				/* How many complete tick periods passed while the processor
 628:Source/portable/GCC/ARM_CM4F/port.c **** 				was waiting? */
 629:Source/portable/GCC/ARM_CM4F/port.c **** 				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 630:Source/portable/GCC/ARM_CM4F/port.c **** 
 631:Source/portable/GCC/ARM_CM4F/port.c **** 				/* The reload value is set to whatever fraction of a single tick
 632:Source/portable/GCC/ARM_CM4F/port.c **** 				period remains. */
 633:Source/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1 ) * ulTimerCountsForOneTick ) - ulCom
 634:Source/portable/GCC/ARM_CM4F/port.c **** 			}
 635:Source/portable/GCC/ARM_CM4F/port.c **** 
 636:Source/portable/GCC/ARM_CM4F/port.c **** 			/* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG
 637:Source/portable/GCC/ARM_CM4F/port.c **** 			again, then set portNVIC_SYSTICK_LOAD_REG back to its standard
 638:Source/portable/GCC/ARM_CM4F/port.c **** 			value.  The critical section is used to ensure the tick interrupt
 639:Source/portable/GCC/ARM_CM4F/port.c **** 			can only execute once in the case that the reload register is near
 640:Source/portable/GCC/ARM_CM4F/port.c **** 			zero. */
 641:Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 642:Source/portable/GCC/ARM_CM4F/port.c **** 			portENTER_CRITICAL();
 643:Source/portable/GCC/ARM_CM4F/port.c **** 			{
 644:Source/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYST
 645:Source/portable/GCC/ARM_CM4F/port.c **** 				vTaskStepTick( ulCompleteTickPeriods );
 646:Source/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 647:Source/portable/GCC/ARM_CM4F/port.c **** 			}
 648:Source/portable/GCC/ARM_CM4F/port.c **** 			portEXIT_CRITICAL();
 649:Source/portable/GCC/ARM_CM4F/port.c **** 		}
 650:Source/portable/GCC/ARM_CM4F/port.c **** 	}
 651:Source/portable/GCC/ARM_CM4F/port.c **** 
 652:Source/portable/GCC/ARM_CM4F/port.c **** #endif /* #if configUSE_TICKLESS_IDLE */
 653:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 654:Source/portable/GCC/ARM_CM4F/port.c **** 
 655:Source/portable/GCC/ARM_CM4F/port.c **** /*
 656:Source/portable/GCC/ARM_CM4F/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 657:Source/portable/GCC/ARM_CM4F/port.c ****  * frequency.
 658:Source/portable/GCC/ARM_CM4F/port.c ****  */
 659:Source/portable/GCC/ARM_CM4F/port.c **** __attribute__(( weak )) void vPortSetupTimerInterrupt( void )
 660:Source/portable/GCC/ARM_CM4F/port.c **** {
 699              		.loc 1 660 0
 700              		.cfi_startproc
 701              		@ args = 0, pretend = 0, frame = 0
 702              		@ frame_needed = 1, uses_anonymous_args = 0
 703              		@ link register save eliminated.
 704 0000 80B4     		push	{r7}
 705              	.LCFI18:
 706              		.cfi_def_cfa_offset 4
 707              		.cfi_offset 7, -4
 708 0002 00AF     		add	r7, sp, #0
 709              	.LCFI19:
 710              		.cfi_def_cfa_register 7
 661:Source/portable/GCC/ARM_CM4F/port.c **** 	/* Calculate the constants required to configure the tick interrupt. */
 662:Source/portable/GCC/ARM_CM4F/port.c **** 	#if configUSE_TICKLESS_IDLE == 1
 663:Source/portable/GCC/ARM_CM4F/port.c **** 	{
 664:Source/portable/GCC/ARM_CM4F/port.c **** 		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 665:Source/portable/GCC/ARM_CM4F/port.c **** 		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 666:Source/portable/GCC/ARM_CM4F/port.c **** 		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOC
 667:Source/portable/GCC/ARM_CM4F/port.c **** 	}
 668:Source/portable/GCC/ARM_CM4F/port.c **** 	#endif /* configUSE_TICKLESS_IDLE */
 669:Source/portable/GCC/ARM_CM4F/port.c **** 
 670:Source/portable/GCC/ARM_CM4F/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 671:Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
 711              		.loc 1 671 0
 712 0004 074B     		ldr	r3, .L39
 713 0006 084A     		ldr	r2, .L39+4
 714 0008 1168     		ldr	r1, [r2]
 715 000a 084A     		ldr	r2, .L39+8
 716 000c A2FB0102 		umull	r0, r2, r2, r1
 717 0010 9209     		lsrs	r2, r2, #6
 718 0012 013A     		subs	r2, r2, #1
 719 0014 1A60     		str	r2, [r3]
 672:Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK
 720              		.loc 1 672 0
 721 0016 064B     		ldr	r3, .L39+12
 722 0018 0722     		movs	r2, #7
 723 001a 1A60     		str	r2, [r3]
 673:Source/portable/GCC/ARM_CM4F/port.c **** }
 724              		.loc 1 673 0
 725 001c BD46     		mov	sp, r7
 726              		@ sp needed
 727 001e 5DF8047B 		ldr	r7, [sp], #4
 728 0022 7047     		bx	lr
 729              	.L40:
 730              		.align	2
 731              	.L39:
 732 0024 14E000E0 		.word	-536813548
 733 0028 00000000 		.word	SystemCoreClock
 734 002c D34D6210 		.word	274877907
 735 0030 10E000E0 		.word	-536813552
 736              		.cfi_endproc
 737              	.LFE123:
 739              		.section	.text.vPortEnableVFP,"ax",%progbits
 740              		.align	2
 741              		.thumb
 742              		.thumb_func
 744              	vPortEnableVFP:
 745              	.LFB124:
 674:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 675:Source/portable/GCC/ARM_CM4F/port.c **** 
 676:Source/portable/GCC/ARM_CM4F/port.c **** /* This is a naked function. */
 677:Source/portable/GCC/ARM_CM4F/port.c **** static void vPortEnableVFP( void )
 678:Source/portable/GCC/ARM_CM4F/port.c **** {
 746              		.loc 1 678 0
 747              		.cfi_startproc
 748              		@ Naked Function: prologue and epilogue provided by programmer.
 749              		@ args = 0, pretend = 0, frame = 0
 750              		@ frame_needed = 1, uses_anonymous_args = 0
 679:Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile
 751              		.loc 1 679 0
 752              	@ 679 "Source/portable/GCC/ARM_CM4F/port.c" 1
 753 0000 DFF80C00 			ldr.w r0, =0xE000ED88		
 754 0004 0168     		ldr r1, [r0]				
 755              									
 756 0006 41F47001 		orr r1, r1, #( 0xf << 20 )	
 757 000a 0160     		str r1, [r0]				
 758 000c 7047     		bx r14						
 759              	@ 0 "" 2
 680:Source/portable/GCC/ARM_CM4F/port.c **** 	(
 681:Source/portable/GCC/ARM_CM4F/port.c **** 		"	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
 682:Source/portable/GCC/ARM_CM4F/port.c **** 		"	ldr r1, [r0]				\n"
 683:Source/portable/GCC/ARM_CM4F/port.c **** 		"								\n"
 684:Source/portable/GCC/ARM_CM4F/port.c **** 		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
 685:Source/portable/GCC/ARM_CM4F/port.c **** 		"	str r1, [r0]				\n"
 686:Source/portable/GCC/ARM_CM4F/port.c **** 		"	bx r14						"
 687:Source/portable/GCC/ARM_CM4F/port.c **** 	);
 688:Source/portable/GCC/ARM_CM4F/port.c **** }
 760              		.loc 1 688 0
 761              		.thumb
 762              		.cfi_endproc
 763              	.LFE124:
 765 000e 0000     		.section	.text.vPortValidateInterruptPriority,"ax",%progbits
 766              		.align	2
 767              		.global	vPortValidateInterruptPriority
 768              		.thumb
 769              		.thumb_func
 771              	vPortValidateInterruptPriority:
 772              	.LFB125:
 689:Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 690:Source/portable/GCC/ARM_CM4F/port.c **** 
 691:Source/portable/GCC/ARM_CM4F/port.c **** #if( configASSERT_DEFINED == 1 )
 692:Source/portable/GCC/ARM_CM4F/port.c **** 
 693:Source/portable/GCC/ARM_CM4F/port.c **** 	void vPortValidateInterruptPriority( void )
 694:Source/portable/GCC/ARM_CM4F/port.c **** 	{
 773              		.loc 1 694 0
 774              		.cfi_startproc
 775              		@ args = 0, pretend = 0, frame = 8
 776              		@ frame_needed = 1, uses_anonymous_args = 0
 777 0000 80B5     		push	{r7, lr}
 778              	.LCFI20:
 779              		.cfi_def_cfa_offset 8
 780              		.cfi_offset 7, -8
 781              		.cfi_offset 14, -4
 782 0002 82B0     		sub	sp, sp, #8
 783              	.LCFI21:
 784              		.cfi_def_cfa_offset 16
 785 0004 00AF     		add	r7, sp, #0
 786              	.LCFI22:
 787              		.cfi_def_cfa_register 7
 695:Source/portable/GCC/ARM_CM4F/port.c **** 	unsigned long ulCurrentInterrupt;
 696:Source/portable/GCC/ARM_CM4F/port.c **** 	unsigned char ucCurrentPriority;
 697:Source/portable/GCC/ARM_CM4F/port.c **** 
 698:Source/portable/GCC/ARM_CM4F/port.c **** 		/* Obtain the number of the currently executing interrupt. */
 699:Source/portable/GCC/ARM_CM4F/port.c **** 		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 788              		.loc 1 699 0
 789              	@ 699 "Source/portable/GCC/ARM_CM4F/port.c" 1
 790 0006 EFF30583 		mrs r3, ipsr
 791              	@ 0 "" 2
 792              		.thumb
 793 000a 7B60     		str	r3, [r7, #4]
 700:Source/portable/GCC/ARM_CM4F/port.c **** 
 701:Source/portable/GCC/ARM_CM4F/port.c **** 		/* Is the interrupt number a user defined interrupt? */
 702:Source/portable/GCC/ARM_CM4F/port.c **** 		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 794              		.loc 1 702 0
 795 000c 7B68     		ldr	r3, [r7, #4]
 796 000e 0F2B     		cmp	r3, #15
 797 0010 0CD9     		bls	.L43
 703:Source/portable/GCC/ARM_CM4F/port.c **** 		{
 704:Source/portable/GCC/ARM_CM4F/port.c **** 			/* Look up the interrupt's priority. */
 705:Source/portable/GCC/ARM_CM4F/port.c **** 			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 798              		.loc 1 705 0
 799 0012 0D4A     		ldr	r2, .L47
 800 0014 7B68     		ldr	r3, [r7, #4]
 801 0016 1344     		add	r3, r3, r2
 802 0018 1B78     		ldrb	r3, [r3]
 803 001a FB70     		strb	r3, [r7, #3]
 706:Source/portable/GCC/ARM_CM4F/port.c **** 
 707:Source/portable/GCC/ARM_CM4F/port.c **** 			/* The following assertion will fail if a service routine (ISR) for
 708:Source/portable/GCC/ARM_CM4F/port.c **** 			an interrupt that has been assigned a priority above
 709:Source/portable/GCC/ARM_CM4F/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY calls an ISR safe FreeRTOS API
 710:Source/portable/GCC/ARM_CM4F/port.c **** 			function.  ISR safe FreeRTOS API functions must *only* be called
 711:Source/portable/GCC/ARM_CM4F/port.c **** 			from interrupts that have been assigned a priority at or below
 712:Source/portable/GCC/ARM_CM4F/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY.
 713:Source/portable/GCC/ARM_CM4F/port.c **** 
 714:Source/portable/GCC/ARM_CM4F/port.c **** 			Numerically low interrupt priority numbers represent logically high
 715:Source/portable/GCC/ARM_CM4F/port.c **** 			interrupt priorities, therefore the priority of the interrupt must
 716:Source/portable/GCC/ARM_CM4F/port.c **** 			be set to a value equal to or numerically *higher* than
 717:Source/portable/GCC/ARM_CM4F/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY.
 718:Source/portable/GCC/ARM_CM4F/port.c **** 
 719:Source/portable/GCC/ARM_CM4F/port.c **** 			Interrupts that	use the FreeRTOS API must not be left at their
 720:Source/portable/GCC/ARM_CM4F/port.c **** 			default priority of	zero as that is the highest possible priority,
 721:Source/portable/GCC/ARM_CM4F/port.c **** 			which is guaranteed to be above configMAX_SYSCALL_INTERRUPT_PRIORITY,
 722:Source/portable/GCC/ARM_CM4F/port.c **** 			and	therefore also guaranteed to be invalid.
 723:Source/portable/GCC/ARM_CM4F/port.c **** 
 724:Source/portable/GCC/ARM_CM4F/port.c **** 			FreeRTOS maintains separate thread and ISR API functions to ensure
 725:Source/portable/GCC/ARM_CM4F/port.c **** 			interrupt entry is as fast and simple as possible.
 726:Source/portable/GCC/ARM_CM4F/port.c **** 
 727:Source/portable/GCC/ARM_CM4F/port.c **** 			The following links provide detailed information:
 728:Source/portable/GCC/ARM_CM4F/port.c **** 			http://www.freertos.org/RTOS-Cortex-M3-M4.html
 729:Source/portable/GCC/ARM_CM4F/port.c **** 			http://www.freertos.org/FAQHelp.html */
 730:Source/portable/GCC/ARM_CM4F/port.c **** 			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 804              		.loc 1 730 0
 805 001c 0B4B     		ldr	r3, .L47+4
 806 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 807 0020 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 808 0022 9A42     		cmp	r2, r3
 809 0024 02D2     		bcs	.L43
 810              		.loc 1 730 0 is_stmt 0 discriminator 1
 811 0026 FFF7FEFF 		bl	ulPortSetInterruptMask
 812              	.L44:
 813 002a FEE7     		b	.L44
 814              	.L43:
 731:Source/portable/GCC/ARM_CM4F/port.c **** 		}
 732:Source/portable/GCC/ARM_CM4F/port.c **** 
 733:Source/portable/GCC/ARM_CM4F/port.c **** 		/* Priority grouping:  The interrupt controller (NVIC) allows the bits
 734:Source/portable/GCC/ARM_CM4F/port.c **** 		that define each interrupt's priority to be split between bits that
 735:Source/portable/GCC/ARM_CM4F/port.c **** 		define the interrupt's pre-emption priority bits and bits that define
 736:Source/portable/GCC/ARM_CM4F/port.c **** 		the interrupt's sub-priority.  For simplicity all bits must be defined
 737:Source/portable/GCC/ARM_CM4F/port.c **** 		to be pre-emption priority bits.  The following assertion will fail if
 738:Source/portable/GCC/ARM_CM4F/port.c **** 		this is not the case (if some bits represent a sub-priority).
 739:Source/portable/GCC/ARM_CM4F/port.c **** 
 740:Source/portable/GCC/ARM_CM4F/port.c **** 		If the application only uses CMSIS libraries for interrupt
 741:Source/portable/GCC/ARM_CM4F/port.c **** 		configuration then the correct setting can be achieved on all Cortex-M
 742:Source/portable/GCC/ARM_CM4F/port.c **** 		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
 743:Source/portable/GCC/ARM_CM4F/port.c **** 		scheduler.  Note however that some vendor specific peripheral libraries
 744:Source/portable/GCC/ARM_CM4F/port.c **** 		assume a non-zero priority group setting, in which cases using a value
 745:Source/portable/GCC/ARM_CM4F/port.c **** 		of zero will result in unpredicable behaviour. */
 746:Source/portable/GCC/ARM_CM4F/port.c **** 		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 815              		.loc 1 746 0 is_stmt 1
 816 002c 084B     		ldr	r3, .L47+8
 817 002e 1B68     		ldr	r3, [r3]
 818 0030 03F4E062 		and	r2, r3, #1792
 819 0034 074B     		ldr	r3, .L47+12
 820 0036 1B68     		ldr	r3, [r3]
 821 0038 9A42     		cmp	r2, r3
 822 003a 02D9     		bls	.L42
 823              		.loc 1 746 0 is_stmt 0 discriminator 1
 824 003c FFF7FEFF 		bl	ulPortSetInterruptMask
 825              	.L46:
 826 0040 FEE7     		b	.L46
 827              	.L42:
 747:Source/portable/GCC/ARM_CM4F/port.c **** 	}
 828              		.loc 1 747 0 is_stmt 1
 829 0042 0837     		adds	r7, r7, #8
 830 0044 BD46     		mov	sp, r7
 831              		@ sp needed
 832 0046 80BD     		pop	{r7, pc}
 833              	.L48:
 834              		.align	2
 835              	.L47:
 836 0048 F0E300E0 		.word	-536812560
 837 004c 00000000 		.word	ucMaxSysCallPriority
 838 0050 0CED00E0 		.word	-536810228
 839 0054 00000000 		.word	ulMaxPRIGROUPValue
 840              		.cfi_endproc
 841              	.LFE125:
 843              		.text
 844              	.Letext0:
 845              		.file 2 "Source/include/projdefs.h"
 846              		.file 3 "/Users/maticknap/ARM/gcc-arm-none-eabi-4_8-2014q2/arm-none-eabi/include/machine/_default_
 847              		.file 4 "/Users/maticknap/ARM/gcc-arm-none-eabi-4_8-2014q2/arm-none-eabi/include/stdint.h"
 848              		.file 5 "Source/portable/GCC/ARM_CM4F/portmacro.h"
 849              		.file 6 "App/STM32F4-Discovery/Libraries/CMSIS/Include/core_cm4.h"
 850              		.file 7 "App/STM32F4-Discovery/Libraries/CMSIS/ST/STM32F4xx/Include/system_stm32f4xx.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 port.c
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:20     .data.uxCriticalNesting:0000000000000000 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:23     .data.uxCriticalNesting:0000000000000000 uxCriticalNesting
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:28     .bss.ucMaxSysCallPriority:0000000000000000 ucMaxSysCallPriority
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:29     .bss.ucMaxSysCallPriority:0000000000000000 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:31     .bss.ulMaxPRIGROUPValue:0000000000000000 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:34     .bss.ulMaxPRIGROUPValue:0000000000000000 ulMaxPRIGROUPValue
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:37     .rodata.pcInterruptPriorityRegisters:0000000000000000 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:40     .rodata.pcInterruptPriorityRegisters:0000000000000000 pcInterruptPriorityRegisters
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:43     .text.pxPortInitialiseStack:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:48     .text.pxPortInitialiseStack:0000000000000000 pxPortInitialiseStack
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:125    .text.pxPortInitialiseStack:0000000000000060 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:134    .text.prvTaskExitError:0000000000000000 prvTaskExitError
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:130    .text.prvTaskExitError:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:541    .text.ulPortSetInterruptMask:0000000000000000 ulPortSetInterruptMask
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:166    .text.prvTaskExitError:000000000000001c $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:171    .text.SVC_Handler:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:176    .text.SVC_Handler:0000000000000000 SVC_Handler
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:195    .text.SVC_Handler:0000000000000018 pxCurrentTCBConst2
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:195    .text.SVC_Handler:0000000000000018 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:204    .text.prvPortStartFirstTask:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:208    .text.prvPortStartFirstTask:0000000000000000 prvPortStartFirstTask
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:232    .text.xPortStartScheduler:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:237    .text.xPortStartScheduler:0000000000000000 xPortStartScheduler
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:697    .text.vPortSetupTimerInterrupt:0000000000000000 vPortSetupTimerInterrupt
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:744    .text.vPortEnableVFP:0000000000000000 vPortEnableVFP
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:363    .text.xPortStartScheduler:00000000000000b4 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:373    .text.vPortEndScheduler:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:378    .text.vPortEndScheduler:0000000000000000 vPortEndScheduler
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:401    .text.vPortYield:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:406    .text.vPortYield:0000000000000000 vPortYield
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:441    .text.vPortYield:000000000000001c $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:446    .text.vPortEnterCritical:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:451    .text.vPortEnterCritical:0000000000000000 vPortEnterCritical
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:487    .text.vPortEnterCritical:000000000000001c $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:492    .text.vPortExitCritical:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:497    .text.vPortExitCritical:0000000000000000 vPortExitCritical
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:570    .text.vPortClearInterruptMask:0000000000000000 vPortClearInterruptMask
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:531    .text.vPortExitCritical:0000000000000020 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:536    .text.ulPortSetInterruptMask:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:565    .text.vPortClearInterruptMask:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:589    .text.PendSV_Handler:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:594    .text.PendSV_Handler:0000000000000000 PendSV_Handler
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:639    .text.PendSV_Handler:000000000000004c pxCurrentTCBConst
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:639    .text.PendSV_Handler:000000000000004c $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:648    .text.SysTick_Handler:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:653    .text.SysTick_Handler:0000000000000000 SysTick_Handler
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:687    .text.SysTick_Handler:0000000000000024 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:692    .text.vPortSetupTimerInterrupt:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:732    .text.vPortSetupTimerInterrupt:0000000000000024 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:740    .text.vPortEnableVFP:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:766    .text.vPortValidateInterruptPriority:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:771    .text.vPortValidateInterruptPriority:0000000000000000 vPortValidateInterruptPriority
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:836    .text.vPortValidateInterruptPriority:0000000000000048 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:765    .text.vPortEnableVFP:000000000000000e $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//cce99HPJ.s:231    .text.prvPortStartFirstTask:0000000000000010 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
xTaskIncrementTick
SystemCoreClock
