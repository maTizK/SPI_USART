   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"PollQ.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.bss.xPollingConsumerCount,"aw",%nobits
  20              		.align	2
  23              	xPollingConsumerCount:
  24 0000 00000000 		.space	4
  25              		.section	.bss.xPollingProducerCount,"aw",%nobits
  26              		.align	2
  29              	xPollingProducerCount:
  30 0000 00000000 		.space	4
  31              		.section	.rodata
  32              		.align	2
  33              	.LC0:
  34 0000 506F6C6C 		.ascii	"Poll_Test_Queue\000"
  34      5F546573 
  34      745F5175 
  34      65756500 
  35              		.align	2
  36              	.LC1:
  37 0010 51436F6E 		.ascii	"QConsNB\000"
  37      734E4200 
  38              		.align	2
  39              	.LC2:
  40 0018 5150726F 		.ascii	"QProdNB\000"
  40      644E4200 
  41              		.section	.text.vStartPolledQueueTasks,"ax",%progbits
  42              		.align	2
  43              		.global	vStartPolledQueueTasks
  44              		.thumb
  45              		.thumb_func
  47              	vStartPolledQueueTasks:
  48              	.LFB110:
  49              		.file 1 "App/Common/Minimal/PollQ.c"
   1:App/Common/Minimal/PollQ.c **** /*
   2:App/Common/Minimal/PollQ.c ****     FreeRTOS V7.5.3 - Copyright (C) 2013 Real Time Engineers Ltd. 
   3:App/Common/Minimal/PollQ.c ****     All rights reserved
   4:App/Common/Minimal/PollQ.c **** 
   5:App/Common/Minimal/PollQ.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:App/Common/Minimal/PollQ.c **** 
   7:App/Common/Minimal/PollQ.c ****     ***************************************************************************
   8:App/Common/Minimal/PollQ.c ****      *                                                                       *
   9:App/Common/Minimal/PollQ.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  10:App/Common/Minimal/PollQ.c ****      *    robust, strictly quality controlled, supported, and cross          *
  11:App/Common/Minimal/PollQ.c ****      *    platform software that has become a de facto standard.             *
  12:App/Common/Minimal/PollQ.c ****      *                                                                       *
  13:App/Common/Minimal/PollQ.c ****      *    Help yourself get started quickly and support the FreeRTOS         *
  14:App/Common/Minimal/PollQ.c ****      *    project by purchasing a FreeRTOS tutorial book, reference          *
  15:App/Common/Minimal/PollQ.c ****      *    manual, or both from: http://www.FreeRTOS.org/Documentation        *
  16:App/Common/Minimal/PollQ.c ****      *                                                                       *
  17:App/Common/Minimal/PollQ.c ****      *    Thank you!                                                         *
  18:App/Common/Minimal/PollQ.c ****      *                                                                       *
  19:App/Common/Minimal/PollQ.c ****     ***************************************************************************
  20:App/Common/Minimal/PollQ.c **** 
  21:App/Common/Minimal/PollQ.c ****     This file is part of the FreeRTOS distribution.
  22:App/Common/Minimal/PollQ.c **** 
  23:App/Common/Minimal/PollQ.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  24:App/Common/Minimal/PollQ.c ****     the terms of the GNU General Public License (version 2) as published by the
  25:App/Common/Minimal/PollQ.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  26:App/Common/Minimal/PollQ.c **** 
  27:App/Common/Minimal/PollQ.c ****     >>! NOTE: The modification to the GPL is included to allow you to distribute
  28:App/Common/Minimal/PollQ.c ****     >>! a combined work that includes FreeRTOS without being obliged to provide
  29:App/Common/Minimal/PollQ.c ****     >>! the source code for proprietary components outside of the FreeRTOS
  30:App/Common/Minimal/PollQ.c ****     >>! kernel.
  31:App/Common/Minimal/PollQ.c **** 
  32:App/Common/Minimal/PollQ.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  33:App/Common/Minimal/PollQ.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  34:App/Common/Minimal/PollQ.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available from the following
  35:App/Common/Minimal/PollQ.c ****     link: http://www.freertos.org/a00114.html
  36:App/Common/Minimal/PollQ.c **** 
  37:App/Common/Minimal/PollQ.c ****     1 tab == 4 spaces!
  38:App/Common/Minimal/PollQ.c **** 
  39:App/Common/Minimal/PollQ.c ****     ***************************************************************************
  40:App/Common/Minimal/PollQ.c ****      *                                                                       *
  41:App/Common/Minimal/PollQ.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  42:App/Common/Minimal/PollQ.c ****      *    not run, what could be wrong?"                                     *
  43:App/Common/Minimal/PollQ.c ****      *                                                                       *
  44:App/Common/Minimal/PollQ.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  45:App/Common/Minimal/PollQ.c ****      *                                                                       *
  46:App/Common/Minimal/PollQ.c ****     ***************************************************************************
  47:App/Common/Minimal/PollQ.c **** 
  48:App/Common/Minimal/PollQ.c ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions,
  49:App/Common/Minimal/PollQ.c ****     license and Real Time Engineers Ltd. contact details.
  50:App/Common/Minimal/PollQ.c **** 
  51:App/Common/Minimal/PollQ.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  52:App/Common/Minimal/PollQ.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  53:App/Common/Minimal/PollQ.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  54:App/Common/Minimal/PollQ.c **** 
  55:App/Common/Minimal/PollQ.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
  56:App/Common/Minimal/PollQ.c ****     Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS
  57:App/Common/Minimal/PollQ.c ****     licenses offer ticketed support, indemnification and middleware.
  58:App/Common/Minimal/PollQ.c **** 
  59:App/Common/Minimal/PollQ.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  60:App/Common/Minimal/PollQ.c ****     engineered and independently SIL3 certified version for use in safety and
  61:App/Common/Minimal/PollQ.c ****     mission critical applications that require provable dependability.
  62:App/Common/Minimal/PollQ.c **** 
  63:App/Common/Minimal/PollQ.c ****     1 tab == 4 spaces!
  64:App/Common/Minimal/PollQ.c **** */
  65:App/Common/Minimal/PollQ.c **** 
  66:App/Common/Minimal/PollQ.c **** /*
  67:App/Common/Minimal/PollQ.c ****  * This version of PollQ. c is for use on systems that have limited stack
  68:App/Common/Minimal/PollQ.c ****  * space and no display facilities.  The complete version can be found in
  69:App/Common/Minimal/PollQ.c ****  * the Demo/Common/Full directory.
  70:App/Common/Minimal/PollQ.c ****  *
  71:App/Common/Minimal/PollQ.c ****  * Creates two tasks that communicate over a single queue.  One task acts as a
  72:App/Common/Minimal/PollQ.c ****  * producer, the other a consumer.
  73:App/Common/Minimal/PollQ.c ****  *
  74:App/Common/Minimal/PollQ.c ****  * The producer loops for three iteration, posting an incrementing number onto the
  75:App/Common/Minimal/PollQ.c ****  * queue each cycle.  It then delays for a fixed period before doing exactly the
  76:App/Common/Minimal/PollQ.c ****  * same again.
  77:App/Common/Minimal/PollQ.c ****  *
  78:App/Common/Minimal/PollQ.c ****  * The consumer loops emptying the queue.  Each item removed from the queue is
  79:App/Common/Minimal/PollQ.c ****  * checked to ensure it contains the expected value.  When the queue is empty it
  80:App/Common/Minimal/PollQ.c ****  * blocks for a fixed period, then does the same again.
  81:App/Common/Minimal/PollQ.c ****  *
  82:App/Common/Minimal/PollQ.c ****  * All queue access is performed without blocking.  The consumer completely empties
  83:App/Common/Minimal/PollQ.c ****  * the queue each time it runs so the producer should never find the queue full.
  84:App/Common/Minimal/PollQ.c ****  *
  85:App/Common/Minimal/PollQ.c ****  * An error is flagged if the consumer obtains an unexpected value or the producer
  86:App/Common/Minimal/PollQ.c ****  * find the queue is full.
  87:App/Common/Minimal/PollQ.c ****  */
  88:App/Common/Minimal/PollQ.c **** 
  89:App/Common/Minimal/PollQ.c **** /*
  90:App/Common/Minimal/PollQ.c **** Changes from V2.0.0
  91:App/Common/Minimal/PollQ.c **** 
  92:App/Common/Minimal/PollQ.c **** 	+ Delay periods are now specified using variables and constants of
  93:App/Common/Minimal/PollQ.c **** 	  portTickType rather than unsigned long.
  94:App/Common/Minimal/PollQ.c **** */
  95:App/Common/Minimal/PollQ.c **** 
  96:App/Common/Minimal/PollQ.c **** #include <stdlib.h>
  97:App/Common/Minimal/PollQ.c **** 
  98:App/Common/Minimal/PollQ.c **** /* Scheduler include files. */
  99:App/Common/Minimal/PollQ.c **** #include "FreeRTOS.h"
 100:App/Common/Minimal/PollQ.c **** #include "task.h"
 101:App/Common/Minimal/PollQ.c **** #include "queue.h"
 102:App/Common/Minimal/PollQ.c **** 
 103:App/Common/Minimal/PollQ.c **** /* Demo program include files. */
 104:App/Common/Minimal/PollQ.c **** #include "PollQ.h"
 105:App/Common/Minimal/PollQ.c **** 
 106:App/Common/Minimal/PollQ.c **** #define pollqSTACK_SIZE			configMINIMAL_STACK_SIZE
 107:App/Common/Minimal/PollQ.c **** #define pollqQUEUE_SIZE			( 10 )
 108:App/Common/Minimal/PollQ.c **** #define pollqPRODUCER_DELAY		( ( portTickType ) 200 / portTICK_RATE_MS )
 109:App/Common/Minimal/PollQ.c **** #define pollqCONSUMER_DELAY		( pollqPRODUCER_DELAY - ( portTickType ) ( 20 / portTICK_RATE_MS ) )
 110:App/Common/Minimal/PollQ.c **** #define pollqNO_DELAY			( ( portTickType ) 0 )
 111:App/Common/Minimal/PollQ.c **** #define pollqVALUES_TO_PRODUCE	( ( signed portBASE_TYPE ) 3 )
 112:App/Common/Minimal/PollQ.c **** #define pollqINITIAL_VALUE		( ( signed portBASE_TYPE ) 0 )
 113:App/Common/Minimal/PollQ.c **** 
 114:App/Common/Minimal/PollQ.c **** /* The task that posts the incrementing number onto the queue. */
 115:App/Common/Minimal/PollQ.c **** static portTASK_FUNCTION_PROTO( vPolledQueueProducer, pvParameters );
 116:App/Common/Minimal/PollQ.c **** 
 117:App/Common/Minimal/PollQ.c **** /* The task that empties the queue. */
 118:App/Common/Minimal/PollQ.c **** static portTASK_FUNCTION_PROTO( vPolledQueueConsumer, pvParameters );
 119:App/Common/Minimal/PollQ.c **** 
 120:App/Common/Minimal/PollQ.c **** /* Variables that are used to check that the tasks are still running with no
 121:App/Common/Minimal/PollQ.c **** errors. */
 122:App/Common/Minimal/PollQ.c **** static volatile signed portBASE_TYPE xPollingConsumerCount = pollqINITIAL_VALUE, xPollingProducerCo
 123:App/Common/Minimal/PollQ.c **** 
 124:App/Common/Minimal/PollQ.c **** /*-----------------------------------------------------------*/
 125:App/Common/Minimal/PollQ.c **** 
 126:App/Common/Minimal/PollQ.c **** void vStartPolledQueueTasks( unsigned portBASE_TYPE uxPriority )
 127:App/Common/Minimal/PollQ.c **** {
  50              		.loc 1 127 0
  51              		.cfi_startproc
  52              		@ args = 0, pretend = 0, frame = 8
  53              		@ frame_needed = 1, uses_anonymous_args = 0
  54 0000 80B5     		push	{r7, lr}
  55              	.LCFI0:
  56              		.cfi_def_cfa_offset 8
  57              		.cfi_offset 7, -8
  58              		.cfi_offset 14, -4
  59 0002 86B0     		sub	sp, sp, #24
  60              	.LCFI1:
  61              		.cfi_def_cfa_offset 32
  62 0004 04AF     		add	r7, sp, #16
  63              	.LCFI2:
  64              		.cfi_def_cfa 7, 16
  65 0006 7860     		str	r0, [r7, #4]
 128:App/Common/Minimal/PollQ.c **** static xQueueHandle xPolledQueue;
 129:App/Common/Minimal/PollQ.c **** 
 130:App/Common/Minimal/PollQ.c **** 	/* Create the queue used by the producer and consumer. */
 131:App/Common/Minimal/PollQ.c **** 	xPolledQueue = xQueueCreate( pollqQUEUE_SIZE, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) 
  66              		.loc 1 131 0
  67 0008 0A20     		movs	r0, #10
  68 000a 0221     		movs	r1, #2
  69 000c 0022     		movs	r2, #0
  70 000e FFF7FEFF 		bl	xQueueGenericCreate
  71 0012 0246     		mov	r2, r0
  72 0014 144B     		ldr	r3, .L2
  73 0016 1A60     		str	r2, [r3]
 132:App/Common/Minimal/PollQ.c **** 
 133:App/Common/Minimal/PollQ.c **** 	/* vQueueAddToRegistry() adds the queue to the queue registry, if one is
 134:App/Common/Minimal/PollQ.c **** 	in use.  The queue registry is provided as a means for kernel aware 
 135:App/Common/Minimal/PollQ.c **** 	debuggers to locate queues and has no purpose if a kernel aware debugger
 136:App/Common/Minimal/PollQ.c **** 	is not being used.  The call to vQueueAddToRegistry() will be removed
 137:App/Common/Minimal/PollQ.c **** 	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is 
 138:App/Common/Minimal/PollQ.c **** 	defined to be less than 1. */
 139:App/Common/Minimal/PollQ.c **** 	vQueueAddToRegistry( xPolledQueue, ( signed char * ) "Poll_Test_Queue" );
  74              		.loc 1 139 0
  75 0018 134B     		ldr	r3, .L2
  76 001a 1B68     		ldr	r3, [r3]
  77 001c 1846     		mov	r0, r3
  78 001e 1349     		ldr	r1, .L2+4
  79 0020 FFF7FEFF 		bl	vQueueAddToRegistry
 140:App/Common/Minimal/PollQ.c **** 
 141:App/Common/Minimal/PollQ.c **** 	/* Spawn the producer and consumer. */
 142:App/Common/Minimal/PollQ.c **** 	xTaskCreate( vPolledQueueConsumer, ( signed char * ) "QConsNB", pollqSTACK_SIZE, ( void * ) &xPoll
  80              		.loc 1 142 0
  81 0024 7B68     		ldr	r3, [r7, #4]
  82 0026 0093     		str	r3, [sp]
  83 0028 0023     		movs	r3, #0
  84 002a 0193     		str	r3, [sp, #4]
  85 002c 0023     		movs	r3, #0
  86 002e 0293     		str	r3, [sp, #8]
  87 0030 0023     		movs	r3, #0
  88 0032 0393     		str	r3, [sp, #12]
  89 0034 0E48     		ldr	r0, .L2+8
  90 0036 0F49     		ldr	r1, .L2+12
  91 0038 4FF48072 		mov	r2, #256
  92 003c 0A4B     		ldr	r3, .L2
  93 003e FFF7FEFF 		bl	xTaskGenericCreate
 143:App/Common/Minimal/PollQ.c **** 	xTaskCreate( vPolledQueueProducer, ( signed char * ) "QProdNB", pollqSTACK_SIZE, ( void * ) &xPoll
  94              		.loc 1 143 0
  95 0042 7B68     		ldr	r3, [r7, #4]
  96 0044 0093     		str	r3, [sp]
  97 0046 0023     		movs	r3, #0
  98 0048 0193     		str	r3, [sp, #4]
  99 004a 0023     		movs	r3, #0
 100 004c 0293     		str	r3, [sp, #8]
 101 004e 0023     		movs	r3, #0
 102 0050 0393     		str	r3, [sp, #12]
 103 0052 0948     		ldr	r0, .L2+16
 104 0054 0949     		ldr	r1, .L2+20
 105 0056 4FF48072 		mov	r2, #256
 106 005a 034B     		ldr	r3, .L2
 107 005c FFF7FEFF 		bl	xTaskGenericCreate
 144:App/Common/Minimal/PollQ.c **** }
 108              		.loc 1 144 0
 109 0060 0837     		adds	r7, r7, #8
 110 0062 BD46     		mov	sp, r7
 111              		@ sp needed
 112 0064 80BD     		pop	{r7, pc}
 113              	.L3:
 114 0066 00BF     		.align	2
 115              	.L2:
 116 0068 00000000 		.word	xPolledQueue.8210
 117 006c 00000000 		.word	.LC0
 118 0070 00000000 		.word	vPolledQueueConsumer
 119 0074 10000000 		.word	.LC1
 120 0078 00000000 		.word	vPolledQueueProducer
 121 007c 18000000 		.word	.LC2
 122              		.cfi_endproc
 123              	.LFE110:
 125              		.section	.text.vPolledQueueProducer,"ax",%progbits
 126              		.align	2
 127              		.thumb
 128              		.thumb_func
 130              	vPolledQueueProducer:
 131              	.LFB111:
 145:App/Common/Minimal/PollQ.c **** /*-----------------------------------------------------------*/
 146:App/Common/Minimal/PollQ.c **** 
 147:App/Common/Minimal/PollQ.c **** static portTASK_FUNCTION( vPolledQueueProducer, pvParameters )
 148:App/Common/Minimal/PollQ.c **** {
 132              		.loc 1 148 0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 24
 135              		@ frame_needed = 1, uses_anonymous_args = 0
 136 0000 80B5     		push	{r7, lr}
 137              	.LCFI3:
 138              		.cfi_def_cfa_offset 8
 139              		.cfi_offset 7, -8
 140              		.cfi_offset 14, -4
 141 0002 86B0     		sub	sp, sp, #24
 142              	.LCFI4:
 143              		.cfi_def_cfa_offset 32
 144 0004 00AF     		add	r7, sp, #0
 145              	.LCFI5:
 146              		.cfi_def_cfa_register 7
 147 0006 7860     		str	r0, [r7, #4]
 149:App/Common/Minimal/PollQ.c **** unsigned short usValue = ( unsigned short ) 0;
 148              		.loc 1 149 0
 149 0008 0023     		movs	r3, #0
 150 000a FB81     		strh	r3, [r7, #14]	@ movhi
 150:App/Common/Minimal/PollQ.c **** signed portBASE_TYPE xError = pdFALSE, xLoop;
 151              		.loc 1 150 0
 152 000c 0023     		movs	r3, #0
 153 000e 7B61     		str	r3, [r7, #20]
 154              	.L10:
 151:App/Common/Minimal/PollQ.c **** 
 152:App/Common/Minimal/PollQ.c **** 	for( ;; )
 153:App/Common/Minimal/PollQ.c **** 	{		
 154:App/Common/Minimal/PollQ.c **** 		for( xLoop = 0; xLoop < pollqVALUES_TO_PRODUCE; xLoop++ )
 155              		.loc 1 154 0
 156 0010 0023     		movs	r3, #0
 157 0012 3B61     		str	r3, [r7, #16]
 158 0014 22E0     		b	.L5
 159              	.L9:
 155:App/Common/Minimal/PollQ.c **** 		{
 156:App/Common/Minimal/PollQ.c **** 			/* Send an incrementing number on the queue without blocking. */
 157:App/Common/Minimal/PollQ.c **** 			if( xQueueSend( *( ( xQueueHandle * ) pvParameters ), ( void * ) &usValue, pollqNO_DELAY ) != pd
 160              		.loc 1 157 0
 161 0016 7B68     		ldr	r3, [r7, #4]
 162 0018 1A68     		ldr	r2, [r3]
 163 001a 07F10E03 		add	r3, r7, #14
 164 001e 1046     		mov	r0, r2
 165 0020 1946     		mov	r1, r3
 166 0022 0022     		movs	r2, #0
 167 0024 0023     		movs	r3, #0
 168 0026 FFF7FEFF 		bl	xQueueGenericSend
 169 002a 0346     		mov	r3, r0
 170 002c 012B     		cmp	r3, #1
 171 002e 02D0     		beq	.L6
 158:App/Common/Minimal/PollQ.c **** 			{
 159:App/Common/Minimal/PollQ.c **** 				/* We should never find the queue full so if we get here there
 160:App/Common/Minimal/PollQ.c **** 				has been an error. */
 161:App/Common/Minimal/PollQ.c **** 				xError = pdTRUE;
 172              		.loc 1 161 0
 173 0030 0123     		movs	r3, #1
 174 0032 7B61     		str	r3, [r7, #20]
 175 0034 0FE0     		b	.L7
 176              	.L6:
 162:App/Common/Minimal/PollQ.c **** 			}
 163:App/Common/Minimal/PollQ.c **** 			else
 164:App/Common/Minimal/PollQ.c **** 			{
 165:App/Common/Minimal/PollQ.c **** 				if( xError == pdFALSE )
 177              		.loc 1 165 0
 178 0036 7B69     		ldr	r3, [r7, #20]
 179 0038 002B     		cmp	r3, #0
 180 003a 08D1     		bne	.L8
 166:App/Common/Minimal/PollQ.c **** 				{
 167:App/Common/Minimal/PollQ.c **** 					/* If an error has ever been recorded we stop incrementing the
 168:App/Common/Minimal/PollQ.c **** 					check variable. */
 169:App/Common/Minimal/PollQ.c **** 					portENTER_CRITICAL();
 181              		.loc 1 169 0
 182 003c FFF7FEFF 		bl	vPortEnterCritical
 170:App/Common/Minimal/PollQ.c **** 						xPollingProducerCount++;
 183              		.loc 1 170 0
 184 0040 0A4B     		ldr	r3, .L11
 185 0042 1B68     		ldr	r3, [r3]
 186 0044 5A1C     		adds	r2, r3, #1
 187 0046 094B     		ldr	r3, .L11
 188 0048 1A60     		str	r2, [r3]
 171:App/Common/Minimal/PollQ.c **** 					portEXIT_CRITICAL();
 189              		.loc 1 171 0
 190 004a FFF7FEFF 		bl	vPortExitCritical
 191              	.L8:
 172:App/Common/Minimal/PollQ.c **** 				}
 173:App/Common/Minimal/PollQ.c **** 
 174:App/Common/Minimal/PollQ.c **** 				/* Update the value we are going to post next time around. */
 175:App/Common/Minimal/PollQ.c **** 				usValue++;
 192              		.loc 1 175 0
 193 004e FB89     		ldrh	r3, [r7, #14]
 194 0050 0133     		adds	r3, r3, #1
 195 0052 9BB2     		uxth	r3, r3
 196 0054 FB81     		strh	r3, [r7, #14]	@ movhi
 197              	.L7:
 154:App/Common/Minimal/PollQ.c **** 		for( xLoop = 0; xLoop < pollqVALUES_TO_PRODUCE; xLoop++ )
 198              		.loc 1 154 0
 199 0056 3B69     		ldr	r3, [r7, #16]
 200 0058 0133     		adds	r3, r3, #1
 201 005a 3B61     		str	r3, [r7, #16]
 202              	.L5:
 154:App/Common/Minimal/PollQ.c **** 		for( xLoop = 0; xLoop < pollqVALUES_TO_PRODUCE; xLoop++ )
 203              		.loc 1 154 0 is_stmt 0 discriminator 1
 204 005c 3B69     		ldr	r3, [r7, #16]
 205 005e 022B     		cmp	r3, #2
 206 0060 D9DD     		ble	.L9
 176:App/Common/Minimal/PollQ.c **** 			}
 177:App/Common/Minimal/PollQ.c **** 		}
 178:App/Common/Minimal/PollQ.c **** 
 179:App/Common/Minimal/PollQ.c **** 		/* Wait before we start posting again to ensure the consumer runs and
 180:App/Common/Minimal/PollQ.c **** 		empties the queue. */
 181:App/Common/Minimal/PollQ.c **** 		vTaskDelay( pollqPRODUCER_DELAY );
 207              		.loc 1 181 0 is_stmt 1
 208 0062 C820     		movs	r0, #200
 209 0064 FFF7FEFF 		bl	vTaskDelay
 182:App/Common/Minimal/PollQ.c **** 	}
 210              		.loc 1 182 0
 211 0068 D2E7     		b	.L10
 212              	.L12:
 213 006a 00BF     		.align	2
 214              	.L11:
 215 006c 00000000 		.word	xPollingProducerCount
 216              		.cfi_endproc
 217              	.LFE111:
 219              		.section	.text.vPolledQueueConsumer,"ax",%progbits
 220              		.align	2
 221              		.thumb
 222              		.thumb_func
 224              	vPolledQueueConsumer:
 225              	.LFB112:
 183:App/Common/Minimal/PollQ.c **** }  /*lint !e818 Function prototype must conform to API. */
 184:App/Common/Minimal/PollQ.c **** /*-----------------------------------------------------------*/
 185:App/Common/Minimal/PollQ.c **** 
 186:App/Common/Minimal/PollQ.c **** static portTASK_FUNCTION( vPolledQueueConsumer, pvParameters )
 187:App/Common/Minimal/PollQ.c **** {
 226              		.loc 1 187 0
 227              		.cfi_startproc
 228              		@ args = 0, pretend = 0, frame = 24
 229              		@ frame_needed = 1, uses_anonymous_args = 0
 230 0000 80B5     		push	{r7, lr}
 231              	.LCFI6:
 232              		.cfi_def_cfa_offset 8
 233              		.cfi_offset 7, -8
 234              		.cfi_offset 14, -4
 235 0002 86B0     		sub	sp, sp, #24
 236              	.LCFI7:
 237              		.cfi_def_cfa_offset 32
 238 0004 00AF     		add	r7, sp, #0
 239              	.LCFI8:
 240              		.cfi_def_cfa_register 7
 241 0006 7860     		str	r0, [r7, #4]
 188:App/Common/Minimal/PollQ.c **** unsigned short usData, usExpectedValue = ( unsigned short ) 0;
 242              		.loc 1 188 0
 243 0008 0023     		movs	r3, #0
 244 000a FB82     		strh	r3, [r7, #22]	@ movhi
 189:App/Common/Minimal/PollQ.c **** signed portBASE_TYPE xError = pdFALSE;
 245              		.loc 1 189 0
 246 000c 0023     		movs	r3, #0
 247 000e 3B61     		str	r3, [r7, #16]
 190:App/Common/Minimal/PollQ.c **** 
 191:App/Common/Minimal/PollQ.c **** 	for( ;; )
 192:App/Common/Minimal/PollQ.c **** 	{		
 193:App/Common/Minimal/PollQ.c **** 		/* Loop until the queue is empty. */
 194:App/Common/Minimal/PollQ.c **** 		while( uxQueueMessagesWaiting( *( ( xQueueHandle * ) pvParameters ) ) )
 248              		.loc 1 194 0
 249 0010 24E0     		b	.L14
 250              	.L17:
 195:App/Common/Minimal/PollQ.c **** 		{
 196:App/Common/Minimal/PollQ.c **** 			if( xQueueReceive( *( ( xQueueHandle * ) pvParameters ), &usData, pollqNO_DELAY ) == pdPASS )
 251              		.loc 1 196 0
 252 0012 7B68     		ldr	r3, [r7, #4]
 253 0014 1A68     		ldr	r2, [r3]
 254 0016 07F10E03 		add	r3, r7, #14
 255 001a 1046     		mov	r0, r2
 256 001c 1946     		mov	r1, r3
 257 001e 0022     		movs	r2, #0
 258 0020 0023     		movs	r3, #0
 259 0022 FFF7FEFF 		bl	xQueueGenericReceive
 260 0026 0346     		mov	r3, r0
 261 0028 012B     		cmp	r3, #1
 262 002a 17D1     		bne	.L14
 197:App/Common/Minimal/PollQ.c **** 			{
 198:App/Common/Minimal/PollQ.c **** 				if( usData != usExpectedValue )
 263              		.loc 1 198 0
 264 002c FB89     		ldrh	r3, [r7, #14]
 265 002e FA8A     		ldrh	r2, [r7, #22]
 266 0030 9A42     		cmp	r2, r3
 267 0032 04D0     		beq	.L15
 199:App/Common/Minimal/PollQ.c **** 				{
 200:App/Common/Minimal/PollQ.c **** 					/* This is not what we expected to receive so an error has
 201:App/Common/Minimal/PollQ.c **** 					occurred. */
 202:App/Common/Minimal/PollQ.c **** 					xError = pdTRUE;
 268              		.loc 1 202 0
 269 0034 0123     		movs	r3, #1
 270 0036 3B61     		str	r3, [r7, #16]
 203:App/Common/Minimal/PollQ.c **** 
 204:App/Common/Minimal/PollQ.c **** 					/* Catch-up to the value we received so our next expected
 205:App/Common/Minimal/PollQ.c **** 					value should again be correct. */
 206:App/Common/Minimal/PollQ.c **** 					usExpectedValue = usData;
 271              		.loc 1 206 0
 272 0038 FB89     		ldrh	r3, [r7, #14]	@ movhi
 273 003a FB82     		strh	r3, [r7, #22]	@ movhi
 274 003c 0BE0     		b	.L16
 275              	.L15:
 207:App/Common/Minimal/PollQ.c **** 				}
 208:App/Common/Minimal/PollQ.c **** 				else
 209:App/Common/Minimal/PollQ.c **** 				{
 210:App/Common/Minimal/PollQ.c **** 					if( xError == pdFALSE )
 276              		.loc 1 210 0
 277 003e 3B69     		ldr	r3, [r7, #16]
 278 0040 002B     		cmp	r3, #0
 279 0042 08D1     		bne	.L16
 211:App/Common/Minimal/PollQ.c **** 					{
 212:App/Common/Minimal/PollQ.c **** 						/* Only increment the check variable if no errors have
 213:App/Common/Minimal/PollQ.c **** 						occurred. */
 214:App/Common/Minimal/PollQ.c **** 						portENTER_CRITICAL();
 280              		.loc 1 214 0
 281 0044 FFF7FEFF 		bl	vPortEnterCritical
 215:App/Common/Minimal/PollQ.c **** 							xPollingConsumerCount++;
 282              		.loc 1 215 0
 283 0048 0B4B     		ldr	r3, .L19
 284 004a 1B68     		ldr	r3, [r3]
 285 004c 5A1C     		adds	r2, r3, #1
 286 004e 0A4B     		ldr	r3, .L19
 287 0050 1A60     		str	r2, [r3]
 216:App/Common/Minimal/PollQ.c **** 						portEXIT_CRITICAL();
 288              		.loc 1 216 0
 289 0052 FFF7FEFF 		bl	vPortExitCritical
 290              	.L16:
 217:App/Common/Minimal/PollQ.c **** 					}
 218:App/Common/Minimal/PollQ.c **** 				}
 219:App/Common/Minimal/PollQ.c **** 
 220:App/Common/Minimal/PollQ.c **** 				/* Next time round we would expect the number to be one higher. */
 221:App/Common/Minimal/PollQ.c **** 				usExpectedValue++;
 291              		.loc 1 221 0
 292 0056 FB8A     		ldrh	r3, [r7, #22]
 293 0058 0133     		adds	r3, r3, #1
 294 005a FB82     		strh	r3, [r7, #22]	@ movhi
 295              	.L14:
 194:App/Common/Minimal/PollQ.c **** 		while( uxQueueMessagesWaiting( *( ( xQueueHandle * ) pvParameters ) ) )
 296              		.loc 1 194 0 discriminator 1
 297 005c 7B68     		ldr	r3, [r7, #4]
 298 005e 1B68     		ldr	r3, [r3]
 299 0060 1846     		mov	r0, r3
 300 0062 FFF7FEFF 		bl	uxQueueMessagesWaiting
 301 0066 0346     		mov	r3, r0
 302 0068 002B     		cmp	r3, #0
 303 006a D2D1     		bne	.L17
 222:App/Common/Minimal/PollQ.c **** 			}
 223:App/Common/Minimal/PollQ.c **** 		}
 224:App/Common/Minimal/PollQ.c **** 
 225:App/Common/Minimal/PollQ.c **** 		/* Now the queue is empty we block, allowing the producer to place more
 226:App/Common/Minimal/PollQ.c **** 		items in the queue. */
 227:App/Common/Minimal/PollQ.c **** 		vTaskDelay( pollqCONSUMER_DELAY );
 304              		.loc 1 227 0
 305 006c B420     		movs	r0, #180
 306 006e FFF7FEFF 		bl	vTaskDelay
 228:App/Common/Minimal/PollQ.c **** 	}
 307              		.loc 1 228 0
 308 0072 00BF     		nop
 194:App/Common/Minimal/PollQ.c **** 		while( uxQueueMessagesWaiting( *( ( xQueueHandle * ) pvParameters ) ) )
 309              		.loc 1 194 0
 310 0074 F2E7     		b	.L14
 311              	.L20:
 312 0076 00BF     		.align	2
 313              	.L19:
 314 0078 00000000 		.word	xPollingConsumerCount
 315              		.cfi_endproc
 316              	.LFE112:
 318              		.section	.text.xArePollingQueuesStillRunning,"ax",%progbits
 319              		.align	2
 320              		.global	xArePollingQueuesStillRunning
 321              		.thumb
 322              		.thumb_func
 324              	xArePollingQueuesStillRunning:
 325              	.LFB113:
 229:App/Common/Minimal/PollQ.c **** } /*lint !e818 Function prototype must conform to API. */
 230:App/Common/Minimal/PollQ.c **** /*-----------------------------------------------------------*/
 231:App/Common/Minimal/PollQ.c **** 
 232:App/Common/Minimal/PollQ.c **** /* This is called to check that all the created tasks are still running with no errors. */
 233:App/Common/Minimal/PollQ.c **** portBASE_TYPE xArePollingQueuesStillRunning( void )
 234:App/Common/Minimal/PollQ.c **** {
 326              		.loc 1 234 0
 327              		.cfi_startproc
 328              		@ args = 0, pretend = 0, frame = 8
 329              		@ frame_needed = 1, uses_anonymous_args = 0
 330              		@ link register save eliminated.
 331 0000 80B4     		push	{r7}
 332              	.LCFI9:
 333              		.cfi_def_cfa_offset 4
 334              		.cfi_offset 7, -4
 335 0002 83B0     		sub	sp, sp, #12
 336              	.LCFI10:
 337              		.cfi_def_cfa_offset 16
 338 0004 00AF     		add	r7, sp, #0
 339              	.LCFI11:
 340              		.cfi_def_cfa_register 7
 235:App/Common/Minimal/PollQ.c **** portBASE_TYPE xReturn;
 236:App/Common/Minimal/PollQ.c **** 
 237:App/Common/Minimal/PollQ.c **** 	/* Check both the consumer and producer poll count to check they have both
 238:App/Common/Minimal/PollQ.c **** 	been changed since out last trip round.  We do not need a critical section
 239:App/Common/Minimal/PollQ.c **** 	around the check variables as this is called from a higher priority than
 240:App/Common/Minimal/PollQ.c **** 	the other tasks that access the same variables. */
 241:App/Common/Minimal/PollQ.c **** 	if( ( xPollingConsumerCount == pollqINITIAL_VALUE ) ||
 341              		.loc 1 241 0
 342 0006 0D4B     		ldr	r3, .L26
 343 0008 1B68     		ldr	r3, [r3]
 344 000a 002B     		cmp	r3, #0
 345 000c 03D0     		beq	.L22
 242:App/Common/Minimal/PollQ.c **** 		( xPollingProducerCount == pollqINITIAL_VALUE )
 346              		.loc 1 242 0 discriminator 1
 347 000e 0C4B     		ldr	r3, .L26+4
 348 0010 1B68     		ldr	r3, [r3]
 241:App/Common/Minimal/PollQ.c **** 	if( ( xPollingConsumerCount == pollqINITIAL_VALUE ) ||
 349              		.loc 1 241 0 discriminator 1
 350 0012 002B     		cmp	r3, #0
 351 0014 02D1     		bne	.L23
 352              	.L22:
 243:App/Common/Minimal/PollQ.c **** 	  )
 244:App/Common/Minimal/PollQ.c **** 	{
 245:App/Common/Minimal/PollQ.c **** 		xReturn = pdFALSE;
 353              		.loc 1 245 0
 354 0016 0023     		movs	r3, #0
 355 0018 7B60     		str	r3, [r7, #4]
 356 001a 01E0     		b	.L24
 357              	.L23:
 246:App/Common/Minimal/PollQ.c **** 	}
 247:App/Common/Minimal/PollQ.c **** 	else
 248:App/Common/Minimal/PollQ.c **** 	{
 249:App/Common/Minimal/PollQ.c **** 		xReturn = pdTRUE;
 358              		.loc 1 249 0
 359 001c 0123     		movs	r3, #1
 360 001e 7B60     		str	r3, [r7, #4]
 361              	.L24:
 250:App/Common/Minimal/PollQ.c **** 	}
 251:App/Common/Minimal/PollQ.c **** 
 252:App/Common/Minimal/PollQ.c **** 	/* Set the check variables back down so we know if they have been
 253:App/Common/Minimal/PollQ.c **** 	incremented the next time around. */
 254:App/Common/Minimal/PollQ.c **** 	xPollingConsumerCount = pollqINITIAL_VALUE;
 362              		.loc 1 254 0
 363 0020 064B     		ldr	r3, .L26
 364 0022 0022     		movs	r2, #0
 365 0024 1A60     		str	r2, [r3]
 255:App/Common/Minimal/PollQ.c **** 	xPollingProducerCount = pollqINITIAL_VALUE;
 366              		.loc 1 255 0
 367 0026 064B     		ldr	r3, .L26+4
 368 0028 0022     		movs	r2, #0
 369 002a 1A60     		str	r2, [r3]
 256:App/Common/Minimal/PollQ.c **** 
 257:App/Common/Minimal/PollQ.c **** 	return xReturn;
 370              		.loc 1 257 0
 371 002c 7B68     		ldr	r3, [r7, #4]
 258:App/Common/Minimal/PollQ.c **** }
 372              		.loc 1 258 0
 373 002e 1846     		mov	r0, r3
 374 0030 0C37     		adds	r7, r7, #12
 375 0032 BD46     		mov	sp, r7
 376              		@ sp needed
 377 0034 5DF8047B 		ldr	r7, [sp], #4
 378 0038 7047     		bx	lr
 379              	.L27:
 380 003a 00BF     		.align	2
 381              	.L26:
 382 003c 00000000 		.word	xPollingConsumerCount
 383 0040 00000000 		.word	xPollingProducerCount
 384              		.cfi_endproc
 385              	.LFE113:
 387              		.section	.bss.xPolledQueue.8210,"aw",%nobits
 388              		.align	2
 391              	xPolledQueue.8210:
 392 0000 00000000 		.space	4
 393              		.text
 394              	.Letext0:
 395              		.file 2 "/Users/maticknap/ARM/gcc-arm-none-eabi-4_8-2014q2/arm-none-eabi/include/machine/_default_
 396              		.file 3 "/Users/maticknap/ARM/gcc-arm-none-eabi-4_8-2014q2/arm-none-eabi/include/stdint.h"
 397              		.file 4 "Source/portable/GCC/ARM_CM4F/portmacro.h"
 398              		.file 5 "Source/include/task.h"
 399              		.file 6 "Source/include/queue.h"
 400              		.file 7 "App/STM32F4-Discovery/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 PollQ.c
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccXnKLAK.s:20     .bss.xPollingConsumerCount:0000000000000000 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccXnKLAK.s:23     .bss.xPollingConsumerCount:0000000000000000 xPollingConsumerCount
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccXnKLAK.s:26     .bss.xPollingProducerCount:0000000000000000 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccXnKLAK.s:29     .bss.xPollingProducerCount:0000000000000000 xPollingProducerCount
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccXnKLAK.s:32     .rodata:0000000000000000 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccXnKLAK.s:42     .text.vStartPolledQueueTasks:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccXnKLAK.s:47     .text.vStartPolledQueueTasks:0000000000000000 vStartPolledQueueTasks
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccXnKLAK.s:116    .text.vStartPolledQueueTasks:0000000000000068 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccXnKLAK.s:391    .bss.xPolledQueue.8210:0000000000000000 xPolledQueue.8210
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccXnKLAK.s:224    .text.vPolledQueueConsumer:0000000000000000 vPolledQueueConsumer
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccXnKLAK.s:130    .text.vPolledQueueProducer:0000000000000000 vPolledQueueProducer
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccXnKLAK.s:126    .text.vPolledQueueProducer:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccXnKLAK.s:215    .text.vPolledQueueProducer:000000000000006c $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccXnKLAK.s:220    .text.vPolledQueueConsumer:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccXnKLAK.s:314    .text.vPolledQueueConsumer:0000000000000078 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccXnKLAK.s:319    .text.xArePollingQueuesStillRunning:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccXnKLAK.s:324    .text.xArePollingQueuesStillRunning:0000000000000000 xArePollingQueuesStillRunning
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccXnKLAK.s:382    .text.xArePollingQueuesStillRunning:000000000000003c $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccXnKLAK.s:388    .bss.xPolledQueue.8210:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
xQueueGenericCreate
vQueueAddToRegistry
xTaskGenericCreate
xQueueGenericSend
vPortEnterCritical
vPortExitCritical
vTaskDelay
xQueueGenericReceive
uxQueueMessagesWaiting
