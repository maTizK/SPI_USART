   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"GenQTest.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.bss.xErrorDetected,"aw",%nobits
  20              		.align	2
  23              	xErrorDetected:
  24 0000 00000000 		.space	4
  25              		.section	.bss.ulLoopCounter,"aw",%nobits
  26              		.align	2
  29              	ulLoopCounter:
  30 0000 00000000 		.space	4
  31              		.section	.bss.ulLoopCounter2,"aw",%nobits
  32              		.align	2
  35              	ulLoopCounter2:
  36 0000 00000000 		.space	4
  37              		.section	.bss.ulGuardedVariable,"aw",%nobits
  38              		.align	2
  41              	ulGuardedVariable:
  42 0000 00000000 		.space	4
  43              		.section	.bss.xHighPriorityMutexTask,"aw",%nobits
  44              		.align	2
  47              	xHighPriorityMutexTask:
  48 0000 00000000 		.space	4
  49              		.section	.bss.xMediumPriorityMutexTask,"aw",%nobits
  50              		.align	2
  53              	xMediumPriorityMutexTask:
  54 0000 00000000 		.space	4
  55              		.section	.rodata
  56              		.align	2
  57              	.LC0:
  58 0000 47656E5F 		.ascii	"Gen_Queue_Test\000"
  58      51756575 
  58      655F5465 
  58      737400
  59 000f 00       		.align	2
  60              	.LC1:
  61 0010 47656E51 		.ascii	"GenQ\000"
  61      00
  62 0015 000000   		.align	2
  63              	.LC2:
  64 0018 47656E5F 		.ascii	"Gen_Queue_Mutex\000"
  64      51756575 
  64      655F4D75 
  64      74657800 
  65              		.align	2
  66              	.LC3:
  67 0028 4D754C6F 		.ascii	"MuLow\000"
  67      7700
  68 002e 0000     		.align	2
  69              	.LC4:
  70 0030 4D754D65 		.ascii	"MuMed\000"
  70      6400
  71 0036 0000     		.align	2
  72              	.LC5:
  73 0038 4D754869 		.ascii	"MuHigh\000"
  73      676800
  74 003f 00       		.section	.text.vStartGenericQueueTasks,"ax",%progbits
  75              		.align	2
  76              		.global	vStartGenericQueueTasks
  77              		.thumb
  78              		.thumb_func
  80              	vStartGenericQueueTasks:
  81              	.LFB110:
  82              		.file 1 "App/Common/Minimal/GenQTest.c"
   1:App/Common/Minimal/GenQTest.c **** /*
   2:App/Common/Minimal/GenQTest.c ****     FreeRTOS V7.5.3 - Copyright (C) 2013 Real Time Engineers Ltd. 
   3:App/Common/Minimal/GenQTest.c ****     All rights reserved
   4:App/Common/Minimal/GenQTest.c **** 
   5:App/Common/Minimal/GenQTest.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:App/Common/Minimal/GenQTest.c **** 
   7:App/Common/Minimal/GenQTest.c ****     ***************************************************************************
   8:App/Common/Minimal/GenQTest.c ****      *                                                                       *
   9:App/Common/Minimal/GenQTest.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  10:App/Common/Minimal/GenQTest.c ****      *    robust, strictly quality controlled, supported, and cross          *
  11:App/Common/Minimal/GenQTest.c ****      *    platform software that has become a de facto standard.             *
  12:App/Common/Minimal/GenQTest.c ****      *                                                                       *
  13:App/Common/Minimal/GenQTest.c ****      *    Help yourself get started quickly and support the FreeRTOS         *
  14:App/Common/Minimal/GenQTest.c ****      *    project by purchasing a FreeRTOS tutorial book, reference          *
  15:App/Common/Minimal/GenQTest.c ****      *    manual, or both from: http://www.FreeRTOS.org/Documentation        *
  16:App/Common/Minimal/GenQTest.c ****      *                                                                       *
  17:App/Common/Minimal/GenQTest.c ****      *    Thank you!                                                         *
  18:App/Common/Minimal/GenQTest.c ****      *                                                                       *
  19:App/Common/Minimal/GenQTest.c ****     ***************************************************************************
  20:App/Common/Minimal/GenQTest.c **** 
  21:App/Common/Minimal/GenQTest.c ****     This file is part of the FreeRTOS distribution.
  22:App/Common/Minimal/GenQTest.c **** 
  23:App/Common/Minimal/GenQTest.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  24:App/Common/Minimal/GenQTest.c ****     the terms of the GNU General Public License (version 2) as published by the
  25:App/Common/Minimal/GenQTest.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  26:App/Common/Minimal/GenQTest.c **** 
  27:App/Common/Minimal/GenQTest.c ****     >>! NOTE: The modification to the GPL is included to allow you to distribute
  28:App/Common/Minimal/GenQTest.c ****     >>! a combined work that includes FreeRTOS without being obliged to provide
  29:App/Common/Minimal/GenQTest.c ****     >>! the source code for proprietary components outside of the FreeRTOS
  30:App/Common/Minimal/GenQTest.c ****     >>! kernel.
  31:App/Common/Minimal/GenQTest.c **** 
  32:App/Common/Minimal/GenQTest.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  33:App/Common/Minimal/GenQTest.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  34:App/Common/Minimal/GenQTest.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available from the following
  35:App/Common/Minimal/GenQTest.c ****     link: http://www.freertos.org/a00114.html
  36:App/Common/Minimal/GenQTest.c **** 
  37:App/Common/Minimal/GenQTest.c ****     1 tab == 4 spaces!
  38:App/Common/Minimal/GenQTest.c **** 
  39:App/Common/Minimal/GenQTest.c ****     ***************************************************************************
  40:App/Common/Minimal/GenQTest.c ****      *                                                                       *
  41:App/Common/Minimal/GenQTest.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  42:App/Common/Minimal/GenQTest.c ****      *    not run, what could be wrong?"                                     *
  43:App/Common/Minimal/GenQTest.c ****      *                                                                       *
  44:App/Common/Minimal/GenQTest.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  45:App/Common/Minimal/GenQTest.c ****      *                                                                       *
  46:App/Common/Minimal/GenQTest.c ****     ***************************************************************************
  47:App/Common/Minimal/GenQTest.c **** 
  48:App/Common/Minimal/GenQTest.c ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions,
  49:App/Common/Minimal/GenQTest.c ****     license and Real Time Engineers Ltd. contact details.
  50:App/Common/Minimal/GenQTest.c **** 
  51:App/Common/Minimal/GenQTest.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  52:App/Common/Minimal/GenQTest.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  53:App/Common/Minimal/GenQTest.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  54:App/Common/Minimal/GenQTest.c **** 
  55:App/Common/Minimal/GenQTest.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
  56:App/Common/Minimal/GenQTest.c ****     Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS
  57:App/Common/Minimal/GenQTest.c ****     licenses offer ticketed support, indemnification and middleware.
  58:App/Common/Minimal/GenQTest.c **** 
  59:App/Common/Minimal/GenQTest.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  60:App/Common/Minimal/GenQTest.c ****     engineered and independently SIL3 certified version for use in safety and
  61:App/Common/Minimal/GenQTest.c ****     mission critical applications that require provable dependability.
  62:App/Common/Minimal/GenQTest.c **** 
  63:App/Common/Minimal/GenQTest.c ****     1 tab == 4 spaces!
  64:App/Common/Minimal/GenQTest.c **** */
  65:App/Common/Minimal/GenQTest.c **** 
  66:App/Common/Minimal/GenQTest.c **** 
  67:App/Common/Minimal/GenQTest.c **** /* 
  68:App/Common/Minimal/GenQTest.c ****  * Tests the extra queue functionality introduced in FreeRTOS.org V4.5.0 - 
  69:App/Common/Minimal/GenQTest.c ****  * including xQueueSendToFront(), xQueueSendToBack(), xQueuePeek() and 
  70:App/Common/Minimal/GenQTest.c ****  * mutex behaviour. 
  71:App/Common/Minimal/GenQTest.c ****  *
  72:App/Common/Minimal/GenQTest.c ****  * See the comments above the prvSendFrontAndBackTest() and 
  73:App/Common/Minimal/GenQTest.c ****  * prvLowPriorityMutexTask() prototypes below for more information.
  74:App/Common/Minimal/GenQTest.c ****  */
  75:App/Common/Minimal/GenQTest.c **** 
  76:App/Common/Minimal/GenQTest.c **** 
  77:App/Common/Minimal/GenQTest.c **** #include <stdlib.h>
  78:App/Common/Minimal/GenQTest.c **** 
  79:App/Common/Minimal/GenQTest.c **** /* Scheduler include files. */
  80:App/Common/Minimal/GenQTest.c **** #include "FreeRTOS.h"
  81:App/Common/Minimal/GenQTest.c **** #include "task.h"
  82:App/Common/Minimal/GenQTest.c **** #include "queue.h"
  83:App/Common/Minimal/GenQTest.c **** #include "semphr.h"
  84:App/Common/Minimal/GenQTest.c **** 
  85:App/Common/Minimal/GenQTest.c **** /* Demo program include files. */
  86:App/Common/Minimal/GenQTest.c **** #include "GenQTest.h"
  87:App/Common/Minimal/GenQTest.c **** 
  88:App/Common/Minimal/GenQTest.c **** #define genqQUEUE_LENGTH		( 5 )
  89:App/Common/Minimal/GenQTest.c **** #define genqNO_BLOCK			( 0 )
  90:App/Common/Minimal/GenQTest.c **** 
  91:App/Common/Minimal/GenQTest.c **** #define genqMUTEX_LOW_PRIORITY		( tskIDLE_PRIORITY )
  92:App/Common/Minimal/GenQTest.c **** #define genqMUTEX_TEST_PRIORITY		( tskIDLE_PRIORITY + 1 )
  93:App/Common/Minimal/GenQTest.c **** #define genqMUTEX_MEDIUM_PRIORITY	( tskIDLE_PRIORITY + 2 )
  94:App/Common/Minimal/GenQTest.c **** #define genqMUTEX_HIGH_PRIORITY		( tskIDLE_PRIORITY + 3 )
  95:App/Common/Minimal/GenQTest.c **** 
  96:App/Common/Minimal/GenQTest.c **** /*-----------------------------------------------------------*/
  97:App/Common/Minimal/GenQTest.c **** 
  98:App/Common/Minimal/GenQTest.c **** /*
  99:App/Common/Minimal/GenQTest.c ****  * Tests the behaviour of the xQueueSendToFront() and xQueueSendToBack()
 100:App/Common/Minimal/GenQTest.c ****  * macros by using both to fill a queue, then reading from the queue to
 101:App/Common/Minimal/GenQTest.c ****  * check the resultant queue order is as expected.  Queue data is also
 102:App/Common/Minimal/GenQTest.c ****  * peeked.
 103:App/Common/Minimal/GenQTest.c ****  */
 104:App/Common/Minimal/GenQTest.c **** static void prvSendFrontAndBackTest( void *pvParameters );
 105:App/Common/Minimal/GenQTest.c **** 
 106:App/Common/Minimal/GenQTest.c **** /*
 107:App/Common/Minimal/GenQTest.c ****  * The following three tasks are used to demonstrate the mutex behaviour.
 108:App/Common/Minimal/GenQTest.c ****  * Each task is given a different priority to demonstrate the priority
 109:App/Common/Minimal/GenQTest.c ****  * inheritance mechanism.
 110:App/Common/Minimal/GenQTest.c ****  *
 111:App/Common/Minimal/GenQTest.c ****  * The low priority task obtains a mutex.  After this a high priority task
 112:App/Common/Minimal/GenQTest.c ****  * attempts to obtain the same mutex, causing its priority to be inherited
 113:App/Common/Minimal/GenQTest.c ****  * by the low priority task.  The task with the inherited high priority then
 114:App/Common/Minimal/GenQTest.c ****  * resumes a medium priority task to ensure it is not blocked by the medium
 115:App/Common/Minimal/GenQTest.c ****  * priority task while it holds the inherited high priority.  Once the mutex
 116:App/Common/Minimal/GenQTest.c ****  * is returned the task with the inherited priority returns to its original
 117:App/Common/Minimal/GenQTest.c ****  * low priority, and is therefore immediately preempted by first the high
 118:App/Common/Minimal/GenQTest.c ****  * priority task and then the medium prioroity task before it can continue.
 119:App/Common/Minimal/GenQTest.c ****  */
 120:App/Common/Minimal/GenQTest.c **** static void prvLowPriorityMutexTask( void *pvParameters );
 121:App/Common/Minimal/GenQTest.c **** static void prvMediumPriorityMutexTask( void *pvParameters );
 122:App/Common/Minimal/GenQTest.c **** static void prvHighPriorityMutexTask( void *pvParameters );
 123:App/Common/Minimal/GenQTest.c **** 
 124:App/Common/Minimal/GenQTest.c **** /*-----------------------------------------------------------*/
 125:App/Common/Minimal/GenQTest.c **** 
 126:App/Common/Minimal/GenQTest.c **** /* Flag that will be latched to pdTRUE should any unexpected behaviour be
 127:App/Common/Minimal/GenQTest.c **** detected in any of the tasks. */
 128:App/Common/Minimal/GenQTest.c **** static volatile portBASE_TYPE xErrorDetected = pdFALSE;
 129:App/Common/Minimal/GenQTest.c **** 
 130:App/Common/Minimal/GenQTest.c **** /* Counters that are incremented on each cycle of a test.  This is used to
 131:App/Common/Minimal/GenQTest.c **** detect a stalled task - a test that is no longer running. */
 132:App/Common/Minimal/GenQTest.c **** static volatile unsigned portLONG ulLoopCounter = 0;
 133:App/Common/Minimal/GenQTest.c **** static volatile unsigned portLONG ulLoopCounter2 = 0;
 134:App/Common/Minimal/GenQTest.c **** 
 135:App/Common/Minimal/GenQTest.c **** /* The variable that is guarded by the mutex in the mutex demo tasks. */
 136:App/Common/Minimal/GenQTest.c **** static volatile unsigned portLONG ulGuardedVariable = 0;
 137:App/Common/Minimal/GenQTest.c **** 
 138:App/Common/Minimal/GenQTest.c **** /* Handles used in the mutext test to suspend and resume the high and medium
 139:App/Common/Minimal/GenQTest.c **** priority mutex test tasks. */
 140:App/Common/Minimal/GenQTest.c **** static xTaskHandle xHighPriorityMutexTask, xMediumPriorityMutexTask;
 141:App/Common/Minimal/GenQTest.c **** 
 142:App/Common/Minimal/GenQTest.c **** /*-----------------------------------------------------------*/
 143:App/Common/Minimal/GenQTest.c **** 
 144:App/Common/Minimal/GenQTest.c **** void vStartGenericQueueTasks( unsigned portBASE_TYPE uxPriority )
 145:App/Common/Minimal/GenQTest.c **** {
  83              		.loc 1 145 0
  84              		.cfi_startproc
  85              		@ args = 0, pretend = 0, frame = 16
  86              		@ frame_needed = 1, uses_anonymous_args = 0
  87 0000 80B5     		push	{r7, lr}
  88              	.LCFI0:
  89              		.cfi_def_cfa_offset 8
  90              		.cfi_offset 7, -8
  91              		.cfi_offset 14, -4
  92 0002 88B0     		sub	sp, sp, #32
  93              	.LCFI1:
  94              		.cfi_def_cfa_offset 40
  95 0004 04AF     		add	r7, sp, #16
  96              	.LCFI2:
  97              		.cfi_def_cfa 7, 24
  98 0006 7860     		str	r0, [r7, #4]
 146:App/Common/Minimal/GenQTest.c **** xQueueHandle xQueue;
 147:App/Common/Minimal/GenQTest.c **** xSemaphoreHandle xMutex;
 148:App/Common/Minimal/GenQTest.c **** 
 149:App/Common/Minimal/GenQTest.c **** 	/* Create the queue that we are going to use for the
 150:App/Common/Minimal/GenQTest.c **** 	prvSendFrontAndBackTest demo. */
 151:App/Common/Minimal/GenQTest.c **** 	xQueue = xQueueCreate( genqQUEUE_LENGTH, sizeof( unsigned portLONG ) );
  99              		.loc 1 151 0
 100 0008 0520     		movs	r0, #5
 101 000a 0421     		movs	r1, #4
 102 000c 0022     		movs	r2, #0
 103 000e FFF7FEFF 		bl	xQueueGenericCreate
 104 0012 F860     		str	r0, [r7, #12]
 152:App/Common/Minimal/GenQTest.c **** 
 153:App/Common/Minimal/GenQTest.c **** 	/* vQueueAddToRegistry() adds the queue to the queue registry, if one is
 154:App/Common/Minimal/GenQTest.c **** 	in use.  The queue registry is provided as a means for kernel aware 
 155:App/Common/Minimal/GenQTest.c **** 	debuggers to locate queues and has no purpose if a kernel aware debugger
 156:App/Common/Minimal/GenQTest.c **** 	is not being used.  The call to vQueueAddToRegistry() will be removed
 157:App/Common/Minimal/GenQTest.c **** 	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is 
 158:App/Common/Minimal/GenQTest.c **** 	defined to be less than 1. */
 159:App/Common/Minimal/GenQTest.c **** 	vQueueAddToRegistry( xQueue, ( signed portCHAR * ) "Gen_Queue_Test" );
 105              		.loc 1 159 0
 106 0014 F868     		ldr	r0, [r7, #12]
 107 0016 2549     		ldr	r1, .L2
 108 0018 FFF7FEFF 		bl	vQueueAddToRegistry
 160:App/Common/Minimal/GenQTest.c **** 
 161:App/Common/Minimal/GenQTest.c **** 	/* Create the demo task and pass it the queue just created.  We are
 162:App/Common/Minimal/GenQTest.c **** 	passing the queue handle by value so it does not matter that it is
 163:App/Common/Minimal/GenQTest.c **** 	declared on the stack here. */
 164:App/Common/Minimal/GenQTest.c **** 	xTaskCreate( prvSendFrontAndBackTest, ( signed portCHAR * )"GenQ", configMINIMAL_STACK_SIZE, ( voi
 109              		.loc 1 164 0
 110 001c 7B68     		ldr	r3, [r7, #4]
 111 001e 0093     		str	r3, [sp]
 112 0020 0023     		movs	r3, #0
 113 0022 0193     		str	r3, [sp, #4]
 114 0024 0023     		movs	r3, #0
 115 0026 0293     		str	r3, [sp, #8]
 116 0028 0023     		movs	r3, #0
 117 002a 0393     		str	r3, [sp, #12]
 118 002c 2048     		ldr	r0, .L2+4
 119 002e 2149     		ldr	r1, .L2+8
 120 0030 4FF48072 		mov	r2, #256
 121 0034 FB68     		ldr	r3, [r7, #12]
 122 0036 FFF7FEFF 		bl	xTaskGenericCreate
 165:App/Common/Minimal/GenQTest.c **** 
 166:App/Common/Minimal/GenQTest.c **** 	/* Create the mutex used by the prvMutexTest task. */
 167:App/Common/Minimal/GenQTest.c **** 	xMutex = xSemaphoreCreateMutex();
 123              		.loc 1 167 0
 124 003a 0120     		movs	r0, #1
 125 003c FFF7FEFF 		bl	xQueueCreateMutex
 126 0040 B860     		str	r0, [r7, #8]
 168:App/Common/Minimal/GenQTest.c **** 
 169:App/Common/Minimal/GenQTest.c **** 	/* vQueueAddToRegistry() adds the mutex to the registry, if one is
 170:App/Common/Minimal/GenQTest.c **** 	in use.  The registry is provided as a means for kernel aware 
 171:App/Common/Minimal/GenQTest.c **** 	debuggers to locate mutexes and has no purpose if a kernel aware debugger
 172:App/Common/Minimal/GenQTest.c **** 	is not being used.  The call to vQueueAddToRegistry() will be removed
 173:App/Common/Minimal/GenQTest.c **** 	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is 
 174:App/Common/Minimal/GenQTest.c **** 	defined to be less than 1. */
 175:App/Common/Minimal/GenQTest.c **** 	vQueueAddToRegistry( ( xQueueHandle ) xMutex, ( signed portCHAR * ) "Gen_Queue_Mutex" );
 127              		.loc 1 175 0
 128 0042 B868     		ldr	r0, [r7, #8]
 129 0044 1C49     		ldr	r1, .L2+12
 130 0046 FFF7FEFF 		bl	vQueueAddToRegistry
 176:App/Common/Minimal/GenQTest.c **** 
 177:App/Common/Minimal/GenQTest.c **** 	/* Create the mutex demo tasks and pass it the mutex just created.  We are
 178:App/Common/Minimal/GenQTest.c **** 	passing the mutex handle by value so it does not matter that it is declared
 179:App/Common/Minimal/GenQTest.c **** 	on the stack here. */
 180:App/Common/Minimal/GenQTest.c **** 	xTaskCreate( prvLowPriorityMutexTask, ( signed portCHAR * )"MuLow", configMINIMAL_STACK_SIZE, ( vo
 131              		.loc 1 180 0
 132 004a 0023     		movs	r3, #0
 133 004c 0093     		str	r3, [sp]
 134 004e 0023     		movs	r3, #0
 135 0050 0193     		str	r3, [sp, #4]
 136 0052 0023     		movs	r3, #0
 137 0054 0293     		str	r3, [sp, #8]
 138 0056 0023     		movs	r3, #0
 139 0058 0393     		str	r3, [sp, #12]
 140 005a 1848     		ldr	r0, .L2+16
 141 005c 1849     		ldr	r1, .L2+20
 142 005e 4FF48072 		mov	r2, #256
 143 0062 BB68     		ldr	r3, [r7, #8]
 144 0064 FFF7FEFF 		bl	xTaskGenericCreate
 181:App/Common/Minimal/GenQTest.c **** 	xTaskCreate( prvMediumPriorityMutexTask, ( signed portCHAR * )"MuMed", configMINIMAL_STACK_SIZE, N
 145              		.loc 1 181 0
 146 0068 0223     		movs	r3, #2
 147 006a 0093     		str	r3, [sp]
 148 006c 154B     		ldr	r3, .L2+24
 149 006e 0193     		str	r3, [sp, #4]
 150 0070 0023     		movs	r3, #0
 151 0072 0293     		str	r3, [sp, #8]
 152 0074 0023     		movs	r3, #0
 153 0076 0393     		str	r3, [sp, #12]
 154 0078 1348     		ldr	r0, .L2+28
 155 007a 1449     		ldr	r1, .L2+32
 156 007c 4FF48072 		mov	r2, #256
 157 0080 0023     		movs	r3, #0
 158 0082 FFF7FEFF 		bl	xTaskGenericCreate
 182:App/Common/Minimal/GenQTest.c **** 	xTaskCreate( prvHighPriorityMutexTask, ( signed portCHAR * )"MuHigh", configMINIMAL_STACK_SIZE, ( 
 159              		.loc 1 182 0
 160 0086 0323     		movs	r3, #3
 161 0088 0093     		str	r3, [sp]
 162 008a 114B     		ldr	r3, .L2+36
 163 008c 0193     		str	r3, [sp, #4]
 164 008e 0023     		movs	r3, #0
 165 0090 0293     		str	r3, [sp, #8]
 166 0092 0023     		movs	r3, #0
 167 0094 0393     		str	r3, [sp, #12]
 168 0096 0F48     		ldr	r0, .L2+40
 169 0098 0F49     		ldr	r1, .L2+44
 170 009a 4FF48072 		mov	r2, #256
 171 009e BB68     		ldr	r3, [r7, #8]
 172 00a0 FFF7FEFF 		bl	xTaskGenericCreate
 183:App/Common/Minimal/GenQTest.c **** }
 173              		.loc 1 183 0
 174 00a4 1037     		adds	r7, r7, #16
 175 00a6 BD46     		mov	sp, r7
 176              		@ sp needed
 177 00a8 80BD     		pop	{r7, pc}
 178              	.L3:
 179 00aa 00BF     		.align	2
 180              	.L2:
 181 00ac 00000000 		.word	.LC0
 182 00b0 00000000 		.word	prvSendFrontAndBackTest
 183 00b4 10000000 		.word	.LC1
 184 00b8 18000000 		.word	.LC2
 185 00bc 00000000 		.word	prvLowPriorityMutexTask
 186 00c0 28000000 		.word	.LC3
 187 00c4 00000000 		.word	xMediumPriorityMutexTask
 188 00c8 00000000 		.word	prvMediumPriorityMutexTask
 189 00cc 30000000 		.word	.LC4
 190 00d0 00000000 		.word	xHighPriorityMutexTask
 191 00d4 00000000 		.word	prvHighPriorityMutexTask
 192 00d8 38000000 		.word	.LC5
 193              		.cfi_endproc
 194              	.LFE110:
 196              		.section	.text.prvSendFrontAndBackTest,"ax",%progbits
 197              		.align	2
 198              		.thumb
 199              		.thumb_func
 201              	prvSendFrontAndBackTest:
 202              	.LFB111:
 184:App/Common/Minimal/GenQTest.c **** /*-----------------------------------------------------------*/
 185:App/Common/Minimal/GenQTest.c **** 
 186:App/Common/Minimal/GenQTest.c **** static void prvSendFrontAndBackTest( void *pvParameters )
 187:App/Common/Minimal/GenQTest.c **** {
 203              		.loc 1 187 0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 24
 206              		@ frame_needed = 1, uses_anonymous_args = 0
 207 0000 80B5     		push	{r7, lr}
 208              	.LCFI3:
 209              		.cfi_def_cfa_offset 8
 210              		.cfi_offset 7, -8
 211              		.cfi_offset 14, -4
 212 0002 86B0     		sub	sp, sp, #24
 213              	.LCFI4:
 214              		.cfi_def_cfa_offset 32
 215 0004 00AF     		add	r7, sp, #0
 216              	.LCFI5:
 217              		.cfi_def_cfa_register 7
 218 0006 7860     		str	r0, [r7, #4]
 188:App/Common/Minimal/GenQTest.c **** unsigned portLONG ulData, ulData2;
 189:App/Common/Minimal/GenQTest.c **** xQueueHandle xQueue;
 190:App/Common/Minimal/GenQTest.c **** 
 191:App/Common/Minimal/GenQTest.c **** 	#ifdef USE_STDIO
 192:App/Common/Minimal/GenQTest.c **** 	void vPrintDisplayMessage( const portCHAR * const * ppcMessageToSend );
 193:App/Common/Minimal/GenQTest.c **** 	
 194:App/Common/Minimal/GenQTest.c **** 		const portCHAR * const pcTaskStartMsg = "Queue SendToFront/SendToBack/Peek test started.\r\n";
 195:App/Common/Minimal/GenQTest.c **** 
 196:App/Common/Minimal/GenQTest.c **** 		/* Queue a message for printing to say the task has started. */
 197:App/Common/Minimal/GenQTest.c **** 		vPrintDisplayMessage( &pcTaskStartMsg );
 198:App/Common/Minimal/GenQTest.c **** 	#endif
 199:App/Common/Minimal/GenQTest.c **** 
 200:App/Common/Minimal/GenQTest.c **** 	xQueue = ( xQueueHandle ) pvParameters;
 219              		.loc 1 200 0
 220 0008 7B68     		ldr	r3, [r7, #4]
 221 000a 7B61     		str	r3, [r7, #20]
 222              	.L40:
 201:App/Common/Minimal/GenQTest.c **** 
 202:App/Common/Minimal/GenQTest.c **** 	for( ;; )
 203:App/Common/Minimal/GenQTest.c **** 	{
 204:App/Common/Minimal/GenQTest.c **** 		/* The queue is empty, so sending an item to the back of the queue
 205:App/Common/Minimal/GenQTest.c **** 		should have the same efect as sending it to the front of the queue.
 206:App/Common/Minimal/GenQTest.c **** 
 207:App/Common/Minimal/GenQTest.c **** 		First send to the front and check everything is as expected. */
 208:App/Common/Minimal/GenQTest.c **** 		xQueueSendToFront( xQueue, ( void * ) &ulLoopCounter, genqNO_BLOCK );
 223              		.loc 1 208 0
 224 000c 7869     		ldr	r0, [r7, #20]
 225 000e 8C49     		ldr	r1, .L41
 226 0010 0022     		movs	r2, #0
 227 0012 0123     		movs	r3, #1
 228 0014 FFF7FEFF 		bl	xQueueGenericSend
 209:App/Common/Minimal/GenQTest.c **** 
 210:App/Common/Minimal/GenQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 229              		.loc 1 210 0
 230 0018 7869     		ldr	r0, [r7, #20]
 231 001a FFF7FEFF 		bl	uxQueueMessagesWaiting
 232 001e 0346     		mov	r3, r0
 233 0020 012B     		cmp	r3, #1
 234 0022 02D0     		beq	.L5
 211:App/Common/Minimal/GenQTest.c **** 		{
 212:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 235              		.loc 1 212 0
 236 0024 874B     		ldr	r3, .L41+4
 237 0026 0122     		movs	r2, #1
 238 0028 1A60     		str	r2, [r3]
 239              	.L5:
 213:App/Common/Minimal/GenQTest.c **** 		}
 214:App/Common/Minimal/GenQTest.c **** 
 215:App/Common/Minimal/GenQTest.c **** 		if( xQueueReceive( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != pdPASS )
 240              		.loc 1 215 0
 241 002a 07F11003 		add	r3, r7, #16
 242 002e 7869     		ldr	r0, [r7, #20]
 243 0030 1946     		mov	r1, r3
 244 0032 0022     		movs	r2, #0
 245 0034 0023     		movs	r3, #0
 246 0036 FFF7FEFF 		bl	xQueueGenericReceive
 247 003a 0346     		mov	r3, r0
 248 003c 012B     		cmp	r3, #1
 249 003e 02D0     		beq	.L6
 216:App/Common/Minimal/GenQTest.c **** 		{
 217:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 250              		.loc 1 217 0
 251 0040 804B     		ldr	r3, .L41+4
 252 0042 0122     		movs	r2, #1
 253 0044 1A60     		str	r2, [r3]
 254              	.L6:
 218:App/Common/Minimal/GenQTest.c **** 		}
 219:App/Common/Minimal/GenQTest.c **** 
 220:App/Common/Minimal/GenQTest.c **** 		/* The data we sent to the queue should equal the data we just received
 221:App/Common/Minimal/GenQTest.c **** 		from the queue. */
 222:App/Common/Minimal/GenQTest.c **** 		if( ulLoopCounter != ulData )
 255              		.loc 1 222 0
 256 0046 7E4B     		ldr	r3, .L41
 257 0048 1A68     		ldr	r2, [r3]
 258 004a 3B69     		ldr	r3, [r7, #16]
 259 004c 9A42     		cmp	r2, r3
 260 004e 02D0     		beq	.L7
 223:App/Common/Minimal/GenQTest.c **** 		{
 224:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 261              		.loc 1 224 0
 262 0050 7C4B     		ldr	r3, .L41+4
 263 0052 0122     		movs	r2, #1
 264 0054 1A60     		str	r2, [r3]
 265              	.L7:
 225:App/Common/Minimal/GenQTest.c **** 		}
 226:App/Common/Minimal/GenQTest.c **** 
 227:App/Common/Minimal/GenQTest.c **** 		/* Then do the same, sending the data to the back, checking everything
 228:App/Common/Minimal/GenQTest.c **** 		is as expected. */
 229:App/Common/Minimal/GenQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 266              		.loc 1 229 0
 267 0056 7869     		ldr	r0, [r7, #20]
 268 0058 FFF7FEFF 		bl	uxQueueMessagesWaiting
 269 005c 0346     		mov	r3, r0
 270 005e 002B     		cmp	r3, #0
 271 0060 02D0     		beq	.L8
 230:App/Common/Minimal/GenQTest.c **** 		{
 231:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 272              		.loc 1 231 0
 273 0062 784B     		ldr	r3, .L41+4
 274 0064 0122     		movs	r2, #1
 275 0066 1A60     		str	r2, [r3]
 276              	.L8:
 232:App/Common/Minimal/GenQTest.c **** 		}
 233:App/Common/Minimal/GenQTest.c **** 
 234:App/Common/Minimal/GenQTest.c **** 		xQueueSendToBack( xQueue, ( void * ) &ulLoopCounter, genqNO_BLOCK );
 277              		.loc 1 234 0
 278 0068 7869     		ldr	r0, [r7, #20]
 279 006a 7549     		ldr	r1, .L41
 280 006c 0022     		movs	r2, #0
 281 006e 0023     		movs	r3, #0
 282 0070 FFF7FEFF 		bl	xQueueGenericSend
 235:App/Common/Minimal/GenQTest.c **** 
 236:App/Common/Minimal/GenQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 1 )
 283              		.loc 1 236 0
 284 0074 7869     		ldr	r0, [r7, #20]
 285 0076 FFF7FEFF 		bl	uxQueueMessagesWaiting
 286 007a 0346     		mov	r3, r0
 287 007c 012B     		cmp	r3, #1
 288 007e 02D0     		beq	.L9
 237:App/Common/Minimal/GenQTest.c **** 		{
 238:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 289              		.loc 1 238 0
 290 0080 704B     		ldr	r3, .L41+4
 291 0082 0122     		movs	r2, #1
 292 0084 1A60     		str	r2, [r3]
 293              	.L9:
 239:App/Common/Minimal/GenQTest.c **** 		}
 240:App/Common/Minimal/GenQTest.c **** 
 241:App/Common/Minimal/GenQTest.c **** 		if( xQueueReceive( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != pdPASS )
 294              		.loc 1 241 0
 295 0086 07F11003 		add	r3, r7, #16
 296 008a 7869     		ldr	r0, [r7, #20]
 297 008c 1946     		mov	r1, r3
 298 008e 0022     		movs	r2, #0
 299 0090 0023     		movs	r3, #0
 300 0092 FFF7FEFF 		bl	xQueueGenericReceive
 301 0096 0346     		mov	r3, r0
 302 0098 012B     		cmp	r3, #1
 303 009a 02D0     		beq	.L10
 242:App/Common/Minimal/GenQTest.c **** 		{
 243:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 304              		.loc 1 243 0
 305 009c 694B     		ldr	r3, .L41+4
 306 009e 0122     		movs	r2, #1
 307 00a0 1A60     		str	r2, [r3]
 308              	.L10:
 244:App/Common/Minimal/GenQTest.c **** 		}
 245:App/Common/Minimal/GenQTest.c **** 
 246:App/Common/Minimal/GenQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 309              		.loc 1 246 0
 310 00a2 7869     		ldr	r0, [r7, #20]
 311 00a4 FFF7FEFF 		bl	uxQueueMessagesWaiting
 312 00a8 0346     		mov	r3, r0
 313 00aa 002B     		cmp	r3, #0
 314 00ac 02D0     		beq	.L11
 247:App/Common/Minimal/GenQTest.c **** 		{
 248:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 315              		.loc 1 248 0
 316 00ae 654B     		ldr	r3, .L41+4
 317 00b0 0122     		movs	r2, #1
 318 00b2 1A60     		str	r2, [r3]
 319              	.L11:
 249:App/Common/Minimal/GenQTest.c **** 		}
 250:App/Common/Minimal/GenQTest.c **** 
 251:App/Common/Minimal/GenQTest.c **** 		/* The data we sent to the queue should equal the data we just received
 252:App/Common/Minimal/GenQTest.c **** 		from the queue. */
 253:App/Common/Minimal/GenQTest.c **** 		if( ulLoopCounter != ulData )
 320              		.loc 1 253 0
 321 00b4 624B     		ldr	r3, .L41
 322 00b6 1A68     		ldr	r2, [r3]
 323 00b8 3B69     		ldr	r3, [r7, #16]
 324 00ba 9A42     		cmp	r2, r3
 325 00bc 02D0     		beq	.L12
 254:App/Common/Minimal/GenQTest.c **** 		{
 255:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 326              		.loc 1 255 0
 327 00be 614B     		ldr	r3, .L41+4
 328 00c0 0122     		movs	r2, #1
 329 00c2 1A60     		str	r2, [r3]
 330              	.L12:
 256:App/Common/Minimal/GenQTest.c **** 		}
 257:App/Common/Minimal/GenQTest.c **** 
 258:App/Common/Minimal/GenQTest.c **** 		#if configUSE_PREEMPTION == 0
 259:App/Common/Minimal/GenQTest.c **** 			taskYIELD();
 260:App/Common/Minimal/GenQTest.c **** 		#endif
 261:App/Common/Minimal/GenQTest.c **** 
 262:App/Common/Minimal/GenQTest.c **** 
 263:App/Common/Minimal/GenQTest.c **** 
 264:App/Common/Minimal/GenQTest.c **** 		/* Place 2, 3, 4 into the queue, adding items to the back of the queue. */
 265:App/Common/Minimal/GenQTest.c **** 		for( ulData = 2; ulData < 5; ulData++ )
 331              		.loc 1 265 0
 332 00c4 0223     		movs	r3, #2
 333 00c6 3B61     		str	r3, [r7, #16]
 334 00c8 0AE0     		b	.L13
 335              	.L14:
 266:App/Common/Minimal/GenQTest.c **** 		{
 267:App/Common/Minimal/GenQTest.c **** 			xQueueSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK );
 336              		.loc 1 267 0 discriminator 2
 337 00ca 07F11003 		add	r3, r7, #16
 338 00ce 7869     		ldr	r0, [r7, #20]
 339 00d0 1946     		mov	r1, r3
 340 00d2 0022     		movs	r2, #0
 341 00d4 0023     		movs	r3, #0
 342 00d6 FFF7FEFF 		bl	xQueueGenericSend
 265:App/Common/Minimal/GenQTest.c **** 		for( ulData = 2; ulData < 5; ulData++ )
 343              		.loc 1 265 0 discriminator 2
 344 00da 3B69     		ldr	r3, [r7, #16]
 345 00dc 0133     		adds	r3, r3, #1
 346 00de 3B61     		str	r3, [r7, #16]
 347              	.L13:
 265:App/Common/Minimal/GenQTest.c **** 		for( ulData = 2; ulData < 5; ulData++ )
 348              		.loc 1 265 0 is_stmt 0 discriminator 1
 349 00e0 3B69     		ldr	r3, [r7, #16]
 350 00e2 042B     		cmp	r3, #4
 351 00e4 F1D9     		bls	.L14
 268:App/Common/Minimal/GenQTest.c **** 		}
 269:App/Common/Minimal/GenQTest.c **** 
 270:App/Common/Minimal/GenQTest.c **** 		/* Now the order in the queue should be 2, 3, 4, with 2 being the first
 271:App/Common/Minimal/GenQTest.c **** 		thing to be read out.  Now add 1 then 0 to the front of the queue. */
 272:App/Common/Minimal/GenQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 3 )
 352              		.loc 1 272 0 is_stmt 1
 353 00e6 7869     		ldr	r0, [r7, #20]
 354 00e8 FFF7FEFF 		bl	uxQueueMessagesWaiting
 355 00ec 0346     		mov	r3, r0
 356 00ee 032B     		cmp	r3, #3
 357 00f0 02D0     		beq	.L15
 273:App/Common/Minimal/GenQTest.c **** 		{
 274:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 358              		.loc 1 274 0
 359 00f2 544B     		ldr	r3, .L41+4
 360 00f4 0122     		movs	r2, #1
 361 00f6 1A60     		str	r2, [r3]
 362              	.L15:
 275:App/Common/Minimal/GenQTest.c **** 		}
 276:App/Common/Minimal/GenQTest.c **** 		ulData = 1;
 363              		.loc 1 276 0
 364 00f8 0123     		movs	r3, #1
 365 00fa 3B61     		str	r3, [r7, #16]
 277:App/Common/Minimal/GenQTest.c **** 		xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK );
 366              		.loc 1 277 0
 367 00fc 07F11003 		add	r3, r7, #16
 368 0100 7869     		ldr	r0, [r7, #20]
 369 0102 1946     		mov	r1, r3
 370 0104 0022     		movs	r2, #0
 371 0106 0123     		movs	r3, #1
 372 0108 FFF7FEFF 		bl	xQueueGenericSend
 278:App/Common/Minimal/GenQTest.c **** 		ulData = 0;
 373              		.loc 1 278 0
 374 010c 0023     		movs	r3, #0
 375 010e 3B61     		str	r3, [r7, #16]
 279:App/Common/Minimal/GenQTest.c **** 		xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK );
 376              		.loc 1 279 0
 377 0110 07F11003 		add	r3, r7, #16
 378 0114 7869     		ldr	r0, [r7, #20]
 379 0116 1946     		mov	r1, r3
 380 0118 0022     		movs	r2, #0
 381 011a 0123     		movs	r3, #1
 382 011c FFF7FEFF 		bl	xQueueGenericSend
 280:App/Common/Minimal/GenQTest.c **** 
 281:App/Common/Minimal/GenQTest.c **** 		/* Now the queue should be full, and when we read the data out we
 282:App/Common/Minimal/GenQTest.c **** 		should receive 0, 1, 2, 3, 4. */
 283:App/Common/Minimal/GenQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 5 )
 383              		.loc 1 283 0
 384 0120 7869     		ldr	r0, [r7, #20]
 385 0122 FFF7FEFF 		bl	uxQueueMessagesWaiting
 386 0126 0346     		mov	r3, r0
 387 0128 052B     		cmp	r3, #5
 388 012a 02D0     		beq	.L16
 284:App/Common/Minimal/GenQTest.c **** 		{
 285:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 389              		.loc 1 285 0
 390 012c 454B     		ldr	r3, .L41+4
 391 012e 0122     		movs	r2, #1
 392 0130 1A60     		str	r2, [r3]
 393              	.L16:
 286:App/Common/Minimal/GenQTest.c **** 		}
 287:App/Common/Minimal/GenQTest.c **** 
 288:App/Common/Minimal/GenQTest.c **** 		if( xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
 394              		.loc 1 288 0
 395 0132 07F11003 		add	r3, r7, #16
 396 0136 7869     		ldr	r0, [r7, #20]
 397 0138 1946     		mov	r1, r3
 398 013a 0022     		movs	r2, #0
 399 013c 0123     		movs	r3, #1
 400 013e FFF7FEFF 		bl	xQueueGenericSend
 401 0142 0346     		mov	r3, r0
 402 0144 002B     		cmp	r3, #0
 403 0146 02D0     		beq	.L17
 289:App/Common/Minimal/GenQTest.c **** 		{
 290:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 404              		.loc 1 290 0
 405 0148 3E4B     		ldr	r3, .L41+4
 406 014a 0122     		movs	r2, #1
 407 014c 1A60     		str	r2, [r3]
 408              	.L17:
 291:App/Common/Minimal/GenQTest.c **** 		}
 292:App/Common/Minimal/GenQTest.c **** 
 293:App/Common/Minimal/GenQTest.c **** 		if( xQueueSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
 409              		.loc 1 293 0
 410 014e 07F11003 		add	r3, r7, #16
 411 0152 7869     		ldr	r0, [r7, #20]
 412 0154 1946     		mov	r1, r3
 413 0156 0022     		movs	r2, #0
 414 0158 0023     		movs	r3, #0
 415 015a FFF7FEFF 		bl	xQueueGenericSend
 416 015e 0346     		mov	r3, r0
 417 0160 002B     		cmp	r3, #0
 418 0162 02D0     		beq	.L18
 294:App/Common/Minimal/GenQTest.c **** 		{
 295:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 419              		.loc 1 295 0
 420 0164 374B     		ldr	r3, .L41+4
 421 0166 0122     		movs	r2, #1
 422 0168 1A60     		str	r2, [r3]
 423              	.L18:
 296:App/Common/Minimal/GenQTest.c **** 		}
 297:App/Common/Minimal/GenQTest.c **** 
 298:App/Common/Minimal/GenQTest.c **** 		#if configUSE_PREEMPTION == 0
 299:App/Common/Minimal/GenQTest.c **** 			taskYIELD();
 300:App/Common/Minimal/GenQTest.c **** 		#endif
 301:App/Common/Minimal/GenQTest.c **** 
 302:App/Common/Minimal/GenQTest.c **** 		/* Check the data we read out is in the expected order. */
 303:App/Common/Minimal/GenQTest.c **** 		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
 424              		.loc 1 303 0
 425 016a 0023     		movs	r3, #0
 426 016c 3B61     		str	r3, [r7, #16]
 427 016e 2FE0     		b	.L19
 428              	.L24:
 304:App/Common/Minimal/GenQTest.c **** 		{
 305:App/Common/Minimal/GenQTest.c **** 			/* Try peeking the data first. */
 306:App/Common/Minimal/GenQTest.c **** 			if( xQueuePeek( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
 429              		.loc 1 306 0
 430 0170 07F10C03 		add	r3, r7, #12
 431 0174 7869     		ldr	r0, [r7, #20]
 432 0176 1946     		mov	r1, r3
 433 0178 0022     		movs	r2, #0
 434 017a 0123     		movs	r3, #1
 435 017c FFF7FEFF 		bl	xQueueGenericReceive
 436 0180 0346     		mov	r3, r0
 437 0182 012B     		cmp	r3, #1
 438 0184 02D0     		beq	.L20
 307:App/Common/Minimal/GenQTest.c **** 			{
 308:App/Common/Minimal/GenQTest.c **** 				xErrorDetected = pdTRUE;
 439              		.loc 1 308 0
 440 0186 2F4B     		ldr	r3, .L41+4
 441 0188 0122     		movs	r2, #1
 442 018a 1A60     		str	r2, [r3]
 443              	.L20:
 309:App/Common/Minimal/GenQTest.c **** 			}
 310:App/Common/Minimal/GenQTest.c **** 
 311:App/Common/Minimal/GenQTest.c **** 			if( ulData != ulData2 )
 444              		.loc 1 311 0
 445 018c 3A69     		ldr	r2, [r7, #16]
 446 018e FB68     		ldr	r3, [r7, #12]
 447 0190 9A42     		cmp	r2, r3
 448 0192 02D0     		beq	.L21
 312:App/Common/Minimal/GenQTest.c **** 			{
 313:App/Common/Minimal/GenQTest.c **** 				xErrorDetected = pdTRUE;
 449              		.loc 1 313 0
 450 0194 2B4B     		ldr	r3, .L41+4
 451 0196 0122     		movs	r2, #1
 452 0198 1A60     		str	r2, [r3]
 453              	.L21:
 314:App/Common/Minimal/GenQTest.c **** 			}
 315:App/Common/Minimal/GenQTest.c **** 			
 316:App/Common/Minimal/GenQTest.c **** 
 317:App/Common/Minimal/GenQTest.c **** 			/* Now try receiving the data for real.  The value should be the
 318:App/Common/Minimal/GenQTest.c **** 			same.  Clobber the value first so we know we really received it. */
 319:App/Common/Minimal/GenQTest.c **** 			ulData2 = ~ulData2;
 454              		.loc 1 319 0
 455 019a FB68     		ldr	r3, [r7, #12]
 456 019c DB43     		mvns	r3, r3
 457 019e FB60     		str	r3, [r7, #12]
 320:App/Common/Minimal/GenQTest.c **** 			if( xQueueReceive( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
 458              		.loc 1 320 0
 459 01a0 07F10C03 		add	r3, r7, #12
 460 01a4 7869     		ldr	r0, [r7, #20]
 461 01a6 1946     		mov	r1, r3
 462 01a8 0022     		movs	r2, #0
 463 01aa 0023     		movs	r3, #0
 464 01ac FFF7FEFF 		bl	xQueueGenericReceive
 465 01b0 0346     		mov	r3, r0
 466 01b2 012B     		cmp	r3, #1
 467 01b4 02D0     		beq	.L22
 321:App/Common/Minimal/GenQTest.c **** 			{
 322:App/Common/Minimal/GenQTest.c **** 				xErrorDetected = pdTRUE;
 468              		.loc 1 322 0
 469 01b6 234B     		ldr	r3, .L41+4
 470 01b8 0122     		movs	r2, #1
 471 01ba 1A60     		str	r2, [r3]
 472              	.L22:
 323:App/Common/Minimal/GenQTest.c **** 			}
 324:App/Common/Minimal/GenQTest.c **** 
 325:App/Common/Minimal/GenQTest.c **** 			if( ulData != ulData2 )
 473              		.loc 1 325 0
 474 01bc 3A69     		ldr	r2, [r7, #16]
 475 01be FB68     		ldr	r3, [r7, #12]
 476 01c0 9A42     		cmp	r2, r3
 477 01c2 02D0     		beq	.L23
 326:App/Common/Minimal/GenQTest.c **** 			{
 327:App/Common/Minimal/GenQTest.c **** 				xErrorDetected = pdTRUE;
 478              		.loc 1 327 0
 479 01c4 1F4B     		ldr	r3, .L41+4
 480 01c6 0122     		movs	r2, #1
 481 01c8 1A60     		str	r2, [r3]
 482              	.L23:
 303:App/Common/Minimal/GenQTest.c **** 		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
 483              		.loc 1 303 0
 484 01ca 3B69     		ldr	r3, [r7, #16]
 485 01cc 0133     		adds	r3, r3, #1
 486 01ce 3B61     		str	r3, [r7, #16]
 487              	.L19:
 303:App/Common/Minimal/GenQTest.c **** 		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
 488              		.loc 1 303 0 is_stmt 0 discriminator 1
 489 01d0 3B69     		ldr	r3, [r7, #16]
 490 01d2 042B     		cmp	r3, #4
 491 01d4 CCD9     		bls	.L24
 328:App/Common/Minimal/GenQTest.c **** 			}
 329:App/Common/Minimal/GenQTest.c **** 		}
 330:App/Common/Minimal/GenQTest.c **** 
 331:App/Common/Minimal/GenQTest.c **** 		/* The queue should now be empty again. */
 332:App/Common/Minimal/GenQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 492              		.loc 1 332 0 is_stmt 1
 493 01d6 7869     		ldr	r0, [r7, #20]
 494 01d8 FFF7FEFF 		bl	uxQueueMessagesWaiting
 495 01dc 0346     		mov	r3, r0
 496 01de 002B     		cmp	r3, #0
 497 01e0 02D0     		beq	.L25
 333:App/Common/Minimal/GenQTest.c **** 		{
 334:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 498              		.loc 1 334 0
 499 01e2 184B     		ldr	r3, .L41+4
 500 01e4 0122     		movs	r2, #1
 501 01e6 1A60     		str	r2, [r3]
 502              	.L25:
 335:App/Common/Minimal/GenQTest.c **** 		}
 336:App/Common/Minimal/GenQTest.c **** 
 337:App/Common/Minimal/GenQTest.c **** 		#if configUSE_PREEMPTION == 0
 338:App/Common/Minimal/GenQTest.c **** 			taskYIELD();
 339:App/Common/Minimal/GenQTest.c **** 		#endif
 340:App/Common/Minimal/GenQTest.c **** 
 341:App/Common/Minimal/GenQTest.c **** 
 342:App/Common/Minimal/GenQTest.c **** 		/* Our queue is empty once more, add 10, 11 to the back. */
 343:App/Common/Minimal/GenQTest.c **** 		ulData = 10;
 503              		.loc 1 343 0
 504 01e8 0A23     		movs	r3, #10
 505 01ea 3B61     		str	r3, [r7, #16]
 344:App/Common/Minimal/GenQTest.c **** 		if( xQueueSend( xQueue, &ulData, genqNO_BLOCK ) != pdPASS )
 506              		.loc 1 344 0
 507 01ec 07F11003 		add	r3, r7, #16
 508 01f0 7869     		ldr	r0, [r7, #20]
 509 01f2 1946     		mov	r1, r3
 510 01f4 0022     		movs	r2, #0
 511 01f6 0023     		movs	r3, #0
 512 01f8 FFF7FEFF 		bl	xQueueGenericSend
 513 01fc 0346     		mov	r3, r0
 514 01fe 012B     		cmp	r3, #1
 515 0200 02D0     		beq	.L26
 345:App/Common/Minimal/GenQTest.c **** 		{
 346:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 516              		.loc 1 346 0
 517 0202 104B     		ldr	r3, .L41+4
 518 0204 0122     		movs	r2, #1
 519 0206 1A60     		str	r2, [r3]
 520              	.L26:
 347:App/Common/Minimal/GenQTest.c **** 		}
 348:App/Common/Minimal/GenQTest.c **** 		ulData = 11;
 521              		.loc 1 348 0
 522 0208 0B23     		movs	r3, #11
 523 020a 3B61     		str	r3, [r7, #16]
 349:App/Common/Minimal/GenQTest.c **** 		if( xQueueSend( xQueue, &ulData, genqNO_BLOCK ) != pdPASS )
 524              		.loc 1 349 0
 525 020c 07F11003 		add	r3, r7, #16
 526 0210 7869     		ldr	r0, [r7, #20]
 527 0212 1946     		mov	r1, r3
 528 0214 0022     		movs	r2, #0
 529 0216 0023     		movs	r3, #0
 530 0218 FFF7FEFF 		bl	xQueueGenericSend
 531 021c 0346     		mov	r3, r0
 532 021e 012B     		cmp	r3, #1
 533 0220 02D0     		beq	.L27
 350:App/Common/Minimal/GenQTest.c **** 		{
 351:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 534              		.loc 1 351 0
 535 0222 084B     		ldr	r3, .L41+4
 536 0224 0122     		movs	r2, #1
 537 0226 1A60     		str	r2, [r3]
 538              	.L27:
 352:App/Common/Minimal/GenQTest.c **** 		}
 353:App/Common/Minimal/GenQTest.c **** 
 354:App/Common/Minimal/GenQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 2 )
 539              		.loc 1 354 0
 540 0228 7869     		ldr	r0, [r7, #20]
 541 022a FFF7FEFF 		bl	uxQueueMessagesWaiting
 542 022e 0346     		mov	r3, r0
 543 0230 022B     		cmp	r3, #2
 544 0232 02D0     		beq	.L28
 355:App/Common/Minimal/GenQTest.c **** 		{
 356:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 545              		.loc 1 356 0
 546 0234 034B     		ldr	r3, .L41+4
 547 0236 0122     		movs	r2, #1
 548 0238 1A60     		str	r2, [r3]
 549              	.L28:
 357:App/Common/Minimal/GenQTest.c **** 		}
 358:App/Common/Minimal/GenQTest.c **** 
 359:App/Common/Minimal/GenQTest.c **** 		/* Now we should have 10, 11 in the queue.  Add 7, 8, 9 to the
 360:App/Common/Minimal/GenQTest.c **** 		front. */
 361:App/Common/Minimal/GenQTest.c **** 		for( ulData = 9; ulData >= 7; ulData-- )
 550              		.loc 1 361 0
 551 023a 0923     		movs	r3, #9
 552 023c 3B61     		str	r3, [r7, #16]
 553 023e 14E0     		b	.L29
 554              	.L42:
 555              		.align	2
 556              	.L41:
 557 0240 00000000 		.word	ulLoopCounter
 558 0244 00000000 		.word	xErrorDetected
 559              	.L31:
 362:App/Common/Minimal/GenQTest.c **** 		{
 363:App/Common/Minimal/GenQTest.c **** 			if( xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != pdPASS )
 560              		.loc 1 363 0
 561 0248 07F11003 		add	r3, r7, #16
 562 024c 7869     		ldr	r0, [r7, #20]
 563 024e 1946     		mov	r1, r3
 564 0250 0022     		movs	r2, #0
 565 0252 0123     		movs	r3, #1
 566 0254 FFF7FEFF 		bl	xQueueGenericSend
 567 0258 0346     		mov	r3, r0
 568 025a 012B     		cmp	r3, #1
 569 025c 02D0     		beq	.L30
 364:App/Common/Minimal/GenQTest.c **** 			{
 365:App/Common/Minimal/GenQTest.c **** 				xErrorDetected = pdTRUE;
 570              		.loc 1 365 0
 571 025e 2D4B     		ldr	r3, .L43
 572 0260 0122     		movs	r2, #1
 573 0262 1A60     		str	r2, [r3]
 574              	.L30:
 361:App/Common/Minimal/GenQTest.c **** 		for( ulData = 9; ulData >= 7; ulData-- )
 575              		.loc 1 361 0
 576 0264 3B69     		ldr	r3, [r7, #16]
 577 0266 013B     		subs	r3, r3, #1
 578 0268 3B61     		str	r3, [r7, #16]
 579              	.L29:
 361:App/Common/Minimal/GenQTest.c **** 		for( ulData = 9; ulData >= 7; ulData-- )
 580              		.loc 1 361 0 is_stmt 0 discriminator 1
 581 026a 3B69     		ldr	r3, [r7, #16]
 582 026c 062B     		cmp	r3, #6
 583 026e EBD8     		bhi	.L31
 366:App/Common/Minimal/GenQTest.c **** 			}
 367:App/Common/Minimal/GenQTest.c **** 		}
 368:App/Common/Minimal/GenQTest.c **** 
 369:App/Common/Minimal/GenQTest.c **** 		/* Now check that the queue is full, and that receiving data provides
 370:App/Common/Minimal/GenQTest.c **** 		the expected sequence of 7, 8, 9, 10, 11. */
 371:App/Common/Minimal/GenQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 5 )
 584              		.loc 1 371 0 is_stmt 1
 585 0270 7869     		ldr	r0, [r7, #20]
 586 0272 FFF7FEFF 		bl	uxQueueMessagesWaiting
 587 0276 0346     		mov	r3, r0
 588 0278 052B     		cmp	r3, #5
 589 027a 02D0     		beq	.L32
 372:App/Common/Minimal/GenQTest.c **** 		{
 373:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 590              		.loc 1 373 0
 591 027c 254B     		ldr	r3, .L43
 592 027e 0122     		movs	r2, #1
 593 0280 1A60     		str	r2, [r3]
 594              	.L32:
 374:App/Common/Minimal/GenQTest.c **** 		}
 375:App/Common/Minimal/GenQTest.c **** 
 376:App/Common/Minimal/GenQTest.c **** 		if( xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
 595              		.loc 1 376 0
 596 0282 07F11003 		add	r3, r7, #16
 597 0286 7869     		ldr	r0, [r7, #20]
 598 0288 1946     		mov	r1, r3
 599 028a 0022     		movs	r2, #0
 600 028c 0123     		movs	r3, #1
 601 028e FFF7FEFF 		bl	xQueueGenericSend
 602 0292 0346     		mov	r3, r0
 603 0294 002B     		cmp	r3, #0
 604 0296 02D0     		beq	.L33
 377:App/Common/Minimal/GenQTest.c **** 		{
 378:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 605              		.loc 1 378 0
 606 0298 1E4B     		ldr	r3, .L43
 607 029a 0122     		movs	r2, #1
 608 029c 1A60     		str	r2, [r3]
 609              	.L33:
 379:App/Common/Minimal/GenQTest.c **** 		}
 380:App/Common/Minimal/GenQTest.c **** 
 381:App/Common/Minimal/GenQTest.c **** 		if( xQueueSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
 610              		.loc 1 381 0
 611 029e 07F11003 		add	r3, r7, #16
 612 02a2 7869     		ldr	r0, [r7, #20]
 613 02a4 1946     		mov	r1, r3
 614 02a6 0022     		movs	r2, #0
 615 02a8 0023     		movs	r3, #0
 616 02aa FFF7FEFF 		bl	xQueueGenericSend
 617 02ae 0346     		mov	r3, r0
 618 02b0 002B     		cmp	r3, #0
 619 02b2 02D0     		beq	.L34
 382:App/Common/Minimal/GenQTest.c **** 		{
 383:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 620              		.loc 1 383 0
 621 02b4 174B     		ldr	r3, .L43
 622 02b6 0122     		movs	r2, #1
 623 02b8 1A60     		str	r2, [r3]
 624              	.L34:
 384:App/Common/Minimal/GenQTest.c **** 		}
 385:App/Common/Minimal/GenQTest.c **** 
 386:App/Common/Minimal/GenQTest.c **** 		#if configUSE_PREEMPTION == 0
 387:App/Common/Minimal/GenQTest.c **** 			taskYIELD();
 388:App/Common/Minimal/GenQTest.c **** 		#endif
 389:App/Common/Minimal/GenQTest.c **** 
 390:App/Common/Minimal/GenQTest.c **** 		/* Check the data we read out is in the expected order. */
 391:App/Common/Minimal/GenQTest.c **** 		for( ulData = 7; ulData < ( 7 + genqQUEUE_LENGTH ); ulData++ )
 625              		.loc 1 391 0
 626 02ba 0723     		movs	r3, #7
 627 02bc 3B61     		str	r3, [r7, #16]
 628 02be 17E0     		b	.L35
 629              	.L38:
 392:App/Common/Minimal/GenQTest.c **** 		{
 393:App/Common/Minimal/GenQTest.c **** 			if( xQueueReceive( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
 630              		.loc 1 393 0
 631 02c0 07F10C03 		add	r3, r7, #12
 632 02c4 7869     		ldr	r0, [r7, #20]
 633 02c6 1946     		mov	r1, r3
 634 02c8 0022     		movs	r2, #0
 635 02ca 0023     		movs	r3, #0
 636 02cc FFF7FEFF 		bl	xQueueGenericReceive
 637 02d0 0346     		mov	r3, r0
 638 02d2 012B     		cmp	r3, #1
 639 02d4 02D0     		beq	.L36
 394:App/Common/Minimal/GenQTest.c **** 			{
 395:App/Common/Minimal/GenQTest.c **** 				xErrorDetected = pdTRUE;
 640              		.loc 1 395 0
 641 02d6 0F4B     		ldr	r3, .L43
 642 02d8 0122     		movs	r2, #1
 643 02da 1A60     		str	r2, [r3]
 644              	.L36:
 396:App/Common/Minimal/GenQTest.c **** 			}
 397:App/Common/Minimal/GenQTest.c **** 
 398:App/Common/Minimal/GenQTest.c **** 			if( ulData != ulData2 )
 645              		.loc 1 398 0
 646 02dc 3A69     		ldr	r2, [r7, #16]
 647 02de FB68     		ldr	r3, [r7, #12]
 648 02e0 9A42     		cmp	r2, r3
 649 02e2 02D0     		beq	.L37
 399:App/Common/Minimal/GenQTest.c **** 			{
 400:App/Common/Minimal/GenQTest.c **** 				xErrorDetected = pdTRUE;
 650              		.loc 1 400 0
 651 02e4 0B4B     		ldr	r3, .L43
 652 02e6 0122     		movs	r2, #1
 653 02e8 1A60     		str	r2, [r3]
 654              	.L37:
 391:App/Common/Minimal/GenQTest.c **** 		for( ulData = 7; ulData < ( 7 + genqQUEUE_LENGTH ); ulData++ )
 655              		.loc 1 391 0
 656 02ea 3B69     		ldr	r3, [r7, #16]
 657 02ec 0133     		adds	r3, r3, #1
 658 02ee 3B61     		str	r3, [r7, #16]
 659              	.L35:
 391:App/Common/Minimal/GenQTest.c **** 		for( ulData = 7; ulData < ( 7 + genqQUEUE_LENGTH ); ulData++ )
 660              		.loc 1 391 0 is_stmt 0 discriminator 1
 661 02f0 3B69     		ldr	r3, [r7, #16]
 662 02f2 0B2B     		cmp	r3, #11
 663 02f4 E4D9     		bls	.L38
 401:App/Common/Minimal/GenQTest.c **** 			}
 402:App/Common/Minimal/GenQTest.c **** 		}
 403:App/Common/Minimal/GenQTest.c **** 
 404:App/Common/Minimal/GenQTest.c **** 		if( uxQueueMessagesWaiting( xQueue ) != 0 )
 664              		.loc 1 404 0 is_stmt 1
 665 02f6 7869     		ldr	r0, [r7, #20]
 666 02f8 FFF7FEFF 		bl	uxQueueMessagesWaiting
 667 02fc 0346     		mov	r3, r0
 668 02fe 002B     		cmp	r3, #0
 669 0300 02D0     		beq	.L39
 405:App/Common/Minimal/GenQTest.c **** 		{
 406:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 670              		.loc 1 406 0
 671 0302 044B     		ldr	r3, .L43
 672 0304 0122     		movs	r2, #1
 673 0306 1A60     		str	r2, [r3]
 674              	.L39:
 407:App/Common/Minimal/GenQTest.c **** 		}
 408:App/Common/Minimal/GenQTest.c **** 
 409:App/Common/Minimal/GenQTest.c **** 		ulLoopCounter++;
 675              		.loc 1 409 0
 676 0308 034B     		ldr	r3, .L43+4
 677 030a 1B68     		ldr	r3, [r3]
 678 030c 5A1C     		adds	r2, r3, #1
 679 030e 024B     		ldr	r3, .L43+4
 680 0310 1A60     		str	r2, [r3]
 410:App/Common/Minimal/GenQTest.c **** 	}
 681              		.loc 1 410 0
 682 0312 7BE6     		b	.L40
 683              	.L44:
 684              		.align	2
 685              	.L43:
 686 0314 00000000 		.word	xErrorDetected
 687 0318 00000000 		.word	ulLoopCounter
 688              		.cfi_endproc
 689              	.LFE111:
 691              		.section	.text.prvLowPriorityMutexTask,"ax",%progbits
 692              		.align	2
 693              		.thumb
 694              		.thumb_func
 696              	prvLowPriorityMutexTask:
 697              	.LFB112:
 411:App/Common/Minimal/GenQTest.c **** }
 412:App/Common/Minimal/GenQTest.c **** /*-----------------------------------------------------------*/
 413:App/Common/Minimal/GenQTest.c **** 
 414:App/Common/Minimal/GenQTest.c **** static void prvLowPriorityMutexTask( void *pvParameters )
 415:App/Common/Minimal/GenQTest.c **** {
 698              		.loc 1 415 0
 699              		.cfi_startproc
 700              		@ args = 0, pretend = 0, frame = 16
 701              		@ frame_needed = 1, uses_anonymous_args = 0
 702 0000 80B5     		push	{r7, lr}
 703              	.LCFI6:
 704              		.cfi_def_cfa_offset 8
 705              		.cfi_offset 7, -8
 706              		.cfi_offset 14, -4
 707 0002 84B0     		sub	sp, sp, #16
 708              	.LCFI7:
 709              		.cfi_def_cfa_offset 24
 710 0004 00AF     		add	r7, sp, #0
 711              	.LCFI8:
 712              		.cfi_def_cfa_register 7
 713 0006 7860     		str	r0, [r7, #4]
 416:App/Common/Minimal/GenQTest.c **** xSemaphoreHandle xMutex = ( xSemaphoreHandle ) pvParameters;
 714              		.loc 1 416 0
 715 0008 7B68     		ldr	r3, [r7, #4]
 716 000a FB60     		str	r3, [r7, #12]
 717              	.L54:
 417:App/Common/Minimal/GenQTest.c **** 
 418:App/Common/Minimal/GenQTest.c **** 	#ifdef USE_STDIO
 419:App/Common/Minimal/GenQTest.c **** 	void vPrintDisplayMessage( const portCHAR * const * ppcMessageToSend );
 420:App/Common/Minimal/GenQTest.c **** 	
 421:App/Common/Minimal/GenQTest.c **** 		const portCHAR * const pcTaskStartMsg = "Mutex with priority inheritance test started.\r\n";
 422:App/Common/Minimal/GenQTest.c **** 
 423:App/Common/Minimal/GenQTest.c **** 		/* Queue a message for printing to say the task has started. */
 424:App/Common/Minimal/GenQTest.c **** 		vPrintDisplayMessage( &pcTaskStartMsg );
 425:App/Common/Minimal/GenQTest.c **** 	#endif
 426:App/Common/Minimal/GenQTest.c **** 
 427:App/Common/Minimal/GenQTest.c **** 	for( ;; )
 428:App/Common/Minimal/GenQTest.c **** 	{
 429:App/Common/Minimal/GenQTest.c **** 		/* Take the mutex.  It should be available now. */
 430:App/Common/Minimal/GenQTest.c **** 		if( xSemaphoreTake( xMutex, genqNO_BLOCK ) != pdPASS )
 718              		.loc 1 430 0
 719 000c F868     		ldr	r0, [r7, #12]
 720 000e 0021     		movs	r1, #0
 721 0010 0022     		movs	r2, #0
 722 0012 0023     		movs	r3, #0
 723 0014 FFF7FEFF 		bl	xQueueGenericReceive
 724 0018 0346     		mov	r3, r0
 725 001a 012B     		cmp	r3, #1
 726 001c 02D0     		beq	.L46
 431:App/Common/Minimal/GenQTest.c **** 		{
 432:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 727              		.loc 1 432 0
 728 001e 2E4B     		ldr	r3, .L55
 729 0020 0122     		movs	r2, #1
 730 0022 1A60     		str	r2, [r3]
 731              	.L46:
 433:App/Common/Minimal/GenQTest.c **** 		}
 434:App/Common/Minimal/GenQTest.c **** 
 435:App/Common/Minimal/GenQTest.c **** 		/* Set our guarded variable to a known start value. */
 436:App/Common/Minimal/GenQTest.c **** 		ulGuardedVariable = 0;
 732              		.loc 1 436 0
 733 0024 2D4B     		ldr	r3, .L55+4
 734 0026 0022     		movs	r2, #0
 735 0028 1A60     		str	r2, [r3]
 437:App/Common/Minimal/GenQTest.c **** 
 438:App/Common/Minimal/GenQTest.c **** 		/* Our priority should be as per that assigned when the task was
 439:App/Common/Minimal/GenQTest.c **** 		created. */
 440:App/Common/Minimal/GenQTest.c **** 		if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
 736              		.loc 1 440 0
 737 002a 0020     		movs	r0, #0
 738 002c FFF7FEFF 		bl	uxTaskPriorityGet
 739 0030 0346     		mov	r3, r0
 740 0032 002B     		cmp	r3, #0
 741 0034 02D0     		beq	.L47
 441:App/Common/Minimal/GenQTest.c **** 		{
 442:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 742              		.loc 1 442 0
 743 0036 284B     		ldr	r3, .L55
 744 0038 0122     		movs	r2, #1
 745 003a 1A60     		str	r2, [r3]
 746              	.L47:
 443:App/Common/Minimal/GenQTest.c **** 		}
 444:App/Common/Minimal/GenQTest.c **** 
 445:App/Common/Minimal/GenQTest.c **** 		/* Now unsuspend the high priority task.  This will attempt to take the
 446:App/Common/Minimal/GenQTest.c **** 		mutex, and block when it finds it cannot obtain it. */
 447:App/Common/Minimal/GenQTest.c **** 		vTaskResume( xHighPriorityMutexTask );
 747              		.loc 1 447 0
 748 003c 284B     		ldr	r3, .L55+8
 749 003e 1B68     		ldr	r3, [r3]
 750 0040 1846     		mov	r0, r3
 751 0042 FFF7FEFF 		bl	vTaskResume
 448:App/Common/Minimal/GenQTest.c **** 
 449:App/Common/Minimal/GenQTest.c **** 		/* We should now have inherited the prioritoy of the high priority task,
 450:App/Common/Minimal/GenQTest.c **** 		as by now it will have attempted to get the mutex. */
 451:App/Common/Minimal/GenQTest.c **** 		if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 752              		.loc 1 451 0
 753 0046 0020     		movs	r0, #0
 754 0048 FFF7FEFF 		bl	uxTaskPriorityGet
 755 004c 0346     		mov	r3, r0
 756 004e 032B     		cmp	r3, #3
 757 0050 02D0     		beq	.L48
 452:App/Common/Minimal/GenQTest.c **** 		{
 453:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 758              		.loc 1 453 0
 759 0052 214B     		ldr	r3, .L55
 760 0054 0122     		movs	r2, #1
 761 0056 1A60     		str	r2, [r3]
 762              	.L48:
 454:App/Common/Minimal/GenQTest.c **** 		}
 455:App/Common/Minimal/GenQTest.c **** 
 456:App/Common/Minimal/GenQTest.c **** 		/* We can attempt to set our priority to the test priority - between the
 457:App/Common/Minimal/GenQTest.c **** 		idle priority and the medium/high test priorities, but our actual
 458:App/Common/Minimal/GenQTest.c **** 		prioroity should remain at the high priority. */
 459:App/Common/Minimal/GenQTest.c **** 		vTaskPrioritySet( NULL, genqMUTEX_TEST_PRIORITY );
 763              		.loc 1 459 0
 764 0058 0020     		movs	r0, #0
 765 005a 0121     		movs	r1, #1
 766 005c FFF7FEFF 		bl	vTaskPrioritySet
 460:App/Common/Minimal/GenQTest.c **** 		if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
 767              		.loc 1 460 0
 768 0060 0020     		movs	r0, #0
 769 0062 FFF7FEFF 		bl	uxTaskPriorityGet
 770 0066 0346     		mov	r3, r0
 771 0068 032B     		cmp	r3, #3
 772 006a 02D0     		beq	.L49
 461:App/Common/Minimal/GenQTest.c **** 		{
 462:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 773              		.loc 1 462 0
 774 006c 1A4B     		ldr	r3, .L55
 775 006e 0122     		movs	r2, #1
 776 0070 1A60     		str	r2, [r3]
 777              	.L49:
 463:App/Common/Minimal/GenQTest.c **** 		}
 464:App/Common/Minimal/GenQTest.c **** 
 465:App/Common/Minimal/GenQTest.c **** 		/* Now unsuspend the medium priority task.  This should not run as our
 466:App/Common/Minimal/GenQTest.c **** 		inherited priority is above that of the medium priority task. */
 467:App/Common/Minimal/GenQTest.c **** 		vTaskResume( xMediumPriorityMutexTask );
 778              		.loc 1 467 0
 779 0072 1C4B     		ldr	r3, .L55+12
 780 0074 1B68     		ldr	r3, [r3]
 781 0076 1846     		mov	r0, r3
 782 0078 FFF7FEFF 		bl	vTaskResume
 468:App/Common/Minimal/GenQTest.c **** 
 469:App/Common/Minimal/GenQTest.c **** 		/* If the did run then it will have incremented our guarded variable. */
 470:App/Common/Minimal/GenQTest.c **** 		if( ulGuardedVariable != 0 )
 783              		.loc 1 470 0
 784 007c 174B     		ldr	r3, .L55+4
 785 007e 1B68     		ldr	r3, [r3]
 786 0080 002B     		cmp	r3, #0
 787 0082 02D0     		beq	.L50
 471:App/Common/Minimal/GenQTest.c **** 		{
 472:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 788              		.loc 1 472 0
 789 0084 144B     		ldr	r3, .L55
 790 0086 0122     		movs	r2, #1
 791 0088 1A60     		str	r2, [r3]
 792              	.L50:
 473:App/Common/Minimal/GenQTest.c **** 		}
 474:App/Common/Minimal/GenQTest.c **** 
 475:App/Common/Minimal/GenQTest.c **** 		/* When we give back the semaphore our priority should be disinherited
 476:App/Common/Minimal/GenQTest.c **** 		back to the priority to which we attempted to set ourselves.  This means
 477:App/Common/Minimal/GenQTest.c **** 		that when the high priority task next blocks, the medium priority task
 478:App/Common/Minimal/GenQTest.c **** 		should execute and increment the guarded variable.   When we next run
 479:App/Common/Minimal/GenQTest.c **** 		both the high and medium priority tasks will have been suspended again. */
 480:App/Common/Minimal/GenQTest.c **** 		if( xSemaphoreGive( xMutex ) != pdPASS )
 793              		.loc 1 480 0
 794 008a F868     		ldr	r0, [r7, #12]
 795 008c 0021     		movs	r1, #0
 796 008e 0022     		movs	r2, #0
 797 0090 0023     		movs	r3, #0
 798 0092 FFF7FEFF 		bl	xQueueGenericSend
 799 0096 0346     		mov	r3, r0
 800 0098 012B     		cmp	r3, #1
 801 009a 02D0     		beq	.L51
 481:App/Common/Minimal/GenQTest.c **** 		{
 482:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 802              		.loc 1 482 0
 803 009c 0E4B     		ldr	r3, .L55
 804 009e 0122     		movs	r2, #1
 805 00a0 1A60     		str	r2, [r3]
 806              	.L51:
 483:App/Common/Minimal/GenQTest.c **** 		}
 484:App/Common/Minimal/GenQTest.c **** 
 485:App/Common/Minimal/GenQTest.c **** 		/* Check that the guarded variable did indeed increment... */
 486:App/Common/Minimal/GenQTest.c **** 		if( ulGuardedVariable != 1 )
 807              		.loc 1 486 0
 808 00a2 0E4B     		ldr	r3, .L55+4
 809 00a4 1B68     		ldr	r3, [r3]
 810 00a6 012B     		cmp	r3, #1
 811 00a8 02D0     		beq	.L52
 487:App/Common/Minimal/GenQTest.c **** 		{
 488:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 812              		.loc 1 488 0
 813 00aa 0B4B     		ldr	r3, .L55
 814 00ac 0122     		movs	r2, #1
 815 00ae 1A60     		str	r2, [r3]
 816              	.L52:
 489:App/Common/Minimal/GenQTest.c **** 		}
 490:App/Common/Minimal/GenQTest.c **** 
 491:App/Common/Minimal/GenQTest.c **** 		/* ... and that our priority has been disinherited to
 492:App/Common/Minimal/GenQTest.c **** 		genqMUTEX_TEST_PRIORITY. */
 493:App/Common/Minimal/GenQTest.c **** 		if( uxTaskPriorityGet( NULL ) != genqMUTEX_TEST_PRIORITY )
 817              		.loc 1 493 0
 818 00b0 0020     		movs	r0, #0
 819 00b2 FFF7FEFF 		bl	uxTaskPriorityGet
 820 00b6 0346     		mov	r3, r0
 821 00b8 012B     		cmp	r3, #1
 822 00ba 02D0     		beq	.L53
 494:App/Common/Minimal/GenQTest.c **** 		{
 495:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 823              		.loc 1 495 0
 824 00bc 064B     		ldr	r3, .L55
 825 00be 0122     		movs	r2, #1
 826 00c0 1A60     		str	r2, [r3]
 827              	.L53:
 496:App/Common/Minimal/GenQTest.c **** 		}
 497:App/Common/Minimal/GenQTest.c **** 
 498:App/Common/Minimal/GenQTest.c **** 		/* Set our priority back to our original priority ready for the next
 499:App/Common/Minimal/GenQTest.c **** 		loop around this test. */
 500:App/Common/Minimal/GenQTest.c **** 		vTaskPrioritySet( NULL, genqMUTEX_LOW_PRIORITY );
 828              		.loc 1 500 0
 829 00c2 0020     		movs	r0, #0
 830 00c4 0021     		movs	r1, #0
 831 00c6 FFF7FEFF 		bl	vTaskPrioritySet
 501:App/Common/Minimal/GenQTest.c **** 
 502:App/Common/Minimal/GenQTest.c **** 		/* Just to show we are still running. */
 503:App/Common/Minimal/GenQTest.c **** 		ulLoopCounter2++;
 832              		.loc 1 503 0
 833 00ca 074B     		ldr	r3, .L55+16
 834 00cc 1B68     		ldr	r3, [r3]
 835 00ce 5A1C     		adds	r2, r3, #1
 836 00d0 054B     		ldr	r3, .L55+16
 837 00d2 1A60     		str	r2, [r3]
 504:App/Common/Minimal/GenQTest.c **** 
 505:App/Common/Minimal/GenQTest.c **** 		#if configUSE_PREEMPTION == 0
 506:App/Common/Minimal/GenQTest.c **** 			taskYIELD();
 507:App/Common/Minimal/GenQTest.c **** 		#endif		
 508:App/Common/Minimal/GenQTest.c **** 	}
 838              		.loc 1 508 0
 839 00d4 9AE7     		b	.L54
 840              	.L56:
 841 00d6 00BF     		.align	2
 842              	.L55:
 843 00d8 00000000 		.word	xErrorDetected
 844 00dc 00000000 		.word	ulGuardedVariable
 845 00e0 00000000 		.word	xHighPriorityMutexTask
 846 00e4 00000000 		.word	xMediumPriorityMutexTask
 847 00e8 00000000 		.word	ulLoopCounter2
 848              		.cfi_endproc
 849              	.LFE112:
 851              		.section	.text.prvMediumPriorityMutexTask,"ax",%progbits
 852              		.align	2
 853              		.thumb
 854              		.thumb_func
 856              	prvMediumPriorityMutexTask:
 857              	.LFB113:
 509:App/Common/Minimal/GenQTest.c **** }
 510:App/Common/Minimal/GenQTest.c **** /*-----------------------------------------------------------*/
 511:App/Common/Minimal/GenQTest.c **** 
 512:App/Common/Minimal/GenQTest.c **** static void prvMediumPriorityMutexTask( void *pvParameters )
 513:App/Common/Minimal/GenQTest.c **** {
 858              		.loc 1 513 0
 859              		.cfi_startproc
 860              		@ args = 0, pretend = 0, frame = 8
 861              		@ frame_needed = 1, uses_anonymous_args = 0
 862 0000 80B5     		push	{r7, lr}
 863              	.LCFI9:
 864              		.cfi_def_cfa_offset 8
 865              		.cfi_offset 7, -8
 866              		.cfi_offset 14, -4
 867 0002 82B0     		sub	sp, sp, #8
 868              	.LCFI10:
 869              		.cfi_def_cfa_offset 16
 870 0004 00AF     		add	r7, sp, #0
 871              	.LCFI11:
 872              		.cfi_def_cfa_register 7
 873 0006 7860     		str	r0, [r7, #4]
 874              	.L58:
 514:App/Common/Minimal/GenQTest.c **** 	( void ) pvParameters;
 515:App/Common/Minimal/GenQTest.c **** 
 516:App/Common/Minimal/GenQTest.c **** 	for( ;; )
 517:App/Common/Minimal/GenQTest.c **** 	{
 518:App/Common/Minimal/GenQTest.c **** 		/* The medium priority task starts by suspending itself.  The low
 519:App/Common/Minimal/GenQTest.c **** 		priority task will unsuspend this task when required. */
 520:App/Common/Minimal/GenQTest.c **** 		vTaskSuspend( NULL );
 875              		.loc 1 520 0 discriminator 1
 876 0008 0020     		movs	r0, #0
 877 000a FFF7FEFF 		bl	vTaskSuspend
 521:App/Common/Minimal/GenQTest.c **** 
 522:App/Common/Minimal/GenQTest.c **** 		/* When this task unsuspends all it does is increment the guarded
 523:App/Common/Minimal/GenQTest.c **** 		variable, this is so the low priority task knows that it has
 524:App/Common/Minimal/GenQTest.c **** 		executed. */
 525:App/Common/Minimal/GenQTest.c **** 		ulGuardedVariable++;
 878              		.loc 1 525 0 discriminator 1
 879 000e 034B     		ldr	r3, .L59
 880 0010 1B68     		ldr	r3, [r3]
 881 0012 5A1C     		adds	r2, r3, #1
 882 0014 014B     		ldr	r3, .L59
 883 0016 1A60     		str	r2, [r3]
 526:App/Common/Minimal/GenQTest.c **** 	}
 884              		.loc 1 526 0 discriminator 1
 885 0018 F6E7     		b	.L58
 886              	.L60:
 887 001a 00BF     		.align	2
 888              	.L59:
 889 001c 00000000 		.word	ulGuardedVariable
 890              		.cfi_endproc
 891              	.LFE113:
 893              		.section	.text.prvHighPriorityMutexTask,"ax",%progbits
 894              		.align	2
 895              		.thumb
 896              		.thumb_func
 898              	prvHighPriorityMutexTask:
 899              	.LFB114:
 527:App/Common/Minimal/GenQTest.c **** }
 528:App/Common/Minimal/GenQTest.c **** /*-----------------------------------------------------------*/
 529:App/Common/Minimal/GenQTest.c **** 
 530:App/Common/Minimal/GenQTest.c **** static void prvHighPriorityMutexTask( void *pvParameters )
 531:App/Common/Minimal/GenQTest.c **** {
 900              		.loc 1 531 0
 901              		.cfi_startproc
 902              		@ args = 0, pretend = 0, frame = 16
 903              		@ frame_needed = 1, uses_anonymous_args = 0
 904 0000 80B5     		push	{r7, lr}
 905              	.LCFI12:
 906              		.cfi_def_cfa_offset 8
 907              		.cfi_offset 7, -8
 908              		.cfi_offset 14, -4
 909 0002 84B0     		sub	sp, sp, #16
 910              	.LCFI13:
 911              		.cfi_def_cfa_offset 24
 912 0004 00AF     		add	r7, sp, #0
 913              	.LCFI14:
 914              		.cfi_def_cfa_register 7
 915 0006 7860     		str	r0, [r7, #4]
 532:App/Common/Minimal/GenQTest.c **** xSemaphoreHandle xMutex = ( xSemaphoreHandle ) pvParameters;
 916              		.loc 1 532 0
 917 0008 7B68     		ldr	r3, [r7, #4]
 918 000a FB60     		str	r3, [r7, #12]
 919              	.L64:
 533:App/Common/Minimal/GenQTest.c **** 
 534:App/Common/Minimal/GenQTest.c **** 	for( ;; )
 535:App/Common/Minimal/GenQTest.c **** 	{
 536:App/Common/Minimal/GenQTest.c **** 		/* The high priority task starts by suspending itself.  The low
 537:App/Common/Minimal/GenQTest.c **** 		priority task will unsuspend this task when required. */
 538:App/Common/Minimal/GenQTest.c **** 		vTaskSuspend( NULL );
 920              		.loc 1 538 0
 921 000c 0020     		movs	r0, #0
 922 000e FFF7FEFF 		bl	vTaskSuspend
 539:App/Common/Minimal/GenQTest.c **** 
 540:App/Common/Minimal/GenQTest.c **** 		/* When this task unsuspends all it does is attempt to obtain
 541:App/Common/Minimal/GenQTest.c **** 		the mutex.  It should find the mutex is not available so a
 542:App/Common/Minimal/GenQTest.c **** 		block time is specified. */
 543:App/Common/Minimal/GenQTest.c **** 		if( xSemaphoreTake( xMutex, portMAX_DELAY ) != pdPASS )
 923              		.loc 1 543 0
 924 0012 F868     		ldr	r0, [r7, #12]
 925 0014 0021     		movs	r1, #0
 926 0016 4FF0FF32 		mov	r2, #-1
 927 001a 0023     		movs	r3, #0
 928 001c FFF7FEFF 		bl	xQueueGenericReceive
 929 0020 0346     		mov	r3, r0
 930 0022 012B     		cmp	r3, #1
 931 0024 02D0     		beq	.L62
 544:App/Common/Minimal/GenQTest.c **** 		{
 545:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 932              		.loc 1 545 0
 933 0026 084B     		ldr	r3, .L65
 934 0028 0122     		movs	r2, #1
 935 002a 1A60     		str	r2, [r3]
 936              	.L62:
 546:App/Common/Minimal/GenQTest.c **** 		}
 547:App/Common/Minimal/GenQTest.c **** 
 548:App/Common/Minimal/GenQTest.c **** 		/* When we eventually obtain the mutex we just give it back then
 549:App/Common/Minimal/GenQTest.c **** 		return to suspend ready for the next test. */
 550:App/Common/Minimal/GenQTest.c **** 		if( xSemaphoreGive( xMutex ) != pdPASS )
 937              		.loc 1 550 0
 938 002c F868     		ldr	r0, [r7, #12]
 939 002e 0021     		movs	r1, #0
 940 0030 0022     		movs	r2, #0
 941 0032 0023     		movs	r3, #0
 942 0034 FFF7FEFF 		bl	xQueueGenericSend
 943 0038 0346     		mov	r3, r0
 944 003a 012B     		cmp	r3, #1
 945 003c 03D0     		beq	.L63
 551:App/Common/Minimal/GenQTest.c **** 		{
 552:App/Common/Minimal/GenQTest.c **** 			xErrorDetected = pdTRUE;
 946              		.loc 1 552 0
 947 003e 024B     		ldr	r3, .L65
 948 0040 0122     		movs	r2, #1
 949 0042 1A60     		str	r2, [r3]
 553:App/Common/Minimal/GenQTest.c **** 		}		
 554:App/Common/Minimal/GenQTest.c **** 	}
 950              		.loc 1 554 0
 951 0044 E2E7     		b	.L64
 952              	.L63:
 953 0046 E1E7     		b	.L64
 954              	.L66:
 955              		.align	2
 956              	.L65:
 957 0048 00000000 		.word	xErrorDetected
 958              		.cfi_endproc
 959              	.LFE114:
 961              		.section	.text.xAreGenericQueueTasksStillRunning,"ax",%progbits
 962              		.align	2
 963              		.global	xAreGenericQueueTasksStillRunning
 964              		.thumb
 965              		.thumb_func
 967              	xAreGenericQueueTasksStillRunning:
 968              	.LFB115:
 555:App/Common/Minimal/GenQTest.c **** }
 556:App/Common/Minimal/GenQTest.c **** /*-----------------------------------------------------------*/
 557:App/Common/Minimal/GenQTest.c **** 
 558:App/Common/Minimal/GenQTest.c **** /* This is called to check that all the created tasks are still running. */
 559:App/Common/Minimal/GenQTest.c **** portBASE_TYPE xAreGenericQueueTasksStillRunning( void )
 560:App/Common/Minimal/GenQTest.c **** {
 969              		.loc 1 560 0
 970              		.cfi_startproc
 971              		@ args = 0, pretend = 0, frame = 0
 972              		@ frame_needed = 1, uses_anonymous_args = 0
 973              		@ link register save eliminated.
 974 0000 80B4     		push	{r7}
 975              	.LCFI15:
 976              		.cfi_def_cfa_offset 4
 977              		.cfi_offset 7, -4
 978 0002 00AF     		add	r7, sp, #0
 979              	.LCFI16:
 980              		.cfi_def_cfa_register 7
 561:App/Common/Minimal/GenQTest.c **** static unsigned portLONG ulLastLoopCounter = 0, ulLastLoopCounter2 = 0;
 562:App/Common/Minimal/GenQTest.c **** 
 563:App/Common/Minimal/GenQTest.c **** 	/* If the demo task is still running then we expect the loopcounters to
 564:App/Common/Minimal/GenQTest.c **** 	have incremented since this function was last called. */
 565:App/Common/Minimal/GenQTest.c **** 	if( ulLastLoopCounter == ulLoopCounter )
 981              		.loc 1 565 0
 982 0004 124B     		ldr	r3, .L71
 983 0006 1A68     		ldr	r2, [r3]
 984 0008 124B     		ldr	r3, .L71+4
 985 000a 1B68     		ldr	r3, [r3]
 986 000c 9A42     		cmp	r2, r3
 987 000e 02D1     		bne	.L68
 566:App/Common/Minimal/GenQTest.c **** 	{
 567:App/Common/Minimal/GenQTest.c **** 		xErrorDetected = pdTRUE;
 988              		.loc 1 567 0
 989 0010 114B     		ldr	r3, .L71+8
 990 0012 0122     		movs	r2, #1
 991 0014 1A60     		str	r2, [r3]
 992              	.L68:
 568:App/Common/Minimal/GenQTest.c **** 	}
 569:App/Common/Minimal/GenQTest.c **** 
 570:App/Common/Minimal/GenQTest.c **** 	if( ulLastLoopCounter2 == ulLoopCounter2 )
 993              		.loc 1 570 0
 994 0016 114B     		ldr	r3, .L71+12
 995 0018 1A68     		ldr	r2, [r3]
 996 001a 114B     		ldr	r3, .L71+16
 997 001c 1B68     		ldr	r3, [r3]
 998 001e 9A42     		cmp	r2, r3
 999 0020 02D1     		bne	.L69
 571:App/Common/Minimal/GenQTest.c **** 	{
 572:App/Common/Minimal/GenQTest.c **** 		xErrorDetected = pdTRUE;
 1000              		.loc 1 572 0
 1001 0022 0D4B     		ldr	r3, .L71+8
 1002 0024 0122     		movs	r2, #1
 1003 0026 1A60     		str	r2, [r3]
 1004              	.L69:
 573:App/Common/Minimal/GenQTest.c **** 	}
 574:App/Common/Minimal/GenQTest.c **** 
 575:App/Common/Minimal/GenQTest.c **** 	ulLastLoopCounter = ulLoopCounter;
 1005              		.loc 1 575 0
 1006 0028 0A4B     		ldr	r3, .L71+4
 1007 002a 1A68     		ldr	r2, [r3]
 1008 002c 084B     		ldr	r3, .L71
 1009 002e 1A60     		str	r2, [r3]
 576:App/Common/Minimal/GenQTest.c **** 	ulLastLoopCounter2 = ulLoopCounter2;	
 1010              		.loc 1 576 0
 1011 0030 0B4B     		ldr	r3, .L71+16
 1012 0032 1A68     		ldr	r2, [r3]
 1013 0034 094B     		ldr	r3, .L71+12
 1014 0036 1A60     		str	r2, [r3]
 577:App/Common/Minimal/GenQTest.c **** 
 578:App/Common/Minimal/GenQTest.c **** 	/* Errors detected in the task itself will have latched xErrorDetected
 579:App/Common/Minimal/GenQTest.c **** 	to true. */
 580:App/Common/Minimal/GenQTest.c **** 
 581:App/Common/Minimal/GenQTest.c **** 	return ( portBASE_TYPE ) !xErrorDetected;
 1015              		.loc 1 581 0
 1016 0038 074B     		ldr	r3, .L71+8
 1017 003a 1B68     		ldr	r3, [r3]
 1018 003c 002B     		cmp	r3, #0
 1019 003e 14BF     		ite	ne
 1020 0040 0023     		movne	r3, #0
 1021 0042 0123     		moveq	r3, #1
 1022 0044 DBB2     		uxtb	r3, r3
 582:App/Common/Minimal/GenQTest.c **** }
 1023              		.loc 1 582 0
 1024 0046 1846     		mov	r0, r3
 1025 0048 BD46     		mov	sp, r7
 1026              		@ sp needed
 1027 004a 5DF8047B 		ldr	r7, [sp], #4
 1028 004e 7047     		bx	lr
 1029              	.L72:
 1030              		.align	2
 1031              	.L71:
 1032 0050 00000000 		.word	ulLastLoopCounter.8257
 1033 0054 00000000 		.word	ulLoopCounter
 1034 0058 00000000 		.word	xErrorDetected
 1035 005c 00000000 		.word	ulLastLoopCounter2.8258
 1036 0060 00000000 		.word	ulLoopCounter2
 1037              		.cfi_endproc
 1038              	.LFE115:
 1040              		.section	.bss.ulLastLoopCounter.8257,"aw",%nobits
 1041              		.align	2
 1044              	ulLastLoopCounter.8257:
 1045 0000 00000000 		.space	4
 1046              		.section	.bss.ulLastLoopCounter2.8258,"aw",%nobits
 1047              		.align	2
 1050              	ulLastLoopCounter2.8258:
 1051 0000 00000000 		.space	4
 1052              		.text
 1053              	.Letext0:
 1054              		.file 2 "/Users/maticknap/ARM/gcc-arm-none-eabi-4_8-2014q2/arm-none-eabi/include/machine/_default_
 1055              		.file 3 "/Users/maticknap/ARM/gcc-arm-none-eabi-4_8-2014q2/arm-none-eabi/include/stdint.h"
 1056              		.file 4 "Source/portable/GCC/ARM_CM4F/portmacro.h"
 1057              		.file 5 "Source/include/task.h"
 1058              		.file 6 "Source/include/queue.h"
 1059              		.file 7 "Source/include/semphr.h"
 1060              		.file 8 "App/STM32F4-Discovery/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 GenQTest.c
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:20     .bss.xErrorDetected:0000000000000000 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:23     .bss.xErrorDetected:0000000000000000 xErrorDetected
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:26     .bss.ulLoopCounter:0000000000000000 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:29     .bss.ulLoopCounter:0000000000000000 ulLoopCounter
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:32     .bss.ulLoopCounter2:0000000000000000 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:35     .bss.ulLoopCounter2:0000000000000000 ulLoopCounter2
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:38     .bss.ulGuardedVariable:0000000000000000 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:41     .bss.ulGuardedVariable:0000000000000000 ulGuardedVariable
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:44     .bss.xHighPriorityMutexTask:0000000000000000 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:47     .bss.xHighPriorityMutexTask:0000000000000000 xHighPriorityMutexTask
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:50     .bss.xMediumPriorityMutexTask:0000000000000000 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:53     .bss.xMediumPriorityMutexTask:0000000000000000 xMediumPriorityMutexTask
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:56     .rodata:0000000000000000 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:75     .text.vStartGenericQueueTasks:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:80     .text.vStartGenericQueueTasks:0000000000000000 vStartGenericQueueTasks
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:181    .text.vStartGenericQueueTasks:00000000000000ac $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:201    .text.prvSendFrontAndBackTest:0000000000000000 prvSendFrontAndBackTest
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:696    .text.prvLowPriorityMutexTask:0000000000000000 prvLowPriorityMutexTask
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:856    .text.prvMediumPriorityMutexTask:0000000000000000 prvMediumPriorityMutexTask
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:898    .text.prvHighPriorityMutexTask:0000000000000000 prvHighPriorityMutexTask
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:197    .text.prvSendFrontAndBackTest:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:557    .text.prvSendFrontAndBackTest:0000000000000240 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:561    .text.prvSendFrontAndBackTest:0000000000000248 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:686    .text.prvSendFrontAndBackTest:0000000000000314 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:692    .text.prvLowPriorityMutexTask:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:843    .text.prvLowPriorityMutexTask:00000000000000d8 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:852    .text.prvMediumPriorityMutexTask:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:889    .text.prvMediumPriorityMutexTask:000000000000001c $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:894    .text.prvHighPriorityMutexTask:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:957    .text.prvHighPriorityMutexTask:0000000000000048 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:962    .text.xAreGenericQueueTasksStillRunning:0000000000000000 $t
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:967    .text.xAreGenericQueueTasksStillRunning:0000000000000000 xAreGenericQueueTasksStillRunning
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:1032   .text.xAreGenericQueueTasksStillRunning:0000000000000050 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:1044   .bss.ulLastLoopCounter.8257:0000000000000000 ulLastLoopCounter.8257
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:1050   .bss.ulLastLoopCounter2.8258:0000000000000000 ulLastLoopCounter2.8258
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:1041   .bss.ulLastLoopCounter.8257:0000000000000000 $d
/var/folders/hq/s45830mn6w17j2ybbkgkrjk00000gn/T//ccl9llrF.s:1047   .bss.ulLastLoopCounter2.8258:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
xQueueGenericCreate
vQueueAddToRegistry
xTaskGenericCreate
xQueueCreateMutex
xQueueGenericSend
uxQueueMessagesWaiting
xQueueGenericReceive
uxTaskPriorityGet
vTaskResume
vTaskPrioritySet
vTaskSuspend
